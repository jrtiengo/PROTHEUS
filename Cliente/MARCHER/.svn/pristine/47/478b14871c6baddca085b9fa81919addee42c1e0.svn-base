#INCLUDE "PROTHEUS.CH"
#INCLUDE "TBICONN.CH"
#INCLUDE "TOPCONN.CH"
/*
{Protheus.doc} MARA070
Programa que fará a atualização dos pedidos de venda no Protheus pelo webservice da Mercos
@type User function
@author Jean Rehermann - Solutio
@since 15/11/2021
*/
User Function MARA070()

	Private lBlind   := IsBlind()
	Private bProcInc := {|| Iif( !lBlind, IncProc(), 0 ) }
	Private aLogMerc := {}

	If lBlind
		EnvMercos() // Criar o ambiente de execução
	EndIf

	// Buscar os pedidos
	Processa({|| ApiPVMerc() }, "Integrando condição de pagamento...")

	If lBlind
		RpcClearEnv()
	EndIf

Return

/*
Cria o ambiente para a execução do processo no schedule
*/
Static Function EnvMercos()

	Local cRpcEmp		:= "01"	     // Empresa
	Local cRpcFil		:= "01"	     // Filial Principal
	Local cEnvMod		:= "FAT"     // Modulo
	Local cFunName		:= "MARA060" // Funcao
    Local aTables 		:= {"SC5","SC6","SA1"}

	RPCSetType(3) //Define que o ambiente nao consome licenca
	RpcSetEnv( cRpcEmp , cRpcFil , , , cEnvMod, cFunName , aTables, , , ,  )

Return Nil

/*
Efetua a atualização dos pedidos no Protheus
*/
Static Function ApiPVMerc()

	Local nCont     := 0
	Local nI        := 0
	Local nX        := 0
	Local nScnExtra := 0
	Local cMetodo   := "GET"
	Local cDtApos   := DtoS( dDatabase ) + Time()
	Local cJsonTxt  := ""
	Local cMsgJson  := ""
	Local aRet      := {}
	Local aTemp     := {}
	Local aTmpDesc  := {}
	Local aDesc     := {}
	Local aCabPv    := {}
	Local aItemPv   := {}
	Local aItens    := {}
	Local oJson, oJPedido

	cDtApos := AllTrim( SuperGetMv( "ES_DTCONPV",.F., cDtApos ) )
	cDtApos := Left( cDtApos, 4 ) +"-"+ SubStr( cDtApos, 5, 2 ) +"-"+ SubStr( cDtApos, 7, 2 ) +"%20"+ StrTran( Right( cDtApos, 8 ), ":", "%3A" )

	//aRet := U_SndJSON( cMetodo, "/api/v2/pedidos/?alterado_apos="+ cDtApos +"&status=2", "" )
aret:={"200","000"}
	cDtApos := DtoS( dDatabase ) + Time()
	//PutMv("ES_DTCONPV",cDtApos) // Guardo a data da consulta atual para pegar somente o que for incluído/alterado

	If aRet[ 1 ] == "200" .And. Len( aRet[ 2 ] ) > 0

		// Recupero o Json recebido da API com os pedidos
		//cJsonTxt := aRet[ 3 ]
		cJsonTxt := '{"id": 1957884,"cliente_id": 6205590,"transportadora_id": 366475,"transportadora_nome": "000055 - TRANSPORTE PROPRIO DO DESTINATARIO","tipo_pedido_id": null,"criador_id": 54248,"nome_contato": "","status": "2","numero": 98,"rastreamento": "","valor_frete": 50.0,"total": 50695.64,"condicao_pagamento": "A VISTA: BOLETO 7 DIAS","condicao_pagamento_id": 158252,"forma_pagamento_id": 0,"data_emissao": "2022-04-26","observacoes": "TESTE JEAN CORREÇÕES","itens": [{"id": 14798620,"produto_id": 16412650,"tabela_preco_id": 0,"quantidade": 1.0,"quantidade_grades": [],"preco_tabela": 68700.0,"preco_liquido": 50645.64,"ipi": 0.0,"tipo_ipi": "P","st": 0.0,"subtotal": 50645.64,"cotacao_moeda": 1.0,"excluido": false,"descontos_do_vendedor": [],"descontos_de_promocoes": [],"descontos_de_politicas": [{"slug": "c01bfd8d-4a87-4b4b-ab65-2bbf6fea18c4","regra_id": 97796,"desconto": 20.0},{"slug": "57f69f56-9ddd-4791-a137-d4a65533299c","regra_id": 97798,"desconto": 5.0},{"slug": "4e898a42-0bf8-42ee-a9d9-d36a1ce5bf91","regra_id": 97809,"desconto": 3.0}],"observacoes": "","produto_codigo": "0300007","produto_nome": "EMB DE GRAOS INGRAIN100  VERSAO 2020"}],"extras": [{"campo_extra_id": 26286,"nome": "E-mail envio NF e BOL","valor": "jean.rehermann@gmail.com","tipo": "0","valor_texto": "jean.rehermann@gmail.com","valor_data": "2001-01-01","valor_hora": "","valor_decimal": null,"valor_lista": []},{"campo_extra_id": 26095,"nome": "Natureza Financeira","valor": [[11909,"VENDA DE MÁQUINAS MI  -  MERCADO INTERNO"]],"tipo": "4","valor_texto": "","valor_data": "2001-01-01","valor_hora": "","valor_decimal": null,"valor_lista": [[11909,"VENDA DE MÁQUINAS MI  -  MERCADO INTERNO"]]},{"campo_extra_id": 25715,"nome": "Previsão de Embarque","valor": "2022-05-04","tipo": "1","valor_texto": "","valor_data": "2022-05-04","valor_hora": "","valor_decimal": null,"valor_lista": []},{"campo_extra_id": 25637,"nome": "Tipo de frete","valor": [[11677,"FOB"]],"tipo": "4","valor_texto": "","valor_data": "2001-01-01","valor_hora": "","valor_decimal": null,"valor_lista": [[11677,"FOB"]]}],"ultima_alteracao": "2022-04-26 00:12:20","cliente_razao_social": "AG MAQUINAS E IMPLEMENTOS AGRICOLAS LTDA","cliente_nome_fantasia": "AG MAQUINAS","cliente_cnpj": "17165939000109","cliente_inscricao_estadual": "105581305","cliente_rua": "ROD GO 320","cliente_numero": "420","cliente_complemento": "","cliente_cep": "75600000","cliente_bairro": "JARDIM SANTA PAULA","cliente_cidade": "GOIATUBA","cliente_estado": "GO","cliente_suframa": "","contato_nome": "","representada_id": 62723,"representada_nome_fantasia": "MARCHER","representada_razao_social": "MARCHER BRASIL AGROINDUSTRIAL S.A","status_faturamento": "0","status_custom_id": null,"status_b2b": null,"endereco_entrega": {"id": null,"cep": null,"endereco": null,"numero": null,"complemento": null,"bairro": null,"cidade": null,"estado": null},"data_criacao": "2022-04-26 00:03:40","cliente_telefone": ["(064)34954200"],"cliente_email": ["talita_agmaquinas@outlook.com"]}'

		// Tratamento para caso venha objeto com pedido único, transformar em array de 1 posição
		If Left( cJsonTxt, 1 ) == '{' .And. Right( cJsonTxt, 1 ) == '}'
			cJsonTxt := '['+ cJsonTxt +']'
		EndIf

		// Cria o objeto Json
		oJson := JsonObject():New()
		cMsgJson := oJson:FromJson( cJsonTxt )

		// Verifico erro na criação do Json, se tudo certo sigo com a captura dos pedidos
		If !Empty( cMsgJson )
			ConOut( "Erro JSON: "+ cMsgJson )
		Else
			If ValType( oJson ) == 'A' .Or. ( ValType( oJson ) == 'J' .And. Left( cJsonTxt, 1 ) == '[' )

				For nCont := 1 To Len( oJson )

					aCabPv := {} // Array com os campos dos cabeçalhos
					aItens := {} // Array com os campos dos itens

					// Aqui cada Json (oJPedido) é um pedido
					oJPedido := oJson[ nCont ]

					// Adiciono valores ao array do cabeçalho como referência para o execauto
					aAdd( aCabPv, oJPedido["id"] )
					aAdd( aCabPv, oJPedido["numero"] )
					aAdd( aCabPv, oJPedido["cliente_id"] )
					aAdd( aCabPv, oJPedido["condicao_pagamento_id"] )
					aAdd( aCabPv, Iif( oJPedido["observacoes"] <> Nil, oJPedido["observacoes"], "" ) )
					aAdd( aCabPv, Iif( oJPedido["transportadora_nome"] <> Nil .And. Len( oJPedido["transportadora_nome"] ) > 0, Left( oJPedido["transportadora_nome"], 6 ), "" ) )

					// Recuperar os campos extras
					aTemp := oJPedido["extras"]

					// Se for objeto Json coloco em um array para ter um tratamento único
					If ValType( aTemp ) == 'J'
						aTemp := {aTemp}
					EndIf

					// Campo extra da natureza financeira - Pos 7
					If nScnExtra := aScan( aTemp, {|o| o["nome"] == "Natureza Financeira"} ) > 0
						aAdd( aCabPv, AllTrim( aTemp[nScnExtra]["valor"][1][1] ) )
					Else
						aAdd( aCabPv, "" )
					EndIf

					// Campo extra da Tipo de frete - Pos 8
					If nScnExtra := aScan( aTemp, {|o| o["nome"] == "Tipo de frete"} ) > 0
						aAdd( aCabPv, AllTrim( aTemp[nScnExtra]["valor"][1][1] ) )
					Else
						aAdd( aCabPv, "" )
					EndIf

					// Campo extra da Previsão de Embarque - Pos 9
					If nScnExtra := aScan( aTemp, {|o| o["nome"] == "Previsão de Embarque"} ) > 0
						aAdd( aCabPv, AllTrim( aTemp[nScnExtra]["valor"][1][1] ) )
					Else
						aAdd( aCabPv, "" )
					EndIf

					// Campo extra do E-mail para envio de NF e BOL - Pos 10
					If nScnExtra := aScan( aTemp, {|o| o["nome"] == "E-mail envio NF e BOL"} ) > 0
						aAdd( aCabPv, AllTrim( aTemp[nScnExtra]["valor"][1][1] ) )
					Else
						aAdd( aCabPv, "" )
					EndIf

					// Data de emissão do pedido - Pos 11
					aAdd( aCabPv, oJPedido["data_emissao"] )

					// Recuperar os itens do pedido
					aTemp := oJPedido["itens"]

					// Se for objeto Json coloco em um array para ter um tratamento único
					If ValType( aTemp ) == 'J'
						aTemp := {aTemp}
					EndIf

					// Percorre os itens
					For nI := 1 To Len( aTemp )

						aDesc   := {} // Array que conterá os descontos
						aItemPv := {} // Array que conterá os campos dos itens

						// Adiciono valores ao array dos itens como referência para o execauto
						aAdd( aItemPv, aTemp[nI]["id"] )
						aAdd( aItemPv, aTemp[nI]["produto_id"] )
						aAdd( aItemPv, aTemp[nI]["produto_codigo"] )
						aAdd( aItemPv, aTemp[nI]["quantidade"] )
						aAdd( aItemPv, aTemp[nI]["preco_tabela"] )
						aAdd( aItemPv, aTemp[nI]["preco_liquido"] )
						aAdd( aItemPv, aTemp[nI]["ipi"] )
						aAdd( aItemPv, aTemp[nI]["tipo_ipi"] )
						aAdd( aItemPv, aTemp[nI]["subtotal"] )

						// Tratamento para os descontos do vendedor
						aTmpDesc := aTemp[nI]["descontos_do_vendedor"]

						For nX := 1 To Len( aTmpDesc )
							aAdd( aDesc, aTmpDesc[ nX ] )
						Next

						// Tratamento para os descontos de políticas
						aTmpDesc := aTemp[nI]["descontos_de_politicas"]

						For nX := 1 To Len( aTmpDesc )
							aAdd( aDesc, aTmpDesc[ nX ]["desconto"] )
						Next

						// Tratamento para os descontos de políticas
						aTmpDesc := aTemp[nI]["descontos_de_promocoes"]

						For nX := 1 To Len( aTmpDesc )
							aAdd( aDesc, aTmpDesc[ nX ]["desconto"] )
						Next

						aAdd( aItemPv, IIf( aTemp[nI]["observacoes"] <> Nil, aTemp[nI]["observacoes"], "" ) )
						aAdd( aItemPv, aDesc )

						aAdd( aItens, aItemPv )

					Next

					PvIncMer( aCabPv, aItens )

				Next

			EndIf
		Endif

	EndIf


Return

// Efetua a inclusão do pedido de vendas no sistema por execauto
Static Function PvIncMer( aCabPv, aItens )

	Local nX       := 0
	Local nAux     := 0
	Local nQtd     := 0
	Local nPeso    := 0
	Local cPedido  := ""
	Local cCliente := ""
	Local cLojaCli := ""
	Local cCondPag := ""
	Local cAlias   := ""
	Local cQuery   := ""
	Local cLogTxt  := ""
	Local aCabec   := {}
	Local aItemPv  := {}
	Local aItem    := {}
	Local aLogAuto := {}

	//Variáveis de controle do ExecAuto
	Private lMSHelpAuto     := .T.
	Private lAutoErrNoFile  := .T.
	Private lMsErroAuto     := .F.

	// Verifica se o pedido já não existe
	cQuery := "SELECT COUNT(*) TOT FROM "+ RetSqlName("SC5")
	cQuery += " WHERE C5_IDMERCO = '"+ cValToChar( aCabPv[1] ) +"' "
	cQuery += "   AND C5_FILIAL = '"+ xFilial("SC5") +"' "
	cQuery += "   AND D_E_L_E_T_ = ' '"

	TCQuery cQuery New Alias ( cAlias := GetNextAlias() )
	nQtd := (cAlias)->TOT
	(cAlias)->( DbCloseArea() )

	If nQtd > 0
		ConOut("Pedido já existente com ID "+ cValToChar( aCabPv[1] ) )
		Return
	EndIf

	// Verifica se o cliente que veio no pedido está correto
	cQuery := "SELECT A1_COD, A1_LOJA FROM "+ RetSqlName("SA1")
	cQuery += " WHERE A1_IDMERCO = '"+ cValToChar( aCabPv[3] ) +"' "
	cQuery += "   AND A1_FILIAL = '"+ xFilial("SA1") +"' "
	cQuery += "   AND D_E_L_E_T_ = ' '"

	TCQuery cQuery New Alias ( cAlias := GetNextAlias() )

	If !(cAlias)->( EoF() )
		cCliente := (cAlias)->A1_COD
		cLojaCli := (cAlias)->A1_LOJA
		SA1->( dbSetOrder(1) )
		SA1->( dbSeek( xFilial("SA1") + cCliente + cLojaCli ) )
		(cAlias)->( DbCloseArea() )
	Else
		ConOut("Cliente não encontrado com ID "+ cValToChar( aCabPv[3] ) )
		(cAlias)->( DbCloseArea() )
		Return
	EndIf

	// Verifica se a condição de pagamento que veio no pedido está correta
	cQuery := "SELECT E4_CODIGO FROM "+ RetSqlName("SE4")
	cQuery += " WHERE E4_IDMERCO = '"+ cValToChar( aCabPv[4] ) +"' "
	cQuery += "   AND E4_FILIAL = '"+ xFilial("SE4") +"' "
	cQuery += "   AND D_E_L_E_T_ = ' '"

	TCQuery cQuery New Alias ( cAlias := GetNextAlias() )

	If !(cAlias)->( EoF() )
		cCondPag := (cAlias)->E4_CODIGO
		(cAlias)->( DbCloseArea() )
	Else
		ConOut("Condição de pagamento não encontrada com ID "+ cValToChar( aCabPv[4] ) )
		(cAlias)->( DbCloseArea() )
		Return
	EndIf

	cPedido := GetSXENum("SC5","C5_NUM")

	aAdd( aCabec, { "C5_NUM"    , cPedido , NIL } )
	aAdd( aCabec, { "C5_TIPO"   , 'N'     , NIL } )
	aAdd( aCabec, { "C5_CLIENTE", cCliente, NIL } )
	aAdd( aCabec, { "C5_LOJACLI", cLojaCli, NIL } )
	aAdd( aCabec, { "C5_CLIENT" , cCliente, NIL } )
	aAdd( aCabec, { "C5_LOJAENT", cLojaCli, NIL } )
	aAdd( aCabec, { "C5_CONDPAG", cCondPag, NIL } )
	aAdd( aCabec, { "C5_TABELA" , "504"   , NIL } )
	aAdd( aCabec, { "C5_OBSNF"  , aCabPv[5], NIL } )
	aAdd( aCabec, { "C5_EMISSAO", aCabPv[11], NIL } )

	If Len( aCabPv[6] ) > 0 // Transportadora
		aAdd( aCabec, { "C5_TRANSP", aCabPv[6], NIL } )
	EndIf
	If Len( aCabPv[7] ) > 0 // Natureza Financeira
		aAdd( aCabec, { "C5_NATUREZ", aCabPv[7], NIL } )
	Else
		aAdd( aCabec, { "C5_NATUREZ", "1011001", NIL } )
	EndIf
	If Len( aCabPv[8] ) > 0 // Tipo de Frete
		aAdd( aCabec, { "C5_TPFRETE", IIf( aCabPv[8] == "FOB", "F", Iif( aCabPv[8] == "CIF", "C", "S" ) ), NIL } )
	Else
		aAdd( aCabec, { "C5_TPFRETE",  "S", NIL } )
	EndIf
	aAdd( aCabec, { "C5_TIPOCLI", SA1->A1_TIPO , NIL } )
	aAdd( aCabec, { "C5_VEND1"  , SA1->A1_VEND , NIL } )
	aAdd( aCabec, { "C5_VEND2"  , SA1->A1_VEND2, NIL } )
	aAdd( aCabec, { "C5_VOLUME1"  , 1, NIL } )
	aAdd( aCabec, { "C5_ESPECI1"  , "VOLUME", NIL } )
	aAdd( aCabec, { "C5_IDMERCO", aCabPv[1]    , NIL } )

	aItem := {}

	For nX := 1 To Len( aItens )

		aItemPv := {}

		aAdd( aItemPv, {"C6_ITEM"   , StrZero( nX, 2 ), NIL } )
		aAdd( aItemPv, {"C6_PRODUTO", aItens[nX][3]       , NIL } )
		aAdd( aItemPv, {"C6_LOCAL"  , "99"                , Nil } )
		aAdd( aItemPv, {"C6_QTDVEN" , aItens[nX][4]       , NIL } )
		aAdd( aItemPv, {"C6_QTDLIB" , aItens[nX][4]       , NIL } )
		aAdd( aItemPv, {"C6_PRCVEN" , aItens[nX][6]       , NIL } )
		aAdd( aItemPv, {"C6_VALOR"  , Round( aItens[nX][4] * aItens[nX][6], 2 ), NIL } )
		aAdd( aItemPv, {"C6_TES"    , "900", NIL } )
		aAdd( aItemPv, {"C6_ENTREG" , CtoD( "//" ), NIL } )
		aAdd( aItemPv, {"C6_DESCONT", 0, NIL } )

		aAdd( aItem, aItemPv )

		SB1->( dbSetOrder(1) )
		If SB1->( dbSeek( xFilial("SB1") + aItens[nX][3] ) )
			nPeso += Round( aItens[nX][4] * SB1->B1_PESO, 2 )
		Else
			nPeso += 1
		EndIf

	Next

	aAdd( aCabec, { "C5_PESOL"  , nPeso, NIL } )
	aAdd( aCabec, { "C5_PBRUTO" , nPeso, NIL } )

	//Chama a inclusão automática de pedido de venda
	MsExecAuto( { |x, y, z| MATA410( x, y, z ) }, aCabec, aItem, 3 )

	// Verifica se ocorreu erro
	If lMsErroAuto
		//Pegando log do ExecAuto
		aLogAuto := GetAutoGRLog()
		//Percorrendo o Log e incrementando o texto (para usar o CRLF você deve usar a include "Protheus.ch")
		For nAux := 1 To Len(aLogAuto)
			cLogTxt += aLogAuto[nAux] + CHR(13) + CHR(10)
		Next
		ConOut("Erro ao gerar pedido de venda: "+ cLogTxt )
	Else
		ConfirmSX8()
		ConOut("Pedido de venda gerado com sucesso")
	EndIf

Return
