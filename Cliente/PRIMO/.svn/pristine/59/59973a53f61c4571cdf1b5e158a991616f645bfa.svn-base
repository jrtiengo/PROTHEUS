#include 'protheus.ch'
#include 'rwmake.ch'
#INCLUDE 'TBICONN.CH'
#INCLUDE 'TBICODE.CH'
#include 'common.ch'

/*/-----------------------------------------------------------------/
{Protheus.doc} MGetMoed
Programa para Atualizacao do Dolar (ou qualquer outra moeda)
apos as cotacoes do dia (normalmente apos as 15h30)
@type  User Function - Ponto de Entrada
@author Jean Rehermann - Solutio IT (Baseado na versão de Celso Rene de 15/06/16)
@since 07/07/2020
@return Nil
/-----------------------------------------------------------------/*/
User Function MGetMoed()

	Private	cFile,;
		cTexto,;
		nLinhas,;
		j,;
		lAuto := .F.

	If	( ! lAuto )
		LjMsgRun(OemToAnsi('Atualizando Moedas on-line pelo Banco Central'),,{|| u__MoedaExec()} )
	Else
		u__MoedaExec()
	EndIf

Return


/*/-----------------------------------------------------------------/
{Protheus.doc} _JobMoeda
Preparação do JOB
@type  User Function
@author Jean Rehermann - Solutio IT (Baseado na versão de Celso Rene de 15/06/16)
@since 07/07/2020
@return Nil
/-----------------------------------------------------------------/*/
User Function _JobMoeda()

	Local _cEmp			:= ''
	Local _cFilant		:= ''

	Private	cFile,;
		cTexto,;
		nLinhas,;
		j,;
		lAuto := .T.

	OpenSm0()

	While SM0->(!Eof())

		If SM0->M0_CODIGO <> _cEmp .or. SM0->M0_CODFIL <> _cFilant   ////VAI RODAR EM TODAS EMPRESAS E FILIAIS

			RPCSetType( 3 ) //Nao consome licensa de uso
			PREPARE ENVIRONMENT EMPRESA ( SM0->M0_CODIGO ) FILIAL ( SM0->M0_CODFIL )

			u__MoedaExec()

			_cEmp	:= SM0->M0_CODIGO
			_cFilant:= SM0->M0_CODFIL

			RESET ENVIRONMENT

			OpenSM0()

			SM0->( DBSeek( _cEmp + _cFilant ) )

		EndIf

		_cEmp		:= SM0->M0_CODIGO
		_cFilant	:= SM0->M0_CODFIL

		SM0->( dbSkip() )

	EndDo

	RESET ENVIRONMENT

Return()

/*/-----------------------------------------------------------------/
{Protheus.doc} ADMMoedas
Retorna o numero de moedas configuradas no sistema
@type  Static Function
@author Jean Rehermann - Solutio IT (Baseado na versão de Celso Rene de 15/06/16)
@since 07/07/2020
@return __nQtdMoed - Tipo N - Quantidade de moedas
/-----------------------------------------------------------------/*/
Static Function ADMMoedas()

	Local aGetArea	:= {}
	Local aStrut    := {}
	Local __nQtdMoed	:= Nil

	__nQtdMoed	:= 5  // Valor Default de moedas do sistema
	aGetArea	:= GetArea()	// Salva ambiente

	aStrut := FWSX3Util():GetAllFields( "SM2" , .F. ) //não retorna virtuais

	For __nQtdMoed := 5 to 99

		nPos := aScan(aStrut, "M2_MOEDA"+Alltrim(Str(__nQtdMoed)))

		If nPos == 0
			__nQtdMoed-- // Caso não encontre o campo a maior moeda configurada é a anterior
			Exit
		EndIf

	Next __nQtdMoed

	RestArea( aGetArea )

Return __nQtdMoed

/*/-----------------------------------------------------------------/
{Protheus.doc} _MoedaExec
Executa a verificação da moeda via schedule u__MoedaExec
@type  User Function
@author Jean Rehermann - Solutio IT (Baseado na versão de Celso Rene de 15/06/16)
@since 07/07/2020
@return Nil
/-----------------------------------------------------------------/*/
User Function _MoedaExec()

	Local nPass    := 0
	Local j        := 0
	local nM       := 0
	Local lFeriado := .F.
	Local lVolta   := .T.
	Local cFeriado := ""
	Local cFile    := ""
	Local cFileAnt := ""
	Local dDataRef := dDataBase
	Local dDataCsv := dDataBase

	Private nValUfir	:= 0
	Private cEndMoeda	:= ''
	Private cCambio		:= ''
	Private cTexto		:= ''

	// Para controle recursivo de feriados e finais de semana
	cFeriado := cValToChar( Year( dDataBase ) ) +"0101/"
	cFeriado += cValToChar( Year( dDataBase ) ) +"0421/"
	cFeriado += cValToChar( Year( dDataBase ) ) +"0501/"
	cFeriado += cValToChar( Year( dDataBase ) ) +"0907/"
	cFeriado += cValToChar( Year( dDataBase ) ) +"1012/"
	cFeriado += cValToChar( Year( dDataBase ) ) +"1102/"
	cFeriado += cValToChar( Year( dDataBase ) ) +"1115/"
	cFeriado += cValToChar( Year( dDataBase ) ) +"1225/"
	cFeriado += cValToChar( Year( dDataBase ) ) +"1231"

	// Moedas a serem consideradas o Valor de Compra
	cMOEDCOM := Alltrim(SuperGetMV('ES_MOEDCOM',,"2/3"))
	//Parametro Valor UFIR
	nValUfir    := Val(Alltrim(SuperGetMV('ES_VUFIR',,"0")))
	//Parametro controle - Executar rotina de cambio?
	cEndMoeda	:= Alltrim(SuperGetMV('ES_SITESM2',,'https://www4.bcb.gov.br/download/fechamento/'))
	//Por padrão grava o Cambio da moeda
	cCambio	    := Alltrim(SuperGetMV('ES_CAMBIO',,"S"))

	//Refaz dos ultimos 5 dias para o caso de algum dia a conexao ter falhado?
	For nPass := 5 to -1 step -1

		dDataRef := dDataBase - nPass
		dDataCsv := dDataRef // Jean Rehermann - 04/11/2020 - Tratamento para gravar os feriados também
		lVolta   := .T.

		While lVolta

			lFeriado := .F.

			//Feriados Bancario Fixo
			If ( Dtos(dDataCsv) == STR(Year(Date()),4)+'0101' )		//Dia Mundial da Paz
				dDataCsv := dDataCsv - 2
				lFeriado := .T.
			ElseIf	Dtos(dDataCsv) == STR(Year(Date()),4)+'0421'	//Dia de Tradentes
				dDataCsv := dDataCsv - 1
				lFeriado := .T.
			ElseIf	Dtos(dDataCsv) == STR(Year(Date()),4)+'0501'	//Dia do Trabalho
				dDataCsv := dDataCsv - 1
				lFeriado := .T.
			ElseIf	Dtos(dDataCsv) == STR(Year(Date()),4)+'0907'	//Dia da Independencia
				dDataCsv := dDataCsv - 1
				lFeriado := .T.
			ElseIf	Dtos(dDataCsv) == STR(Year(Date()),4)+'1012'	//Dia da N. Sra. Aparecida
				dDataCsv := dDataCsv - 1
				lFeriado := .T.
			ElseIf	Dtos(dDataCsv) == STR(Year(Date()),4)+'1102'	//Dia de Finados
				dDataCsv := dDataCsv - 1
				lFeriado := .T.
			ElseIf	Dtos(dDataCsv) == STR(Year(Date()),4)+'1115'	//Dia da Proclamacao da Republica
				dDataCsv := dDataCsv - 1
				lFeriado := .T.
			ElseIf	Dtos(dDataCsv) == STR(Year(Date()),4)+'1225'	//Natal
				dDataCsv := dDataCsv - 1
				lFeriado := .T.
			ElseIf	Dtos(dDataCsv) == STR(Year(Date()),4)+'1231'	//Dia sem Expediente Bancario
				dDataCsv := dDataCsv - 1
				lFeriado := .T.
			EndIf

			// Jean Rehermann - Solutio IT - 17/08/2020 - Tarefa #27828
			// Deve gravar sempre a cotação do dia anterior com tratamento para gravar
			// a cotação de sexta quando for sábado ou domingo
			// Leva em consideração quando for feriado pois já voltou 1 dia ou 2 quando for 01/01/XXXX
			dDataCsv := ( dDataCsv - Iif( Dow(dDataCsv) == 1, 2, Iif( Dow(dDataCsv) == 7, 1, Iif( Dow(dDataCsv) == 2, 3, Iif( lFeriado, 0, 1 ) ) ) ) )

			lVolta := ( DtoS( dDataCsv ) $ cFeriado )

		End

		cFile := DtoS( dDataCsv ) +'.csv'

		// Jean Rehermann - Solutio IT - 04/11/2020 - Tratamento para não precisar pegar arquivo mais de uma vez
		If cFile != cFileAnt
			cTexto  :=  HttpGet( cEndMoeda + cFile )
			cFileAnt := cFile
		EndIf

		If !(Empty(cTexto)) .and. Substr(cTexto,1,1) <> '<' //verifica se carregou valores e se não retornou um html de erro "<" é instrução de abertura

			nLinhas := MLCount(cTexto, 81)
			aCambio := {}
			X_DATA      := 1
			X_CODNMOEDA := 2
			X_CODMOEDA  := 4
			X_VLRCOMPRA := 5
			X_VLRVENDA  := 6

			For j:=1 to nLinhas
				cLinha := Memoline(cTexto,81,j)
				aAdd(aCambio,StrTokArr2(cLinha,";",.T.)) //Carrega dados em array inclusive com vazios
			Next

			nMoedas := ADMMoedas() // Quantidade de moedas existentes

			For nM:= 1 to nMoedas

				cCodMoeda := SuperGetMv("MV_CODM"+Alltrim(Str(nM)),,'notfound') //Código da moeda no arquivo
				cNMoeda := Alltrim(Str(nM))

				If cCodMoeda == 'notfound'
					loop
				Endif

				nPos := aScan(aCambio,{|x| x[X_CODMOEDA] == cCodMoeda })

				If nPos > 0  // Se localizou a moeda
					If  cNMoeda $ cMOEDCOM
						nVlrAtu  := Val(StrTran(aCambio[nPos][X_VLRCOMPRA],',','.'))
					Else
						nVlrAtu  := Val(StrTran(aCambio[nPos][X_VLRVENDA],',','.'))
					Endif
				ElseIf nPos == 0 .And. nM == 1 //Moeda Forte //REAL - BLR
					nVlrAtu := 1.0000
				ElseIF cCodMoeda == 'UFIR'
					nVlrAtu := nValUfir
				Else //se não encontrou valores  da moeda
					loop
				Endif

				dbSelectArea('SM2')
				SM2->( dbSetOrder(1) )
				dData := dDataRef

				If	SM2->( dbSeek( DtoS( dData ) ) )
					Reclock('SM2',.F.)
				Else
					Reclock('SM2',.T.)
					Replace SM2->M2_DATA With dData
				EndIf

				Replace &('SM2->M2_MOEDA' + cNMoeda) With nVlrAtu
				Replace SM2->M2_INFORM	With 'S'

				SM2->( MsUnlock() )

				If cCambio == 'S' //verifica se gera CTP
					_Cambio(nM,dData,nVlrAtu )
				EndIf

			Next n

		EndIf

	Next

Return

/*/-----------------------------------------------------------------/
{Protheus.doc} _Cambio
Grava os dados na CTP
@type  Static Function
@author Jean Rehermann - Solutio IT (Baseado na versão de Celso Rene de 15/06/16)
@since 07/07/2020
@return Nil
/-----------------------------------------------------------------/*/
Static Function _Cambio(_nMoeda,_dDataG,_nValMoeda)

	Local aGetArea := GetArea()
	Local _cMoeda := STRZERO(_nMoeda,2)

	//Moedas devem estar cadstradas na CTO -- Cadastro de Moedas
	DbSelectArea('CTP')		//Cambio
	CTP->(DbSetorder(1))

	If CTP->(DbSeek(xfilial('CTP')+ Dtos(_dDataG)+ _cMoeda))
		RecLock('CTP',.F.)
	Else
		RecLock('CTP',.T.)
		Replace CTP->CTP_DATA With _dDataG
	EndIf
	Replace CTP->CTP_FILIAL With xFilial('CTP')
	Replace CTP->CTP_MOEDA	With _cMoeda
	Replace CTP->CTP_TAXA   With _nValMoeda
	Replace CTP->CTP_BLOQ   With '2'
	CTP->(MsUnlock())

	RestArea(aGetArea)

Return
