#Include 'TOTVS.ch'
#Include 'Topconn.ch'
#Include 'Protheus.ch'
#Include 'tlpp-core.th'
#Include 'tlpp-rest.th'

#Define cTitApp "Ponto de Entrada MT094END"

/*/{Protheus.doc} MT094END
O ponto de entrada MT094END trás as seguintes informações: Número do Documento, Tipo do Documento, Operação que está sendo executada (Aprovação, Transferência e/ou Superior) e filial do documento com controle de alçadas, para serem usadas conforme necessidade do usuário. O mesmo não possui retorno e tem por finalidade somente mostrar as informações.
Este Ponto de Entrada é executado antes da conclusão do tipo de operação que está em andamento (Liberar o Documento, Transferência do Documento, Transferência para Superior)
1. GAP 014 - Na aprovação de um pedido IP o pedido e enviado ao MV U_INTPCMV
2. GAP 068 - Envio de Aprovações Fluig Compras - Aprovação e Rejeição U_IntAprovFluig
@type function
@version V 1.00
@author Tiengo Junior
@since 24/05/2025
@obs PARAMIXB[1] Caracter Número do Documento
@obs PARAMIXB[2] Caracter Tipo do documento (PC, NF, SA, IP, AE)
@obs PARAMIXB[3] Numérico Operação a ser executada (1-Aprovar, 2-Estornar, 3-Aprovar pelo Superior, 4-Transferir para Superior, 5-Rejeitar, 6-Bloquear)
@obs PARAMIXB[4] Caracter Filial do documento
@klink https://tdn.totvs.com/display/public/PROT/TUMXYE_DT_PONTO_ENTRADA_MT094END
/*/
User Function MT094END()

	Local aArea         := FwGetArea()                  as Array
	Local aAreaSC1      := SC1->(FwGetArea())           as Array
	Local aAreaSC7      := SC7->(FwGetArea())           as Array
	Local cDocto        := PARAMIXB[1]                  as Character
	Local cTpDoc        := PARAMIXB[2]                  as Character
	Local nOpc          := PARAMIXB[3]                  as Numeric
	Local cFilDoc       := PARAMIXB[4]                  as Character
	Local oError        := ErrorClass():New()           as Object

	TRY

		If nOpc == 1 .or. nOpc == 5

			Do Case
			Case cTpDoc == 'PC' .or. cTpDoc == 'IP'
				cIdFluig := SC7->C7_XIDFLU
			Case cTpDoc == 'SC'
				cIdFluig := SC1->C1_XIDFLU
			Case cTpDoc == 'CT' .or. cTpDoc == 'RV'
				cIdFluig := CN9->CN9_XIDFLU
			Case cTpDoc == 'MD'
				cIdFluig := CND->CND_XIDFLU
			EndCase

			If ! Empty(cIdFluig)
				U_IntAprovFluig('SCR', cTpDoc, cDocto, '', '')
			Endif

			If cTpDoc == 'IP' .and. xChkSCR(cDocto, cTpDoc, SCR->(RecNo()), cFilDoc)

				SC1->(DbSetOrder(1)) //C1_FILIAL+C1_NUM+C1_ITEM+C1_ITEMGRD
				If SC1->(MsSeek(FWxFilial('SC1') + SC7->C7_NUMSC))
					If Alltrim(SC1->C1_XORINT) == 'MV'
						//Envia PC ao MV
						If SC7->(MsSeek(FWxFilial("SC7") + cDocto))
							If ! U_INTPCMV(nOpc, @cMsgErr)
								While ! SC7->(EoF()) .and. FWxFilial("SC7") + cDocto == SC7->C7_FILIAL + SC7->C7_NUM
									SC7->(RecLock('SC7',.F.))
									SC7->C7_XSTREQ := '1'
									SC7->C7_XTPREQ := 'I'
									SC7->(MsUnlock())
								EndDo
							Else
								While ! SC7->(EoF()) .and. FWxFilial("SC7") + cDocto == SC7->C7_FILIAL + SC7->C7_NUM
									SC7->(RecLock('SC7',.F.))
									SC7->C7_XSTREQ := '0'
									SC7->C7_XTPREQ := 'I'
									SC7->(MsUnlock())
								EndDo
							Endif
						Endif
					Endif
				Endif
			Endif
		Endif

	CATCH oError

		U_AdminMsg("[MT094END] " + DToC(Date()) + " - " + Time() + " -> " + oError:Description, IsBlind(), oError)

	ENDTRY

	FwRestArea(aAreaSC1)
	FwRestArea(aAreaSC7)
	FwRestArea(aArea)

Return()

/*/{Protheus.doc} xChkSCR
Função que verifica se todos os níveis estão liberados
@type function
@version V 1.00
@author Tiengo
@since 18/08/2025
@param 
cDocto,		c, Numero do Documento 
cTipo, 		c, Tipo do Documento
nRecnoSCR,  n, Recno da SCR
cFilDoc,	c, Filial do documento
@return logical, Verdadeiro se todos liberados
/*/
Static Function xChkSCR(cDocto, cTipo, nRecnoSCR, cFilDoc) as Logical

	Local lRet      := .T.                as Logical
	Local cQuery    := ""                 as Character
	Local cAlias 	:= ""     			  as Character
	Local oError    := ErrorClass():New() as Object

	TRY

		cQuery := "SELECT COUNT(*) AS NREGS										"
		cQuery += "FROM " + RetSQLName("SCR") + " SCR							"
		cQuery += "WHERE 	SCR.CR_FILIAL 	= '" + cFilDoc + "'					"
		cQuery += " 	AND SCR.CR_NUM 		= '" + cDocto + "'					"
		cQuery += " 	AND SCR.CR_TIPO 	= '" + cTipo + "'					"
		cQuery += " 	AND SCR.CR_STATUS NOT IN ('03', '05') 					"
		cQuery += " 	AND SCR.R_E_C_N_O_ <> '" + cValToChar(nRecnoSCR) + "'	"
		cQuery += " 	AND SCR.D_E_L_E_T_ = ' '								"

		cQuery := ChangeQuery(cQuery)
		cAlias := MPSysOpenQuery(cQuery)

		If (cAlias)->NREGS > 0
			lRet := .F.
		EndIf

		(cAlias)->(dbCloseArea())

	CATCH oError

		U_AdminMsg("[xChkSCR] " + DToC(Date()) + " - " + Time() + " -> " + oError:Description, IsBlind(), oError)

	ENDTRY

Return(lRet)
