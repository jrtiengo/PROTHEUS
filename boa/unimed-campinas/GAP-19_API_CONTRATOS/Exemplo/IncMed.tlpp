#Include "TOTVS.ch"
#Include "TopConn.ch"
#Include "TBIConn.ch"
#Include "Protheus.ch"
#Include "tlpp-core.th"
#Include "tlpp-rest.th"

#Define cTitApp "API Medicao Contratos"
#Define Enter Chr(13) + Chr(10)



/*/{Protheus.doc} IncMed
Função de API no método POST de Inclusão da Medição de Contratos
@type function
@version V 1.00
@author Carla Barbosa
@since 27/08/2024
@return logical, Sempre verdadeiro
/*/
@Post("/Unimed/Medicao/IncMed")
User Function IncMed() as Logical

Local oError   := ErrorClass():New() as Object
Local oBody    := Nil                as Json
Local oResult  := Nil                as Json
Local oAux     := Nil                as Json
Local oLog     := Nil                as Object
Local jAuxLog  := Nil                as Json
Local cMsgErr  := ""                 as Character
Local cMsgOk   := ""                 as Character
Local oVldSch  := Nil                as Object
Local cPathSch := ""                 as Character
Local cBody     := ""                                                                              as Character
Local jMedicoes := Nil
Local lRet      := .t.              as Logical
Local cMedicao  := ""                as Character

TRY

    // Define o formato de retorno do Response para o oRest
    oAux := JsonObject():New()
    oAux:FromJson('{"Content-Type":"application/json"}')
    oRest:setHeaderResponse(oAux)
    FreeObj(oAux)
    
    // Coleta dados do Body da RequisiÃ§Ã£o
    oBody := JsonObject():New()
    oBody:FromJson(oRest:GetBodyRequest())

    // Pega CNPJ para preparar o Ambiente 
    If oBody:HasProperty("cnpj")

        // Prepara o Ambiente conforme o CNPJ informado
        cCNPJ := oBody["cnpj"]
        If !U_PrepEnvironment(cCNPJ)

            oRest:SetStatusCode(602)
            oRest:SetResponse(U_AnswerErrorFormat(602, "Erro ao preparar ambiente", "Erro ao preparar o ambiente com o CNPJ informado"))
            Return .T. 

        Else

            cPathSch := SuperGetMV("UB_SCHEMA", .F., "\schemaint")
            oLog := CtrlLOG():New()
            jAuxLog := JsonObject():New()
            If !oLog:SetTab("SZL")

                ConOut(oLog:GetError())
                oRest:SetStatusCode(501)
                oRest:SetResponse(U_AnswerErrorFormat(501, "Erro DEV", oLog:GetError()))
                Return .T. 

            EndIf
            
            // Realiza a validação do JSON enviado com Schema
            If File(cPathSch + "\IncMed.json")

                oVldSch := VldSchJSON():New()
                If oVldSch:SetFileSch(cPathSch + "\IncMed.json", @cMsgErr)

                    If !oVldSch:ValidJSON(oBody, @cMsgErr)

                        oRest:SetStatusCode(502)
                        oRest:SetResponse(U_AnswerErrorFormat(502, "Validacao de Schema", cMsgErr))
                        Return .T.

                    EndIf

                Else 

                    oRest:SetStatusCode(502)
                    oRest:SetResponse(U_AnswerErrorFormat(502, "Validacao de Schema", cMsgErr))
                    Return .T.

                EndIf

            EndIf

            // Inicia o processo 
            oAux := JsonObject():New()
            If oBody:HasProperty("medicoes")
                cbody:=obody:toJson()
                xGeraCND(@cMedicao, oBody, cbody, jMedicoes,@lRet)
                if !lRet
                    oRest:SetStatusCode(606)
                    oRest:SetResponse(U_AnswerErrorFormat(606, "Algumas Medicoes com erro na Inclusao", IIf(!Empty(cMsgOk), "Medicoes Incluidas"+ Enter + cMsgOk + Enter + "Medicoes nao Incluidas" + Enter + cMsgErr, "Medicoes nao Incluidas" + Enter + cMsgErr)))
                Else
                    oRest:SetStatusCode(201)
                    oRest:SetResponse(U_AnswerErrorFormat(201, "Medicoes Incluidas", cMsgOk))
                Endif
                oAux := oBody["medicoes"]

            Else

                oRest:SetStatusCode(602)
                oRest:SetResponse(U_AnswerErrorFormat(602, "Faltando chave Medicoes", "Nao foi informada a chave Medicoes"))

                FreeObj(jAuxLog)
                jAuxLog := JsonObject():New()

                jAuxLog["status"]  := "0"
                jAuxLog["idinteg"] := ""
                jAuxLog["nomapi"]  := "POST_INCMED"
                jAuxLog["rotina"]  := "CNTA121"
                jAuxLog["tabela"]  := "CND"
                jAuxLog["recno"]   := 0
                jAuxLog["data"]    := DToS(dDataBase)
                jAuxLog["hora"]    := Time()
                jAuxLog["msgresp"] := "error"
                jAuxLog["msgerr"]  := "Faltando chave Medicoes"
                jAuxLog["jsonbod"] := oBody:ToJSON()
                jAuxLog["jsonret"] := '{"result": "Nao foi informada a chave Medicoes"}'

            EndIf

        EndIf

    Else 

        oRest:SetStatusCode(601)
        oRest:SetResponse(U_AnswerErrorFormat(601, "Faltando chave cnpj", "Nao foi informada a chave cnpj"))

        FreeObj(jAuxLog)
        jAuxLog := JsonObject():New()

        jAuxLog["status"]  := "0"
        jAuxLog["idinteg"] := ""
        jAuxLog["nomapi"]  := "POST_INCMED"
        jAuxLog["rotina"]  := "CNTA121"
        jAuxLog["tabela"]  := "CND"
        jAuxLog["recno"]   := 0
        jAuxLog["data"]    := DToS(dDataBase)
        jAuxLog["hora"]    := Time()
        jAuxLog["msgresp"] := "error"
        jAuxLog["msgerr"]  := "Faltando chave cnpj"
        jAuxLog["jsonbod"] := oBody:ToJSON()
        jAuxLog["jsonret"] := '{"result": "Nao foi informada a chave cnpj"}'

    EndIf

    If jAuxLog:HasProperty("status")

        If !oLog:AddItem(jAuxLog)

            ConOut(oLog:GetError())

        EndIf

    EndIf

CATCH oError

    oRest:SetStatusCode(501)
    oRest:SetResponse(U_AnswerErrorFormat(501, "Erro DEV", oError:Description))
    FreeObj(oBody)
    FreeObj(oResult)

ENDTRY

Return .T. 


/*/{Protheus.doc} xGeraCND
Função para Geração do Execauto da Mediçao via MVC 
@type function
@author Carla Barbosa
@since 23/08/2024
/*/
Static Function xGeraCND(cMedicao, jbody, cbody, jMedicoes, lRet)

Local aArea     := GetArea()            as Array
Local oModel    := Nil                  as Object
Local cContrato := ""                   as Character
Local cNumMed   := ""                   as Character
Local cCompet   := ""                   as Character
Local cRevisao  := ""                   as Character
Local cGrAprov  := ""                   as Character
Local cConta    := ""                   as Character
Local cCCusto   := ""                   as Character
Local cItemC    := ""                   as Character
Local cClasseV  :=  ""                  as Character
Local cTes      :=  ""                  as Character
Local aMsgDeErro:= {}                   as Array
Local nc        := 1                    as numeric
Local nj        := 1                    as numeric
Local nK        := 1                    as numeric
Local jAuxLog   := Nil                  as Json
Local oLog      := Nil                  as Object
Local cLogErro := ""
Local nTotErro := 0

TRY 
    oLog := CtrlLOG():New()
    jAuxLog := JsonObject():New()
    If !oLog:SetTab("SZL")

         U_AdminMsg("[xExecFINA050] " + DToC(dDataBase) + " - " + Time() + " -> " + oLog:GetError(), IsBlind())

     EndIf 

    jMedicoes := jBody:GetJsonObject("medicoes")
    nTotal := Len(jMedicoes)
    ProcRegua(nTotal)
    For nc:= 1 to Len(jMedicoes)
        xIDInteg  := jmedicoes[nc]['idint']  
        cContrato := jmedicoes[nc]['CND_CONTRA']        
        cCompet   := jmedicoes[nc]['CND_COMPET']
        cRevisao  := ""
        CN9->(DbSetOrder(1))
        If CN9->(DbSeek(xFilial("CN9") + cContrato))//Posicionar na CN9 para realizar a inclusão
            while CN9->CN9_FILIAL == xFILIAL("CN9") .AND. CN9->CN9_NUMERO == cContrato
                if CN9->CN9_SITUAC <> '05' /// VIGENTE
                    CN9->(dbskip()) 
                Else
                    cRevisao := CN9->CN9_REVISA
                    exit
                Endif           
            Enddo
            if !empty(alltrim(cRevisao))
            
                // Buscando a Competencia do Contrato
                aCompets := CtrCompets()
                nCompet  := cValtoChar(aScan(aCompets, {|x| AllTrim(x) == cCompet }) ) 
                lSemifixo := IF(Posicione("CN1",1,xFILIAL("CN1")+CN9->CN9_TPCTO,"CN1_CTRFIX")=="3",.T.,.F.)
                lEventual := IF(Posicione("CN1",1,xFILIAL("CN1")+CN9->CN9_TPCTO,"CN1_CTRFIX")=="2",.T.,.F.)
                lFixo     := IF(Posicione("CN1",1,xFILIAL("CN1")+CN9->CN9_TPCTO,"CN1_CTRFIX")=="1",.T.,.F.)
                cRevisao  := CN9->CN9_REVISA
                cGrAprov  := CN9->CN9_GRPAPR
                oModel := FWLoadModel("CNTA121") 
                oModel:SetOperation(3)
                If (oModel:CanActivate())           
                    oModel:Activate()
                    oModel:SetValue("CNDMASTER","CND_CONTRA"    ,CN9->CN9_NUMERO)
                    oModel:SetValue("CNDMASTER","CND_APROV"     ,cGrAprov)
                    oModel:SetValue("CNDMASTER","CND_RCCOMP"    ,nCompet)//Selecionar competência   
                    oModel:SetValue("CNDMASTER","CND_XIDINT"    ,xIDInteg)//Selecionar competência               
                    oModel:SetValue("CXNDETAIL","CXN_CHECK" , .T.)//Marcar a planilha(nesse caso apenas uma)      

                    for nj := 1 to len(jmedicoes[nc]['itens'])   
                        cProduto := jmedicoes[nc]['itens'][nj]['CNE_PRODUT'] 
                        cQuant   := (jmedicoes[nc]['itens'][nj]['CNE_QUANT']) 
                        cVlUni   := (jmedicoes[nc]['itens'][nj]['CNE_VLUNIT']) 
                        if jmedicoes[nc]['itens'][nj]:HasProperty('pedido')
                            cPedido  := jmedicoes[nc]['itens'][nj]['pedido'] 
                        Else 
                            cPedido  := ""
                        Endif
                        cNumPlan := oMODEL:GETVALUE("CNEDETAIL","CNE_NUMERO")
                        If jmedicoes[nc]['itens'][nj]:HasProperty('CNE_TS')
                            cTes     := (jmedicoes[nc]['itens'][nj]['CNE_TS']) 
                        Else
                            cTes     := Posicione("CNB",7,xFILIAL("CNB")+cCONTRATO+cRevisao+cNumPlan+cProduto,"CNB_TS")
                        Endif
                        If jmedicoes[nc]['itens'][nj]:HasProperty('CNE_CC')
                            cCCusto      := (jmedicoes[nc]['itens'][nj]['CNE_CC']) 
                        Else
                            cCCusto  := Posicione("CNB",7,xFILIAL("CNB")+cCONTRATO+cRevisao+cNumPlan+cProduto,"CNB_CC")
                        Endif
                        cConta   := Posicione("CNB",7,xFILIAL("CNB")+cCONTRATO+cRevisao+cNumPlan+cProduto,"CNB_CONTA")         
                        cItemC   := Posicione("CNB",7,xFILIAL("CNB")+cCONTRATO+cRevisao+cNumPlan+cProduto,"CNB_ITEMCT")
                        cClasseV := Posicione("CNB",7,xFILIAL("CNB")+cCONTRATO+cRevisao+cNumPlan+cProduto,"CNB_CLVL")
                        cTabPr   := Posicione("CNB",7,xFILIAL("CNB")+cCONTRATO+cRevisao+cNumPlan+cProduto,"CNB_XTABP")
                        cMensagem:= ""
                        xRet     := .t.
                        nVlList  := PrecoTab(cProduto,cQuant,cTabPr,@cMensagem,@xRet)
                        if nVlList >0 
                            cVlUni := nVlList
                        Endif
                        if lEventual                   
                            oModel:GetModel('CNEDETAIL'):GoLine(nj)
                            oModel:GetModel('CNEDETAIL'):LoadValue('CNE_ITEM', PadL(cValtoChar(nj), CNE->(Len(CNE_ITEM)), "0"))//Adiciona um item a planilha           
                            oModel:SetValue( 'CNEDETAIL' , 'CNE_PRODUT' , cProduto)
                            oModel:SetValue( 'CNEDETAIL' , 'CNE_QUANT'  , cQuant)
                            oModel:SetValue( 'CNEDETAIL' , 'CNE_VLUNIT' , cVlUni )
                            oModel:SetValue( 'CNEDETAIL' , 'CNE_TS'     , cTes)
                            oModel:SetValue( 'CNEDETAIL' , 'CNE_CONTA'  , cConta)
                            oModel:SetValue( 'CNEDETAIL' , 'CNE_CC'     , cCCusto)
                            oModel:SetValue( 'CNEDETAIL' , 'CNE_ITEMCT' , cItemC)
                            oModel:SetValue( 'CNEDETAIL' , 'CNE_CLVL'   , cClasseV)
                            oModel:SetValue( 'CNEDETAIL' , 'CNE_XNUMPE', cPedido)
                        Else
                            oModel:GetModel('CNEDETAIL'):GoLine(nj)
                            oModel:GetModel('CNEDETAIL'):LoadValue('CNE_ITEM', PadL(cValtoChar(nj), CNE->(Len(CNE_ITEM)), "0"))//Adiciona um item a planilha           
                            oModel:SetValue( 'CNEDETAIL' , 'CNE_PRODUT' , cProduto)
                            oModel:SetValue( 'CNEDETAIL' , 'CNE_QUANT'  , cQuant)
                            if nVlList>0
                                oModel:SetValue( 'CNEDETAIL' , 'CNE_VLUNIT' , nVlList )
                            Endif
                            oModel:SetValue( 'CNEDETAIL' , 'CNE_TS'     , cTes)
                            oModel:SetValue( 'CNEDETAIL' , 'CNE_CONTA'  , cConta)
                            oModel:SetValue( 'CNEDETAIL' , 'CNE_CC'     , cCCusto)
                            oModel:SetValue( 'CNEDETAIL' , 'CNE_ITEMCT' , cItemC)
                            oModel:SetValue( 'CNEDETAIL' , 'CNE_CLVL'   , cClasseV)
                            oModel:SetValue( 'CNEDETAIL' , 'CNE_XNUMPE', cPedido)
                        Endif
                        If valtype(jmedicoes[nc]['itens'][nj]['multabonif']) <> 'U'
                            for nk := 1 to len(jmedicoes[nc]['itens'][nj]['multabonif'])

                                if nk == 1
                                    oModel:GetModel('CNRDETAIL2'):GoLine(nk)
                                Else
                                    oModel:GetModel('CNRDETAIL2'):AddLine()  
                                Endif
                                cTIPO := jmedicoes[nc]['itens'][nj]['multabonif'][nk]['CNR_TIPO'] 
                                cDESCR:= jmedicoes[nc]['itens'][nj]['multabonif'][nk]['CNR_DESCRI']
                                cVALOR:= jmedicoes[nc]['itens'][nj]['multabonif'][nk]['CNR_VALOR']
                                oModel:SetValue("CNRDETAIL2","CNR_TIPO"     , cTIPO)//1=Multa/2=Bonificação
                                oModel:SetValue("CNRDETAIL2","CNR_DESCRI"   , cDESCR)
                                oModel:SetValue("CNRDETAIL2","CNR_VALOR"    , cVALOR)            
                            next nk
                        endif
                    next
                    If (oModel:VldData()) /*Valida o modelo como um todo*/
                        oModel:CommitData()
                    EndIf
                    FreeObj(jAuxLog)
                    jAuxLog     := JsonObject():New()
                    If(oModel:HasErrorMessage())
                        aMsgDeErro := oModel:GetErrorMessage()
                        cMsgErro   := aMsgDeErro[6]
                        cLogErro   += "Contrato Nr  "+ cCONTRATO + " Medição Nao Gerada! Erro: " + cMsgErro + CRLF
                        nTotErro++
                        lRet := .f.

                        jAuxLog["status"]  := "0"
                        jAuxLog["idinteg"] := ""
                        jAuxLog["nomapi"]  := "POST_INCMED"  
                        jAuxLog["rotina"]  := "CNTA121"
                        jAuxLog["tabela"]  := "CND"
                        jAuxLog["recno"]   := 0
                        jAuxLog["data"]    := DToS(dDataBase)
                        jAuxLog["hora"]    := Time()
                        jAuxLog["msgresp"] := "error"
                        jAuxLog["msgerr"]  := cLogErro
                        jAuxLog["jsonbod"] := oRest:GetBodyRequest()
                        jAuxLog["jsonret"] := '{"result": "' + cLogErro + '"}'

                        If !oLog:AddItem(jAuxLog)

                            ConOut(oLog:GetError())

                        EndIf
                    Else
                        cNumMed := CND->CND_NUMMED          
                        oModel:DeActivate()        
                        lRet := CN121Encerr(.T.) //Realiza o encerramento da medição 
                        IF lRet .and. !Empty(Alltrim(cPedido)) // Gerou o pedido .. vou alimentar o pedido
                            SC5->(dbsetorder(10))
                            SC5->(dbgotop())
                            if SC5->(dbseek(xFilial('SC5')+cContrato+cNumMed+cNumPlan))
                                SC6->(dbsetorder(1))
                                SC6->(dbgotop())
                                if SC6->(dbseek(xFilial('SC6')+SC5->C5_NUM))
                                    while SC6->(!EOF()) .AND. SC6->C6_FILIAL == SC5->C5_FILIAL .AND. SC6->C6_NUM == SC5->C5_NUM
                                        Reclock("SC6",.F.)
                                        SC6->C6_PEDCLI := cPedido
                                        SC6->(MsUnlock())
                                        SC6->(dbskip())
                                    Enddo
                                Endif
                            Endif
                            FreeObj(jAuxLog)
                            jAuxLog     := JsonObject():New()
                            jAuxLog["status"]  := "1"
                            jAuxLog["idinteg"] := xIDInteg
                            jAuxLog["nomapi"]  := "POST_INCMED"  
                            jAuxLog["rotina"]  := "CNTA121"
                            jAuxLog["tabela"]  := "CND"
                            jAuxLog["recno"]   := CND->(RecNo())
                            jAuxLog["data"]    := DToS(dDataBase)
                            jAuxLog["hora"]    := Time()
                            jAuxLog["msgresp"] := "success"
                            jAuxLog["msgerr"]  := ""
                            jAuxLog["jsonbod"] := oRest:GetBodyRequest()
                            jAuxLog["jsonret"] := '{"result": Medicao incluida com sucesso!!"}'

                            If !oLog:AddItem(jAuxLog)

                                ConOut(oLog:GetError())

                            EndIf
                        
                        Else
                            FreeObj(jAuxLog)
                            jAuxLog     := JsonObject():New()
                            jAuxLog["status"]  := "0"
                            jAuxLog["idinteg"] := xIDInteg
                            jAuxLog["nomapi"]  := "POST_INCMED"  
                            jAuxLog["rotina"]  := "CNTA121"
                            jAuxLog["tabela"]  := "CND"
                            jAuxLog["recno"]   := CND->(RecNo())
                            jAuxLog["data"]    := DToS(dDataBase)
                            jAuxLog["hora"]    := Time()
                            jAuxLog["msgresp"] := "success"
                            jAuxLog["msgerr"]  := ""
                            jAuxLog["jsonbod"] := oRest:GetBodyRequest()
                            jAuxLog["jsonret"] := '{"result": Medicao NAo Encerrada!!"}'
                    
                        Endif                  
                    EndIf
                Endif
            Endif
        Endif
    next

CATCH oError

    Aviso(cTitApp, "Erro DEV" + Enter + oError:Description, {"Ok"}, 3, "",,, .T.)
    lRet := .f.
ENDTRY
RestArea(aArea)
Return lRet

Static Function PrecoTab(cProduto, nQtde, cTabela, cMensagem,xRet)
Local aArea := GetArea()
Local NPRECOTABELA := 0

SZ0->(DBSETORDER( 1) )
if SZ0->(dbseek(xFilial("SZ0")+cTabela))
    if SZ0->Z0_ATIVO <> '1'
        cMensagem+= "Tabela de Preço não está ativa. Por favor verifique o Contrato"  + CRLF
        xRet:= .f.
    Endif
    if !(dDatabase >= SZ0->Z0_DATDE .and. (SZ0->Z0_DATATE >= dDATABASE .OR. Empty(Alltrim(Dtos(SZ0->Z0_DATATE)))))
        cMensagem+= "Tabela de Preço fora do período de vigencia. Por favor verifique o Contrato"  + CRLF
        xRet:= .f.
    Endif 
    SZ1->(dbsetorder(1))
    if SZ1->(dbseek(xFilial("SZ1")+SZ0->Z0_CODTAB+cProduto))
        lProd := .f.
        While SZ1->Z1_FILIAL == SZ0->Z0_FILIAL .AND. SZ1->Z1_CODTAB == SZ0->Z0_CODTAB .AND. SZ1->Z1_CODPRO == cProduto
            if SZ1->Z1_ATIVO == "1"
                if nQtde >= SZ1->Z1_QTDDE .and. nQtde <= SZ1->Z1_QTDATE
                    nPrecoTabela := SZ1->Z1_PRCVEN
                    lProd := .t.
                    Exit
                Endif
            Endif 
            SZ1->(dbskip())
        Enddo 
        if  !lProd
            cMensagem+= "Produto não pertence a tabela de preço vinculada ao contrato. Por favor verifique o Contrato"  + CRLF
            xRet:= .f.
        Endif
    Else
        cMensagem+= "Produto não pertence a tabela de preço vinculada ao contrato. Por favor verifique o Contrato"  + CRLF
        xRet:= .f.
    Endif
Else
    cMensagem+= "Tabela de Preço nao Encontrada. Por favor verifique o Contrato." + CRLF
    xRet:= .f.
Endif
RestArea(aArea)
Return nPrecoTabela
