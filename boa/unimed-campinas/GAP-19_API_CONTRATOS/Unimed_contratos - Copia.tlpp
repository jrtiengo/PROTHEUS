#Include "TOTVS.ch"
#Include "FWmvcdef.CH"
#Include "tlpp-core.th"
#Include "tlpp-rest.th"

#Define cTitApp "API Contratos"
#Define Enter Chr(13) + Chr(10)

/*/{Protheus.doc} inclui_contratos
API para Inclusão de Contratos
@version V 1.00
@author Tiengo
@since 11/04/2025
/*/
//-- http://localhost:8082/rest

@post(endpoint="/UnimedCampinas/Contratos/IncContrato", description='Servico rest de inclusao contratos - metodo post')

User Function inclui_contratos() as logical

	Local oError   		:= ErrorClass():New()   as Object
	Local oLog     		:= Nil                  as Object
	Local oVldSch  		:= Nil                	as Object
	Local oBody    		:= Nil                  as Json
	Local oAux     		:= Nil                  as Json
	Local oResult 		:= Nil                  as Json
	Local jAuxLog  		:= Nil                  as Json
	Local cMsgErr  		:= ""                   as Character
	Local cMsgOk   		:= ""                   as Character
	Local cPathSch 		:= ""                   as Character
	Local jContrato		:= Nil                  as Json
	Local lRet     		:= .T.                  as Logical
	Local cContrato		:= ""                   as Character
	Local cCNPJ			:= ""                   as Character

	Try
		// Define o formato de retorno do Response para o oRest
		oAux := JsonObject():New()
		oAux:FromJson('{"Content-Type":"application/json"}')
		oRest:setHeaderResponse(oAux)
		FreeObj(oAux)

		// Coleta dados do Body da Requisicao
		oBody := JsonObject():New()
		oBody:FromJson(oRest:GetBodyRequest())

		//Chama função para preparar o ambiente pelo CNPJ
		If oBody:HasProperty("cnpj")

			cCNPJ := oBody["cnpj"]
			If ! U_PrepEnvironment(cCNPJ) //! fValidEmp(cCNPJ)

				oRest:SetStatusCode(602)
				oRest:SetResponse(U_AnswerErrorFormat(602, "Erro ao preparar ambiente", "Erro ao preparar o ambiente com o CNPJ informado"))
				Return(.T.)
			Else

				cPathSch := SuperGetMV("UB_SCHEMA", .F., "\schemaint")
				oLog := CtrlLOG():New()
				jAuxLog := JsonObject():New()

				If ! oLog:SetTab("SZL")

					ConOut(oLog:GetError())
					oRest:SetStatusCode(501)
					oRest:SetResponse(U_AnswerErrorFormat(501, "Erro DEV", oLog:GetError()))
					Return(.T.)
				EndIf

				// Realiza a Validacao do JSON enviado com Schema
				If File(cPathSch + "\IncContr.json")

					oVldSch := VldSchJSON():New()
					If oVldSch:SetFileSch(cPathSch + "\IncContr.json", @cMsgErr)

						If ! oVldSch:ValidJSON(oBody, @cMsgErr)

							oRest:SetStatusCode(502)
							oRest:SetResponse(U_AnswerErrorFormat(502, "Validacao de Schema", cMsgErr))
							Return (.T.)
						EndIf

					Else
						oRest:SetStatusCode(502)
						oRest:SetResponse(U_AnswerErrorFormat(502, "Validacao de Schema", cMsgErr))
						Return (.T.)
					EndIf
				EndIf

				// Inicia o processo
				oAux := JsonObject():New()
				If oBody:HasProperty("contrato")

					//cbody := obody:toJson()

					fGeraContrato(@cContrato, oBody, jContrato,@lRet)

					if ! lRet
						oRest:SetStatusCode(606)
						oRest:SetResponse(U_AnswerErrorFormat(606, "Alguns Contratos com erro na Inclusao", ;
							IIf(!Empty(cMsgOk), "Contratos Incluidos"+ Enter + cMsgOk + Enter + "Contratos nao Incluidas" + Enter + cMsgErr, "Contratos nao Incluidas" + Enter + cMsgErr)))
					Else
						oRest:SetStatusCode(201)
						oRest:SetResponse(U_AnswerErrorFormat(201, "Contratos Incluidos com sucesso!", cMsgOk))
					Endif
				Endif
			Endif
		EndIf

	Catch oError

		oRest:SetStatusCode(501)
		oRest:SetResponse(U_AnswerErrorFormat(501, "Erro DEV", oError:Description))
		FreeObj(oBody)
		FreeObj(oResult)
	EndTry

Return(.T.)

//Gravar o contrato
Static Function fGeraContrato(cContrato, jbody, jContrato, lRet)

	Local aArea             := FWGetArea()          as Array
	Local oModel            := Nil                  as Object
	Local cContrAux         := ""                   as Character
	Local aMsgDeErro        := {}                   as Array
	Local jAuxLog           := Nil                  as Json
	Local oLog              := Nil                  as Object
	Local cLogErro          := ""                   as Character
	Local nTotErro          := 0                    as Numeric
	Local nRegDet           := 0                    as Numeric
	Local nZ				:= 0                    as Numeric
	Local nX				:= 0                    as Numeric
	Local nY				:= 0                    as Numeric
	Local cCodFor 			:= ""                   as Character
	Local cCodLoj   		:= ""                   as Character
	Local cTpContr         	:= ""                   as Character

	Try
		oLog := CtrlLOG():New()
		jAuxLog := JsonObject():New()
		If ! oLog:SetTab("SZL")

			U_AdminMsg("[CNTA300] " + DToC(dDataBase) + " - " + Time() + " -> " + oLog:GetError(), IsBlind())

		EndIf

		cContrato   := Alltrim(jBody:GetJsonObject("contrato"))
		cIDInteg    := Alltrim(jBody:GetJsonObject("idint"))
		cCodFor     := Alltrim(jBody:GetJsonObject("CNC_CODIGO"))
		cCodLoj     := Alltrim(jBody:GetJsonObject("CNC_LOJA"))
		cTpContr 	:= Alltrim(jBody:GetJsonObject("CN9_TPCTO"))

		If ! Empty(cContrato) .and. ! Empty(cIDInteg)

			oModel := FWLoadModel("CNTA300") //Carrega o modelo
			oModel:SetOperation(MODEL_OPERATION_INSERT) // Seta operaÃ§Ã£o de inclusÃ£o
			oModel:Activate() // Ativa o Modelo

			/*
			//Busca na SA2 o campo A2_ZTOCONT 1=Credenciado(semi-fixo);2=Administrativo(fixo/nÃ£o-fixo)
			DbSelectArea("SA2")
			DbSetOrder(1) //

			If SA2->(MSSeek(xFilial('SA2')+cCodFor+cCodLoj))

				cTpContrato     :=  SA2->A2_ZTOCONT

			Endif
			*/

			//Cabecalho do contrato
			oModel:SetValue(    'CN9MASTER'    ,'CN9_NUMERO'        ,cContrato)
			oModel:SetValue(    'CN9MASTER'    ,'CN9_XFLUI'         ,cIDInteg)
			oModel:SetValue(    'CN9MASTER'    ,'CN9_TPCTO'         ,cTpContr)
			oModel:SetValue(    'CN9MASTER'    ,'CN9_DTINIC'        ,CTOD(jBody:GetJsonObject("CN9_DTINC")))
			oModel:SetValue(    'CN9MASTER'    ,'CN9_XDTORI'        ,CTOD(jBody:GetJsonObject("CN9_XDTORI")))
			oModel:SetValue(    'CN9MASTER'    ,'CN9_XCLICO'        ,jBody:GetJsonObject("CN9_XCLICO"))
			oModel:SetValue(    'CN9MASTER'    ,'CN9_XLOJCO'        ,jBody:GetJsonObject("CN9_XLOJCO"))
			oModel:SetValue(    'CN9MASTER'    ,'CN9_UNVIGE'        ,jBody:GetJsonObject("CN9_UNVIGE"))
			oModel:SetValue(    'CN9MASTER'    ,'CN9_VIGE'          ,jBody:GetJsonObject("CN9_VIGE"))
			oModel:SetValue(    'CN9MASTER'    ,'CN9_MOEDA'         ,jBody:GetJsonObject("CN9_MOEDA"))
			oModel:SetValue(    'CN9MASTER'    ,'CN9_CONDPG'        ,jBody:GetJsonObject("CN9_CONDPG"))
			oModel:SetValue(    'CN9MASTER'    ,'CN9_FLGREJ'        ,jBody:GetJsonObject("CN9_FLGREJ"))
			oModel:SetValue(    'CN9MASTER'    ,'CN9_INDICE'        ,jBody:GetJsonObject("CN9_INDICE"))
			oModel:SetValue(    'CN9MASTER'    ,'CN9_FLGCAU'        ,jBody:GetJsonObject("CN9_FLGCAU"))
			oModel:SetValue(    'CN9MASTER'    ,'CN9_OBJCTO'        ,jBody:GetJsonObject("CN9_OBJCTO"))
			oModel:SetValue(    'CN9MASTER'    ,'CN9_ALTCLA'        ,jBody:GetJsonObject("CN9_ALTCLA"))
			oModel:SetValue(    'CN9MASTER'    ,'CN9_VLDCTR'        ,jBody:GetJsonObject("CN9_VLDCTR"))
			oModel:SetValue(    'CN9MASTER'    ,'CN9_APROV'         ,jBody:GetJsonObject("CN9_APROV"))
			oModel:SetValue(    'CN9MASTER'    ,'CN9_GRPAPR'        ,jBody:GetJsonObject("CN9_GRPAPR"))
			oModel:SetValue(    'CN9MASTER'    ,'CN9_NATURE'        ,jBody:GetJsonObject("CN9_NATURE"))
			oModel:SetValue(    'CN9MASTER'    ,'CN9_DEPART'        ,jBody:GetJsonObject("CN9_DEPART"))
			oModel:SetValue(    'CN9MASTER'    ,'CN9_PERI'          ,jBody:GetJsonObject("CN9_PERI"))
			oModel:SetValue(    'CN9MASTER'    ,'CN9_UNPERI'        ,jBody:GetJsonObject("CN9_UNPERI"))
			oModel:SetValue(    'CN9MASTER'    ,'CN9_MODORJ'        ,jBody:GetJsonObject("CN9_MODORJ"))
			oModel:SetValue(    'CN9MASTER'    ,'CN9_PRORAT'        ,jBody:GetJsonObject("CN9_PRORAT"))
			//oModel:SetValue( 'CN9MASTER'    ,'FILIAL'           ,jBody:GetJsonObject("FILIAL"))

			//Cliente/Fornecedor do Contrato
			oModel:SetValue(    'CNCDETAIL'    ,'CNC_CODIGO'        ,cCodFor)
			oModel:SetValue(    'CNCDETAIL'    ,'CNC_LOJA'          ,cCodLoj)

			//Planilhas do Contrato
			oModel:LoadValue(   'CNADETAIL'     ,'CNA_CONTRA'       ,cContrato)
			oModel:SetValue(    'CNADETAIL'     ,'CNA_NUMERO'       ,'000001')
			oModel:SetValue(    'CNADETAIL'     ,'CNA_FORNEC'       ,cCodFor)
			oModel:SetValue(    'CNADETAIL'     ,'CNA_LJFORN'       ,cCodLoj)
			oModel:SetValue(    'CNADETAIL'     ,'CNA_TIPPLA'       ,jBody:GetJsonObject("CNA_TIPPLA"))
			oModel:SetValue(    'CNADETAIL'     ,'CNA_VLTOT'        ,jBody:GetJsonObject("CNA_VLTOT"))

			//Usuario ou grupos de acessos
			If Valtype(jBody:GetJsonObject("Acessos")) == 'A'

				For nZ := 1 to Len(jBody["Acessos"])

					oModel:LoadValue(   'CNNDETAIL'     ,'CNN_CONTRA'       ,cContrato)
					oModel:LoadValue(   'CNNDETAIL'     ,'CNN_USRCOD'       ,jBody["Acessos"][nZ]["CNN_USRCOD"])
					oModel:SetValue(    'CNNDETAIL'     ,'CNN_GRPCOD'       ,jBody["Acessos"][nZ]["CNN_GRPCOD"])
					oModel:SetValue(    'CNNDETAIL'     ,'CNN_TRACOD'       ,jBody["Acessos"][nZ]["CNN_TRACOD"])

				Next nZ
			Endif

			//Filiais de autorizacao
			If Valtype(jBody:GetJsonObject("Filiais")) == 'A'

				For nY := 1 to Len(jBody["Filiais"])

					oModel:LoadValue(   'CPDDETAIL'     ,'CPD_CONTRA'       ,cContrato)
					oModel:SetValue(    'CPDDETAIL'     ,'CPD_NUMPLA'       ,cCodPla)
					oModel:SetValue(    'CPDDETAIL'     ,'CPD_FILAUT'       ,jBody["Filiais"][nY])

				Next nY
			Endif

			//Itens da Planilha do Contrato
			If cTpContr <> '003' //Contrato Não fixo (Flexivel) não gera Itens

				If Valtype(jBody:GetJsonObject("itens")) == 'A'

					// Passa por todos os registros
					For nRegDet := 1 to Len(jBody["itens"])

						oModel:SetValue(    'CNBDETAIL'    , 'CNB_ITEM'         ,PadL(cValtoChar(nRegDet), CNB->(Len(CNB_ITEM)), "0"))
						oModel:SetValue(    'CNBDETAIL'     ,'CNB_PRODUT'       ,jBody["itens"][nRegDet]["CNB_PRODUT"])
						If cTpContr <> '002' //Contrato SEMI-FIXO, não preenche quantidade
							oModel:SetValue(    'CNBDETAIL'     ,'CNB_QUANT'        ,jBody["itens"][nRegDet]["CNB_QUANT"])
						Endif
						oModel:SetValue(    'CNBDETAIL'     ,'CNB_VLUNIT'       ,jBody["itens"][nRegDet]["CNB_VLUNIT"])
						oModel:SetValue(    'CNBDETAIL'     ,'CNB_CONTA'        ,jBody["itens"][nRegDet]["CNB_CONTA"])
						oModel:SetValue(    'CNBDETAIL'     ,'CNB_TE'           ,jBody["itens"][nRegDet]["CNB_TE"])
						oModel:SetValue(    'CNBDETAIL'     ,'CNB_CC'           ,jBody["itens"][nRegDet]["CNB_CC"])

					Next nRegDet
				Endif
			Endif

			//Cronograma Financeiro
			If cTpContr == '001' //Contrato FIXO gera cronograma

				If Valtype(jBody:GetJsonObject("Cronograma")) == 'A'

					// Passa por todos os registros
					For nX := 1 to Len(jBody["Cronograma"])

						SetMVValue("CN300CRG"       ,"MV_PAR01"     ,jBody["Cronograma"][nX]["CRG_NPERIO"])			//1=Mensal, 2=Quinzenal, 3=Diário, 4=Condição Pagamento
						SetMVValue("CN300CRG"       ,"MV_PAR02"     ,jBody["Cronograma"][nX]["CRG_NDIAS"])  		//Número de dias para avançar nas parcelas do cronograma
						SetMVValue("CN300CRG"       ,"MV_PAR03"     ,jBody["Cronograma"][nX]["CRG_NULTDI"])  		//1- Dt não existir: Quando a data calculada pelo intervalo de dias informados não existir no referido mês. 2- Não: Quando a data calculada pelo sistema não existir, utiliza o primeiro dia do mês seguinte. 3- Sempre: Ultiliza sempre o ultimo dia do mês na data prevista de medição, quando a periodicidade é mensal.
						SetMVValue("CN300CRG"       ,"MV_PAR04"     ,jBody["Cronograma"][nX]["CRG_CDTCOM"])			//Deve ser composta por mês/ano no formato MM/AAAA(Exemplo: 12/2018)
						SetMVValue("CN300CRG"       ,"MV_PAR05"     ,CTOD(jBody["Cronograma"][nX]["CRG_DTPREV"]))	//Data prevista para que ocorra a primeira medição(exemplo: 20/12/2018 )
						SetMVValue("CN300CRG"       ,"MV_PAR06"     ,jBody["Cronograma"][nX]["CRG_NPARC"])			//Número de parcelas do cronograma
						SetMVValue("CN300CRG"       ,"MV_PAR07"     ,jBody["Cronograma"][nX]["CRG_CCOND"])			//Código da condição de pagamento que as parcelas do cronograma devem ser geradas
						SetMVValue("CN300CRG"       ,"MV_PAR08"     ,jBody["Cronograma"][nX]["CRG_NTXJUR"])			//Taxa de Juros para cálculo do valor presente

						Pergunte("CN300CRG",.F.)
						CN300PrCF(.T.)

					Next nX
				Endif
			Endif

			//Validacao e Gravacao dos dados e LOG
			If oModel:VldData()
				If oModel:CommitData()

					FreeObj(jAuxLog)
					jAuxLog             := JsonObject():New()
					jAuxLog["status"]   := "1"
					jAuxLog["idinteg"]  := cIDInteg
					jAuxLog["nomapi"]   := "POST_INCCONTR"
					jAuxLog["rotina"]   := "CNTA300"
					jAuxLog["tabela"]   := "CN9"
					jAuxLog["recno"]    := CN9->(RecNo())
					jAuxLog["data"]     := DToS(dDataBase)
					jAuxLog["hora"]     := Time()
					jAuxLog["msgresp"]  := "success"
					jAuxLog["msgerr"]   := ""
					jAuxLog["jsonbod"]  := oRest:GetBodyRequest()
					jAuxLog["jsonret"]  := '{"result": Contrato incluido com sucesso!"}'

					If !oLog:AddItem(jAuxLog)
						ConOut(oLog:GetError())
					EndIf
				Endif
			Else

				//Caso nao tenha sido gravado o contrato, verifica o erro
				aMsgDeErro := oModel:GetErrorMessage()
				cMsgErro   := aMsgDeErro[6]
				cLogErro   += "Contrato Nr  "+ cContrato + " Contrato Nao Gerada! Erro: " + cMsgErro + CRLF
				nTotErro++
				lRet := .F.

				FreeObj(jAuxLog)
				jAuxLog             := JsonObject():New()
				jAuxLog["status"]   := "0"
				jAuxLog["idinteg"]  := ""
				jAuxLog["nomapi"]   := "POST_INCCONTR"
				jAuxLog["rotina"]   := "CNTA300"
				jAuxLog["tabela"]   := "CN9"
				jAuxLog["recno"]    := 0
				jAuxLog["data"]     := DToS(dDataBase)
				jAuxLog["hora"]     := Time()
				jAuxLog["msgresp"]  := "error"
				jAuxLog["msgerr"]   := cLogErro
				jAuxLog["jsonbod"]  := oRest:GetBodyRequest()
				jAuxLog["jsonret"]  := '{"result": "' + cLogErro + '"}'

				If ! oLog:AddItem(jAuxLog)
					ConOut(oLog:GetError())
				EndIf
			EndIf

			//Caso tenha gravado o contrato, verifica se tem documentos para gerar
			If lRet

				cContrAux := CN9->CN9_NUMERO

				If oModel:IsActive()
					oModel:DeActivate()
				EndIf

				FreeObj(oModel)

				//Cria o documento
				If ! Empty(Alltrim(cContrAux))

					fGeraDoc(jBody["documentos"],cContrAux)

				Endif
			Endif
		EndIf

	Catch oError

		Aviso(cTitApp, "Erro DEV" + Enter + oError:Description, {"Ok"}, 3, "",,, .T.)
		lRet := .T.

	EndTry

	FWRestArea(aArea)

Return (lRet)

//Grava o documento do contrato
Static Function fGeraDoc(jDocs, cContra)

	Local oModel    := NIL                           as Object
	Local oMdlCNK   := Nil                           as Object
	Local oLog      := Nil                           as Object
	Local jAuxLog   := Nil                           as Json
	Local cChave    := FWxFilial("CN9") + cContra    as Character
	Local aErro     := {}                            as Array
	Local nX        := 0                             as Numeric

	Try

		CN9->(DbSetOrder(1)) //CN9_FILIAL+CN9_NUMERO+CN9_REVISA
		If CN9->(MSSeek(cChave))

			oLog    := CtrlLOG():New()

			jAuxLog := JsonObject():New()

			If ! oLog:SetTab("SZL")

				U_AdminMsg("[CNTA300] " + DToC(dDataBase) + " - " + Time() + " -> " + oLog:GetError(), IsBlind())

			EndIf

			oModel := FwLoadModel("CNTA171")
			oModel:SetOperation(MODEL_OPERATION_INSERT)

			If oModel:Activate()
				oMdlCNK := oModel:GetModel("CNKMASTER")

				If Valtype(jDocs) == 'A'

					// Passa por todos os registros
					For nX := 1 to Len(jDocs)

						oMdlCNK:SetValue(   "CNK_CONTRA"     ,cContra)
						oMdlCNK:SetValue(   "CNK_DESCRI"     ,jDocs[nX]["CNK_DESCRI"])
						oMdlCNK:SetValue(   "CNK_TPDOC "     ,jDocs[nX]["CNK_TPDOC "])
						oMdlCNK:SetValue(   "CNK_DTEMIS"     ,CTOD(jDocs[nX]["CNK_DTEMIS"]))
						oMdlCNK:SetValue(   "CNK_DTVALI"     ,CTOD(jDocs[nX]["CNK_DTVALI"]))
						oMdlCNK:SetValue(   "CNK_OBS"        ,jDocs[nX]["CNK_OBS"])

						cAnexo := jDocs[nX]["ANEXOS"]

					Next nX
				Endif

				If oModel:VldData()
					oModel:CommitData()

					FreeObj(jAuxLog)
					jAuxLog             := JsonObject():New()
					jAuxLog["status"]   := "1"
					jAuxLog["idinteg"]  := cIDInteg
					jAuxLog["nomapi"]   := "POST_INCCONTRDOC"
					jAuxLog["rotina"]   := "CNTA171"
					jAuxLog["tabela"]   := "CNK"
					jAuxLog["recno"]    := CNK->(RecNo())
					jAuxLog["data"]     := DToS(dDataBase)
					jAuxLog["hora"]     := Time()
					jAuxLog["msgresp"]  := "success"
					jAuxLog["msgerr"]   := ""
					jAuxLog["jsonbod"]  := oRest:GetBodyRequest()
					jAuxLog["jsonret"]  := '{"result": Contrato incluida com sucesso!!"}'

					If ! oLog:AddItem(jAuxLog)
						ConOut(oLog:GetError())
					EndIf

					//chama função para gravar o arquivo, caso tenha anexo
					If ! Empty(cAnexo)

						cDoc := CNK->CNK_CODIGO
						fImpArq(cAnexo, cContra, cDoc)
					Endif

				Else
					aErro := oModel:GetErrorMessage()
					cMsgErro   := aErro[6]
					cLogErro   += "Documento do contrato:  "+ cContra + " Nao Gerada! Erro: " + cMsgErro + CRLF

					FreeObj(jAuxLog)
					jAuxLog             := JsonObject():New()
					jAuxLog["status"]   := "0"
					jAuxLog["idinteg"]  := ""
					jAuxLog["nomapi"]   := "POST_INCCONTRDOC"
					jAuxLog["rotina"]   := "CNTA171"
					jAuxLog["tabela"]   := "CNK"
					jAuxLog["recno"]    := 0
					jAuxLog["data"]     := DToS(dDataBase)
					jAuxLog["hora"]     := Time()
					jAuxLog["msgresp"]  := "error"
					jAuxLog["msgerr"]   := cLogErro
					jAuxLog["jsonbod"]  := oRest:GetBodyRequest()
					jAuxLog["jsonret"]  := '{"result": "' + cLogErro + '"}'

					If ! oLog:AddItem(jAuxLog)
						ConOut(oLog:GetError())
					EndIf
				EndIf
			Endif

			If oModel:IsActive()
				oModel:DeActivate()
			EndIf

			FreeObj(oModel)
		EndIf

	Catch oError

		Aviso(cTitApp, "Erro Criação Documento" + Enter + oError:Description, {"Ok"}, 3, "",,, .T.)

		lRet := .T.

	EndTry

Return()

//Crio o arquivo, decodifico e faço a gravação
Static Function fImpArq(cImp, cCont, cEnt)

	Local cNome	:= cCont + '_' + DtoS(Date()) +'.pdf'

	//Cria o arquivo
	nHandle := fcreate(MsDocPath()+'\' + cNome)

	//Decodifica o anexo e grava no arquivo
	FWrite(nHandle, Decode64(cImp))

	fclose(nHandle)

	If nHandle > 0

		DbSelectArea("ACB")
		ACB->(DbSetOrder(1))

		ACB->(RecLock('ACB',.T.))

		ACB->ACB_FILIAL := xFilial('ACB')
		ACB->ACB_CODOBJ := GetSxeNum("ACB","ACB_CODOBJ")
		ACB->ACB_OBJETO := cNome
		ACB->ACB_DESCRI := "Documento do contrato: " + cCont

		ACB->(MSUNLOCK())

		ConfirmSx8()

		DbSelectArea("AC9")
		AC9->(DbSetOrder(1))

		AC9->(RecLock('AC9',.T.))

		AC9->AC9_FILIAL := FWxFilial('ACB')
		AC9->AC9_FILENT := cFilAnt
		AC9->AC9_ENTIDA := 'CNK'
		AC9->AC9_CODENT := cEnt
		AC9->AC9_CODOBJ := ACB->ACB_CODOBJ

		AC9->(MSUNLOCK())

	Endif

Return()

//-- http://localhost:8082/rest
	@put(endpoint="/UnimedCampinas/Contratos/RevContrato", description='Servico rest de revisao contratos - metodo PUT')

User Function rev_contratos() as logical

	Local oError   		:= ErrorClass():New()   as Object
	Local oLog     		:= Nil                  as Object
	//Local oVldSch  		:= Nil                	as Object
	Local oBody    		:= Nil                  as Json
	Local oAux     		:= Nil                  as Json
	Local oResult 		:= Nil                  as Json
	Local jAuxLog   	:= Nil                  as Json
	Local cMsgErr   	:= ""                   as Character
	Local cMsgOk    	:= ""                   as Character
	Local cPathSch  	:= ""                   as Character
	Local jContrato 	:= Nil                  as Json
	Local lRet      	:= .T.                  as Logical
	Local cContrato 	:= ""                   as Character

	Try
		// Define o formato de retorno do Response para o oRest
		oAux := JsonObject():New()
		oAux:FromJson('{"Content-Type":"application/json"}')
		oRest:setHeaderResponse(oAux)
		FreeObj(oAux)

		// Coleta dados do Body da Requisicao
		oBody := JsonObject():New()
		oBody:FromJson(oRest:GetBodyRequest())

		// Pega CNPJ para preparar o Ambiente
		If oBody:HasProperty("cnpj")
			// Prepara o Ambiente conforme o CNPJ informado
			cCNPJ := oBody["cnpj"]
			If ! U_PrepEnvironment(cCNPJ) //! fValidEmp(cCNPJ)

				oRest:SetStatusCode(602)
				oRest:SetResponse(U_AnswerErrorFormat(602, "Erro ao preparar ambiente", "Erro ao preparar o ambiente com o CNPJ informado"))
				Return .T.

			Else

				cPathSch := SuperGetMV("UB_SCHEMA", .F., "\schemaint")
				oLog := CtrlLOG():New()
				jAuxLog := JsonObject():New()
				If ! oLog:SetTab("SZL")

					ConOut(oLog:GetError())
					oRest:SetStatusCode(501)
					oRest:SetResponse(U_AnswerErrorFormat(501, "Erro DEV", oLog:GetError()))
					Return .T.

				EndIf
/*
				// Realiza a Validacao do JSON enviado com Schema
				If File(cPathSch + "\IncContr.json")

					oVldSch := VldSchJSON():New()
					If oVldSch:SetFileSch(cPathSch + "\IncContr.json", @cMsgErr)

						If ! oVldSch:ValidJSON(oBody, @cMsgErr)

							oRest:SetStatusCode(502)
							oRest:SetResponse(U_AnswerErrorFormat(502, "Validacao de Schema", cMsgErr))
							Return (.T.)

						EndIf

					Else

						oRest:SetStatusCode(502)
						oRest:SetResponse(U_AnswerErrorFormat(502, "Validacao de Schema", cMsgErr))
						Return (.T.)

					EndIf
				EndIf
				*/
				// Inicia o processo
				oAux := JsonObject():New()
				If oBody:HasProperty("contrato")

					cbody := obody:toJson()

					fRevContrato(@cContrato, oBody, jContrato,@lRet)

					if ! lRet
						oRest:SetStatusCode(606)
						oRest:SetResponse(U_AnswerErrorFormat(606, "Alguns Contratos com erro na alteracao", ;
							IIf(!Empty(cMsgOk), "Contrato Alterado"+ Enter + cMsgOk + Enter + "Contratos nao Alterado" + Enter + cMsgErr, "Contratos nao alterado" + Enter + cMsgErr)))
					Else
						oRest:SetStatusCode(201)
						oRest:SetResponse(U_AnswerErrorFormat(201, "Contrato alterado", cMsgOk))
					Endif
				Endif
			Endif
		Endif

	Catch oError

		oRest:SetStatusCode(501)
		oRest:SetResponse(U_AnswerErrorFormat(501, "Erro DEV", oError:Description))
		FreeObj(oBody)
		FreeObj(oResult)
	EndTry

Return()

Static Function fRevContrato(cContrato, jbody, jContrato, lRet)

	Local oError    		:= ErrorClass():New()   as Object
	Local oBody     		:= Nil                  as Json
	Local oModel			:= Nil					as Object
	Local oModelCNA			:= Nil				    as Object
	Local oModelCNB			:= Nil				    as Object
	Local oModelCNC			:= Nil				    as Object
	Local oLog     			:= Nil                  as Object
	Local jAuxLog   		:= Nil                  as Json
	Local cAlias			:= ""					as Character
	Local cRevisa			:= ""					as Character
	Local nX				:= 0					as Numeric
	Local nZ				:= 0					as Numeric
	Local nY				:= 0					as Numeric
	Local nT				:= 0					as Numeric
	Local cUser				:= ""                   as Character
	Local cGrp				:= ""                   as Character
	Local cTCod				:= ""                   as Character
	Local nPos				:= 0                    as Numeric

	Try
		oLog := CtrlLOG():New()
		jAuxLog := JsonObject():New()
		If ! oLog:SetTab("SZL")

			U_AdminMsg("[CNTA300] " + DToC(dDataBase) + " - " + Time() + " -> " + oLog:GetError(), IsBlind())

		EndIf

		cContrato   := Alltrim(jBody:GetJsonObject("contrato"))
		cIDInteg    := Alltrim(jBody:GetJsonObject("idint"))
		cCodRev		:= Alltrim(jBody:GetJsonObject("tiporev"))
		cJustific	:= Alltrim(jBody:GetJsonObject("justif"))
		cCodFor     := Alltrim(jBody:GetJsonObject("CNC_CODIGO"))
		cCodLoj     := Alltrim(jBody:GetJsonObject("CNC_LOJA"))

		//Posicionar no ultimo registro para obter a ultima revisao
		cAlias	:= "SELECT MAX(R_E_C_N_O_) RECNO FROM CN9990 WHERE D_E_L_E_T_ = '' AND CN9_NUMERO = '"+cContrato+"' AND CN9_DTASSI <> ''

		cAlias	:= ChangeQuery(cAlias)
		PLSQuery(cAlias, "cQryRev")

		//Caso encontre algum registro
		If ! cQryRev->(EoF())

			//Caso não não tenha revisão preenchida irá atualizar, filiais e acessos
			cRevisa   := cQryRev->RECNO

			CN9->(DBSetOrder(1))//CN9_FILIAL+CN9_NUMERO+CN9_REVISA
			CN9->(dbGoto(cRevisa))

			//Busca da CN0 o Tipo da revisao
			CN0->(DBSetOrder(1)) //CN0_FILIAL+CN0_CODIGO
			If CN0->(MSSeek(FWxFilial('CN0') + cCodRev))

				cTipRev	:=	CN0->CN0_TIPO

				//Define o tipo de revisão que será realizado.
				A300STpRev(cTipRev)

				oModel := FWLoadModel("CNTA300")
				oModel:SetOperation(MODEL_OPERATION_INSERT)

				//- Ativa o modelo. É necessária a utilização do parâmetro como true (.T.) para realizar uma copia.
				If (lRet := oModel:Activate(.T.))

					//Cabecalho
					oModel:SetValue( 	'CN9MASTER'    ,'CN9_TIPREV' 		,cCodRev)
					oModel:SetValue( 	'CN9MASTER'    ,'CN9_JUSTIF' 		,cJustific)

					If cTipRev == 'G' //Tipo Revisao Aberta

						oModel:SetValue(    'CN9MASTER'    ,'CN9_XDTORI'        ,CtoD(jBody:GetJsonObject("CN9_XDTORI")))
						oModel:SetValue(    'CN9MASTER'    ,'CN9_XCLICO'        ,jBody:GetJsonObject("CN9_XCLICO"))
						oModel:SetValue(    'CN9MASTER'    ,'CN9_XLOJCO'        ,jBody:GetJsonObject("CN9_XLOJCO"))
						oModel:SetValue(    'CN9MASTER'    ,'CN9_UNVIGE'        ,jBody:GetJsonObject("CN9_UNVIGE"))
						oModel:SetValue(    'CN9MASTER'    ,'CN9_VIGE'          ,jBody:GetJsonObject("CN9_VIGE"))
						oModel:SetValue(    'CN9MASTER'    ,'CN9_CONDPG'        ,jBody:GetJsonObject("CN9_CONDPG"))
						oModel:SetValue(    'CN9MASTER'    ,'CN9_FLGREJ'        ,jBody:GetJsonObject("CN9_FLGREJ"))
						oModel:SetValue(    'CN9MASTER'    ,'CN9_INDICE'        ,jBody:GetJsonObject("CN9_INDICE"))
						oModel:SetValue(    'CN9MASTER'    ,'CN9_FLGCAU'        ,jBody:GetJsonObject("CN9_FLGCAU"))
						oModel:SetValue(    'CN9MASTER'    ,'CN9_OBJCTO'        ,jBody:GetJsonObject("CN9_OBJCTO"))
						oModel:SetValue(    'CN9MASTER'    ,'CN9_ALTCLA'        ,jBody:GetJsonObject("CN9_ALTCLA"))
						oModel:SetValue(    'CN9MASTER'    ,'CN9_APROV'         ,jBody:GetJsonObject("CN9_APROV"))
						oModel:SetValue(    'CN9MASTER'    ,'CN9_GRPAPR'        ,jBody:GetJsonObject("CN9_GRPAPR"))
						oModel:SetValue(    'CN9MASTER'    ,'CN9_NATURE'        ,jBody:GetJsonObject("CN9_NATURE"))
						oModel:SetValue(    'CN9MASTER'    ,'CN9_DEPART'        ,jBody:GetJsonObject("CN9_DEPART"))
						oModel:SetValue(    'CN9MASTER'    ,'CN9_PERI'          ,jBody:GetJsonObject("CN9_PERI"))
						oModel:SetValue(    'CN9MASTER'    ,'CN9_UNPERI'        ,jBody:GetJsonObject("CN9_UNPERI"))
						oModel:SetValue(    'CN9MASTER'    ,'CN9_MODORJ'        ,jBody:GetJsonObject("CN9_MODORJ"))
						oModel:SetValue(    'CN9MASTER'    ,'CN9_PRORAT'        ,jBody:GetJsonObject("CN9_PRORAT"))
						oModel:SetValue(    'CN9MASTER'    ,'CN9_ARRAST'        ,'1') //Arrasto
						oModel:SetValue(    'CN9MASTER'    ,'CN9_REDVAL'        ,'1') //Redistribuicao de Valores
						oModel:SetValue(    'CN9MASTER'    ,'CN9_TPCRON'        ,'1') //Acrescimo ou Descrescimo

					ElseIf cTipRev == '5' //Tipo Paralizacao do Contrato

						oModel:SetValue(    'CN9MASTER'    ,'CN9_MOTPAR'        ,jBody:GetJsonObject("CN9_MOTPAR"))
						oModel:SetValue(    'CN9MASTER'    ,'CN9_DTFIMP'        ,CtoD(jBody:GetJsonObject("CN9_DTFIMP")))

					ElseIf cTipRev == '7' //Tipo Altera Clausula do Contrato

						oModel:SetValue(    'CN9MASTER'    ,'CN9_ALTCLA'        ,jBody:GetJsonObject("CN9_ALTCLA"))

					ElseIf cTipRev == 'B' //Tipo Grupo de Aprovação

						oModel:SetValue(    'CN9MASTER'    ,'CN9_APROV'         ,jBody:GetJsonObject("CN9_APROV"))
						oModel:SetValue(    'CN9MASTER'    ,'CN9_GRPAPR'        ,jBody:GetJsonObject("CN9_GRPAPR"))
					Endif

					If cTipRev == 'A' .or. cTipRev == 'G' //Tipo Troca Fornecedor ou Tipo aberta

						oModelCNA	:=	oModel:GetModel('CNADETAIL')
						oModelCNC	:=	oModel:GetModel('CNCDETAIL')

						oModelCNC:AddLine()

						//Cliente/Fornecedor do Contrato
						oModelCNC:SetValue(    'CNC_CODIGO'			,cCodFor)
						oModelCNC:SetValue(    'CNC_LOJA'         	,cCodLoj)

						//Planilhas do Contrato
						oModelCNA:SetValue(		'CNA_FORNEC'		,oModelCNC:GetValue('CNC_CODIGO'))
						oModelCNA:SetValue(		'CNA_LJFORN'		,oModelCNC:GetValue('CNC_LOJA'))

					Endif

					//Itens da Planilha do Contrato
					If Valtype(jBody:GetJsonObject("itens")) == 'A'

						oModelCNB	:=	oModel:GetModel('CNBDETAIL')

						For nX := 1 to Len(jBody["itens"])

							If cTipRev == '1' //TIPO ADITIVO

								nPos := aScan(omodelcnb:adatamodel[1][1],{|x| alltrim(x[5]) == AllTrim(jBody["itens"][nX]["CNB_PRODUT"])})

								If nPos > 0

									oModelCNB:GoLine(nPos)
									oModelCNB:SetValue(		'CNB_QUANT'        ,jBody["itens"][nX]["CNB_QUANT"])
								Else

									oModelCNB:AddLine()
									nLin:= oModelCNB:GetLine()

									oModelCNB:SetValue(		'CNB_ITEM'         ,StrZero(nLin, Len(CNB->CNB_ITEM)))
									oModelCNB:SetValue(		'CNB_PRODUT'       ,jBody["itens"][nX]["CNB_PRODUT"])
									oModelCNB:SetValue(		'CNB_QUANT'        ,jBody["itens"][nX]["CNB_QUANT"])
									oModelCNB:SetValue(		'CNB_VLUNIT'       ,jBody["itens"][nX]["CNB_VLUNIT"])
									oModelCNB:SetValue(		'CNB_CONTA'        ,jBody["itens"][nX]["CNB_CONTA"])
									oModelCNB:SetValue(		'CNB_TE'           ,jBody["itens"][nX]["CNB_TE"])
									oModelCNB:SetValue(		'CNB_CC'           ,jBody["itens"][nX]["CNB_CC"])
								Endif

							Elseif cTipRev == 'G' //TIPO ALTERACAO

								//Busca dentro array se existe o produto
								nPos := aScan(omodelcnb:adatamodel[1][1],{|x| alltrim(x[5]) == AllTrim(jBody["itens"][nX]["CNB_PRODUT"])})

								If nPos > 0

									oModelCNB:GoLine(nPos)

									oModelCNB:SetValue(		'CNB_QUANT'        ,jBody["itens"][nX]["CNB_QUANT"])
									oModelCNB:SetValue(		'CNB_VLUNIT'       ,jBody["itens"][nX]["CNB_VLUNIT"])
									oModelCNB:SetValue(		'CNB_CONTA'        ,jBody["itens"][nX]["CNB_CONTA"])
									oModelCNB:SetValue(		'CNB_TE'           ,jBody["itens"][nX]["CNB_TE"])
									oModelCNB:SetValue(		'CNB_CC'           ,jBody["itens"][nX]["CNB_CC"])
								Else

									oModelCNB:AddLine()
									nLin:= oModelCNB:GetLine()

									oModelCNB:SetValue(		'CNB_ITEM'         ,StrZero(nLin, Len(CNB->CNB_ITEM)))
									oModelCNB:SetValue(		'CNB_PRODUT'       ,jBody["itens"][nX]["CNB_PRODUT"])
									oModelCNB:SetValue(		'CNB_QUANT'        ,jBody["itens"][nX]["CNB_QUANT"])
									oModelCNB:SetValue(		'CNB_VLUNIT'       ,jBody["itens"][nX]["CNB_VLUNIT"])
									oModelCNB:SetValue(		'CNB_CONTA'        ,jBody["itens"][nX]["CNB_CONTA"])
									oModelCNB:SetValue(		'CNB_TE'           ,jBody["itens"][nX]["CNB_TE"])
									oModelCNB:SetValue(		'CNB_CC'           ,jBody["itens"][nX]["CNB_CC"])
								Endif

							Elseif cTipRev == '3' //TIPO REALINHAMENTO

								nPos := aScan(omodelcnb:adatamodel[1][1],{|x| alltrim(x[5]) == AllTrim(jBody["itens"][nX]["CNB_PRODUT"])})

								If nPos > 0

									oModelCNB:GoLine(nPos)
									oModelCNB:SetValue(		'CNB_VLUNIT'        ,jBody["itens"][nX]["CNB_VLUNIT"])
								Endif
							Endif
						Next nX
					Endif

					//Atualiza Cronogramas
					If cTipRev == '1' .or. cTipRev == 'G' .or.cTipRev == '6'

						//Atualizar cronograma financeiro/físico
						CN300AtCrs(oModel)
					Endif

					//Validacao e Gravacao do Modelo
					lRet := oModel:VldData() .And. oModel:CommitData()
				EndIf

				If ! lRet .And. oModel:HasErrorMessage()

					aMsgDeErro := oModel:GetErrorMessage()

					cMsgErro   := aMsgDeErro[6]
					cLogErro   += "Contrato Nr  "+ cContrato + " Contrato nao foi revisado! Erro: " + cMsgErro + CRLF
					nTotErro++
					lRet := .F.

					oRest:SetStatusCode(602)
					oRest:SetResponse(U_AnswerErrorFormat(602, "Contrato nao foi revisado"))

					FreeObj(jAuxLog)
					jAuxLog := JsonObject():New()

					jAuxLog["status"]  := "0"
					jAuxLog["idinteg"] := ""
					jAuxLog["nomapi"]  := "PUT_ALTCONTR"
					jAuxLog["rotina"]  := "CNTA300"
					jAuxLog["tabela"]  := "CN9"
					jAuxLog["recno"]   := 0
					jAuxLog["data"]    := DToS(dDataBase)
					jAuxLog["hora"]    := Time()
					jAuxLog["msgresp"] := "error"
					jAuxLog["msgerr"]  := "Contrato não revisado"
					jAuxLog["jsonbod"] := oBody:ToJSON()
					jAuxLog["jsonret"] := '{"result": "Contrato nao foi revisado"}'
				Else

					FreeObj(jAuxLog)
					jAuxLog             := JsonObject():New()
					jAuxLog["status"]   := "1"
					jAuxLog["idinteg"]  := cIDInteg
					jAuxLog["nomapi"]   := "POST_ALTCONTR"
					jAuxLog["rotina"]   := "CNTA300"
					jAuxLog["tabela"]   := "CN9"
					jAuxLog["recno"]    := CN9->(RecNo())
					jAuxLog["data"]     := DToS(dDataBase)
					jAuxLog["hora"]     := Time()
					jAuxLog["msgresp"]  := "success"
					jAuxLog["msgerr"]   := ""
					jAuxLog["jsonbod"]  := oRest:GetBodyRequest()
					jAuxLog["jsonret"]  := '{"result": Revisão incluida com sucesso!!"}'

					If ! oLog:AddItem(jAuxLog)
						ConOut(oLog:GetError())
					EndIf
				EndIf
			Else
				FreeObj(jAuxLog)
				jAuxLog             := JsonObject():New()
				jAuxLog["status"]   := "0"
				jAuxLog["idinteg"]  := cIDInteg
				jAuxLog["nomapi"]   := "POST_ALTCONTR"
				jAuxLog["rotina"]   := "CNTA300"
				jAuxLog["tabela"]   := "CN9"
				jAuxLog["recno"]    := CN9->(RecNo())
				jAuxLog["data"]     := DToS(dDataBase)
				jAuxLog["hora"]     := Time()
				jAuxLog["msgresp"]  := "error"
				jAuxLog["msgerr"]   := ""
				jAuxLog["jsonbod"]  := oRest:GetBodyRequest()
				jAuxLog["jsonret"]  := '{"result": Contrato não encontrado ou nao esta vigente!"}'

				If ! oLog:AddItem(jAuxLog)
					ConOut(oLog:GetError())
				EndIf
			Endif

			//Validacao e Gravacao do Modelo
			lRet := oModel:VldData() .And. oModel:CommitData()

			If ! lRet .And. oModel:HasErrorMessage()

				aMsgDeErro := oModel:GetErrorMessage()

				cMsgErro   := aMsgDeErro[6]
				cLogErro   += "Contrato Nr  "+ cContrato + " Contrato nao foi revisado! Erro: " + cMsgErro + CRLF
				nTotErro++
				lRet := .F.

				oRest:SetStatusCode(602)
				oRest:SetResponse(U_AnswerErrorFormat(602, "Contrato nao foi revisado"))

				FreeObj(jAuxLog)
				jAuxLog := JsonObject():New()

				jAuxLog["status"]  := "0"
				jAuxLog["idinteg"] := ""
				jAuxLog["nomapi"]  := "PUT_ALTCONTR"
				jAuxLog["rotina"]  := "CNTA300"
				jAuxLog["tabela"]  := "CN9"
				jAuxLog["recno"]   := 0
				jAuxLog["data"]    := DToS(dDataBase)
				jAuxLog["hora"]    := Time()
				jAuxLog["msgresp"] := "error"
				jAuxLog["msgerr"]  := "Contrato não revisado"
				jAuxLog["jsonbod"] := oBody:ToJSON()
				jAuxLog["jsonret"] := '{"result": "Contrato nao foi revisado"}'
			Else

				FreeObj(jAuxLog)
				jAuxLog             := JsonObject():New()
				jAuxLog["status"]   := "1"
				jAuxLog["idinteg"]  := cIDInteg
				jAuxLog["nomapi"]   := "POST_ALTCONTR"
				jAuxLog["rotina"]   := "CNTA300"
				jAuxLog["tabela"]   := "CN9"
				jAuxLog["recno"]    := CN9->(RecNo())
				jAuxLog["data"]     := DToS(dDataBase)
				jAuxLog["hora"]     := Time()
				jAuxLog["msgresp"]  := "success"
				jAuxLog["msgerr"]   := ""
				jAuxLog["jsonbod"]  := oRest:GetBodyRequest()
				jAuxLog["jsonret"]  := '{"result": Revisão incluida com sucesso!!"}'

				If ! oLog:AddItem(jAuxLog)
					ConOut(oLog:GetError())
				EndIf
			EndIf

		Endif
	Endif
Catch oError

	Aviso(cTitApp, "Erro DEV" + Enter + oError:Description, {"Ok"}, 3, "",,, .T.)
	lRet := .T.

EndTry

Return(lRet)

//Busca se existe acessos de usuarios e grupos
Static Function fScanCNN(cUsuario,cGrupo,cCodT,npos)

	Local nX	:= 0					as Numeric

	For nX := 1 To Len(oModelCNN:aDataModel)

		If ! Empty(cUsuario)
			nPos := AScan(oModelCNN:aDataModel[nX][1], {|x|;
				AllTrim(x[3]) == cUsuario .and.;
				AllTrim(x[5]) == cCodT;
				})
		ElseIf ! Empty(cGrupo)
			nPos := AScan(oModelCNN:aDataModel[nX][1], {|x|;
				AllTrim(x[4]) == cGrupo .and.;
				AllTrim(x[5]) == cCodT;
				})
		Endif
	Next nX

Return()

//-- http://localhost:8082/rest
	@put(endpoint="/UnimedCampinas/Contratos/AltContrato", description='Servico rest de alteracao contratos - metodo PUT')

User Function altera_contratos() as logical

	Local oError   		:= ErrorClass():New()   as Object
	Local oLog     		:= Nil                  as Object
	//Local oVldSch  		:= Nil                	as Object
	Local oBody    		:= Nil                  as Json
	Local oAux     		:= Nil                  as Json
	Local oResult 		:= Nil                  as Json
	Local jAuxLog   	:= Nil                  as Json
	Local cMsgErr   	:= ""                   as Character
	Local cMsgOk    	:= ""                   as Character
	Local cPathSch  	:= ""                   as Character
	Local jContrato 	:= Nil                  as Json
	Local lRet      	:= .T.                  as Logical
	Local cContrato 	:= ""                   as Character

	Try
		// Define o formato de retorno do Response para o oRest
		oAux := JsonObject():New()
		oAux:FromJson('{"Content-Type":"application/json"}')
		oRest:setHeaderResponse(oAux)
		FreeObj(oAux)

		// Coleta dados do Body da Requisicao
		oBody := JsonObject():New()
		oBody:FromJson(oRest:GetBodyRequest())

		// Pega CNPJ para preparar o Ambiente
		If oBody:HasProperty("cnpj")
			// Prepara o Ambiente conforme o CNPJ informado
			cCNPJ := oBody["cnpj"]
			If ! U_PrepEnvironment(cCNPJ) //! fValidEmp(cCNPJ)

				oRest:SetStatusCode(602)
				oRest:SetResponse(U_AnswerErrorFormat(602, "Erro ao preparar ambiente", "Erro ao preparar o ambiente com o CNPJ informado"))
				Return .T.

			Else

				cPathSch := SuperGetMV("UB_SCHEMA", .F., "\schemaint")
				oLog := CtrlLOG():New()
				jAuxLog := JsonObject():New()
				If ! oLog:SetTab("SZL")

					ConOut(oLog:GetError())
					oRest:SetStatusCode(501)
					oRest:SetResponse(U_AnswerErrorFormat(501, "Erro DEV", oLog:GetError()))
					Return .T.

				EndIf
/*
				// Realiza a Validacao do JSON enviado com Schema
				If File(cPathSch + "\IncContr.json")

					oVldSch := VldSchJSON():New()
					If oVldSch:SetFileSch(cPathSch + "\IncContr.json", @cMsgErr)

						If ! oVldSch:ValidJSON(oBody, @cMsgErr)

							oRest:SetStatusCode(502)
							oRest:SetResponse(U_AnswerErrorFormat(502, "Validacao de Schema", cMsgErr))
							Return (.T.)

						EndIf

					Else

						oRest:SetStatusCode(502)
						oRest:SetResponse(U_AnswerErrorFormat(502, "Validacao de Schema", cMsgErr))
						Return (.T.)

					EndIf
				EndIf
				*/
				// Inicia o processo
				oAux := JsonObject():New()
				If oBody:HasProperty("contrato")

					cbody := obody:toJson()

					fAltContrato(@cContrato, oBody, jContrato,@lRet)

					if ! lRet
						oRest:SetStatusCode(606)
						oRest:SetResponse(U_AnswerErrorFormat(606, "Alguns Contratos com erro na alteracao", ;
							IIf(!Empty(cMsgOk), "Contrato Alterado"+ Enter + cMsgOk + Enter + "Contratos nao Alterado" + Enter + cMsgErr, "Contratos nao alterado" + Enter + cMsgErr)))
					Else
						oRest:SetStatusCode(201)
						oRest:SetResponse(U_AnswerErrorFormat(201, "Contrato alterado", cMsgOk))
					Endif
				Endif
			Endif
		Endif

	Catch oError

		oRest:SetStatusCode(501)
		oRest:SetResponse(U_AnswerErrorFormat(501, "Erro DEV", oError:Description))
		FreeObj(oBody)
		FreeObj(oResult)
	EndTry

Return()

Static Function fAltContrato(cContrato, jbody, jContrato, lRet)

	Local oError    		:= ErrorClass():New()   as Object
	Local oBody     		:= Nil                  as Json
	Local oLog     			:= Nil                  as Object
	Local jAuxLog   		:= Nil                  as Json
	Local cAlias			:= ""					as Character
	Local cRevisa			:= ""					as Character
	Local nX				:= 0					as Numeric
	Local nZ				:= 0					as Numeric
	Local nY				:= 0					as Numeric
	Local nT				:= 0					as Numeric
	Local cUser				:= ""                   as Character
	Local cGrp				:= ""                   as Character
	Local cTCod				:= ""                   as Character
	Local nPos				:= 0                    as Numeric

	Private oModelCNN		:= Nil				    as Object

	Try
		oLog := CtrlLOG():New()
		jAuxLog := JsonObject():New()
		If ! oLog:SetTab("SZL")

			U_AdminMsg("[CNTA300] " + DToC(dDataBase) + " - " + Time() + " -> " + oLog:GetError(), IsBlind())

		EndIf

		cContrato   := Alltrim(jBody:GetJsonObject("contrato"))
		cIDInteg    := Alltrim(jBody:GetJsonObject("idint"))

		//Posicionar no ultimo registro para obter a ultima revisao
		cAlias	:= "SELECT MAX(R_E_C_N_O_) RECNO FROM CN9990 WHERE D_E_L_E_T_ = '' AND CN9_NUMERO = '"+cContrato+"'

		cAlias	:= ChangeQuery(cAlias)
		PLSQuery(cAlias, "cQryRev")

		//Caso encontre algum registro
		If ! cQryRev->(EoF())

			//Caso não não tenha revisão preenchida irá atualizar, filiais e acessos
			cRevisa   := cQryRev->RECNO

			CN9->(DBSetOrder(1))//CN9_FILIAL+CN9_NUMERO+CN9_REVISA
			CN9->(dbGoto(cRevisa))

			//Valida se o contrato tem controle de acesso
			If Empty(CN9->CN9_VLDCTR) .Or. CN9->CN9_VLDCTR == "1"

				//Usuario ou grupos de acessos
				If Valtype(jBody:GetJsonObject("Acessos")) == 'A'

					For nZ := 1 to Len(jBody["Acessos"])

						If Valtype(jBody:GetJsonObject("Acessos")[nZ]["Usuario"]) == 'A'

							For nT := 1 to Len(jBody["Acessos"][nZ]["Usuario"])

								cUser 	:= ""
								cTCod	:= ""
								cGrp 	:= ""

								cUser	:= jBody["Acessos"][nZ]["Usuario"][nT]["CNN_USRCOD"]
								cTCod   := jBody["Acessos"][nZ]["Usuario"][nT]["CNN_TRACOD"]

								//chama função para verificar se existe o usuario ou grupo de acesso
								fScanCNN(cUser,cGrp,cTCod,@nPos)

								If nPos == 0

									oModelCNN:AddLine()
									nLin:= oModelCNN:GetLine()

									oModelCNN:LoadValue(	'CNN_CONTRA'       ,cContrato)
									oModelCNN:LoadValue(	'CNN_USRCOD'       ,cUser)
									oModelCNN:SetValue( 	'CNN_TRACOD'       ,cTCod)
								Endif
							Next nT

						Elseif Valtype(jBody:GetJsonObject("Acessos")[nZ]["Grupo"]) == 'A'

							For nT := 1 to Len(jBody["Acessos"][nZ]["Grupo"])

								cUser 	:= ""
								cTCod	:= ""
								cGrp 	:= ""

								cGrp	:= jBody["Acessos"][nZ]["Grupo"][nT]["CNN_GRPCOD"]
								cTCod   := jBody["Acessos"][nZ]["Grupo"][nT]["CNN_TRACOD"]

								//chama função para verificar se existe o usuario ou grupo de acesso
								fScanCNN(cUser,cGrp,cTCod,@nPos)

								If nPos == 0

									oModelCNN:AddLine()
									nLin:= oModelCNN:GetLine()

									oModelCNN:LoadValue(	'CNN_CONTRA'       ,cContrato)
									oModelCNN:LoadValue(	'CNN_GRPCOD'       ,cGrp)
									oModelCNN:SetValue( 	'CNN_TRACOD'       ,cTCod)
								Endif
							Next nT
						Endif
					Next nZ
				Endif

				//Filiais de autorizacao
				If Valtype(jBody:GetJsonObject("Filiais")) == 'A'

					oModelCPD	:=	oModel:GetModel('CPDDETAIL')

					For nY := 1 to Len(jBody["Filiais"])

						oModel:LoadValue(   'CPDDETAIL'     ,'CPD_CONTRA'       ,cContrato)
						oModel:SetValue(    'CPDDETAIL'     ,'CPD_NUMPLA'       ,cCodPla)
						oModel:SetValue(    'CPDDETAIL'     ,'CPD_FILAUT'       ,jBody["Filiais"][nY])

					Next nY
				Endif


				//Validacao e Gravacao do Modelo
				lRet := oModel:VldData() .And. oModel:CommitData()

				If ! lRet .And. oModel:HasErrorMessage()

					aMsgDeErro := oModel:GetErrorMessage()

					cMsgErro   := aMsgDeErro[6]
					cLogErro   += "Contrato Nr  "+ cContrato + " Contrato nao foi revisado! Erro: " + cMsgErro + CRLF
					nTotErro++
					lRet := .F.

					oRest:SetStatusCode(602)
					oRest:SetResponse(U_AnswerErrorFormat(602, "Contrato nao foi revisado"))

					FreeObj(jAuxLog)
					jAuxLog := JsonObject():New()

					jAuxLog["status"]  := "0"
					jAuxLog["idinteg"] := ""
					jAuxLog["nomapi"]  := "PUT_ALTCONTR"
					jAuxLog["rotina"]  := "CNTA300"
					jAuxLog["tabela"]  := "CN9"
					jAuxLog["recno"]   := 0
					jAuxLog["data"]    := DToS(dDataBase)
					jAuxLog["hora"]    := Time()
					jAuxLog["msgresp"] := "error"
					jAuxLog["msgerr"]  := "Contrato não revisado"
					jAuxLog["jsonbod"] := oBody:ToJSON()
					jAuxLog["jsonret"] := '{"result": "Contrato nao foi revisado"}'
				Else

					FreeObj(jAuxLog)
					jAuxLog             := JsonObject():New()
					jAuxLog["status"]   := "1"
					jAuxLog["idinteg"]  := cIDInteg
					jAuxLog["nomapi"]   := "POST_ALTCONTR"
					jAuxLog["rotina"]   := "CNTA300"
					jAuxLog["tabela"]   := "CN9"
					jAuxLog["recno"]    := CN9->(RecNo())
					jAuxLog["data"]     := DToS(dDataBase)
					jAuxLog["hora"]     := Time()
					jAuxLog["msgresp"]  := "success"
					jAuxLog["msgerr"]   := ""
					jAuxLog["jsonbod"]  := oRest:GetBodyRequest()
					jAuxLog["jsonret"]  := '{"result": Revisão incluida com sucesso!!"}'

					If ! oLog:AddItem(jAuxLog)
						ConOut(oLog:GetError())
					EndIf
				EndIf

			Endif
		Endif
	Endif
Catch oError

	Aviso(cTitApp, "Erro DEV" + Enter + oError:Description, {"Ok"}, 3, "",,, .T.)
	lRet := .T.

EndTry

Return(lRet)

//Busca se existe acessos de usuarios e grupos
Static Function fScanCNN(cUsuario,cGrupo,cCodT,npos)

	Local nX	:= 0					as Numeric

	For nX := 1 To Len(oModelCNN:aDataModel)

		If ! Empty(cUsuario)
			nPos := AScan(oModelCNN:aDataModel[nX][1], {|x|;
				AllTrim(x[3]) == cUsuario .and.;
				AllTrim(x[5]) == cCodT;
				})
		ElseIf ! Empty(cGrupo)
			nPos := AScan(oModelCNN:aDataModel[nX][1], {|x|;
				AllTrim(x[4]) == cGrupo .and.;
				AllTrim(x[5]) == cCodT;
				})
		Endif
	Next nX

Return()
