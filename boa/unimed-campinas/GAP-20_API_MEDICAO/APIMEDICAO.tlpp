#Include "TOTVS.ch"
#Include "TopConn.ch"
#Include "TBIConn.ch"
#Include "Protheus.ch"
#Include "tlpp-core.th"
#Include "tlpp-rest.th"

#Define cTitApp "API Medicao Contratos"
#Define Enter Chr(13) + Chr(10)

/*/{Protheus.doc} IncMed
Função de API no método POST de Inclusão da Medição de Contratos GAP20
@type function
@version V 1.00
@author Tiengo
@since 09/05/2025
@return logical, Sempre verdadeiro
/*/
@post(endpoint="/UnimedCampinas/Medicao/IncMedicao", description='Servico rest de inclusao medicao - metodo post')

User Function inclui_medicao() as Logical

	Local oError   		:= ErrorClass():New()   as Object
	Local oDetail 		:= JsonObject():New()   as Object
	Local oLog     		:= Nil                  as Object
	Local oVldSch  		:= Nil                	as Object
	Local oBody    		:= Nil                  as jSon
	Local oAux     		:= Nil                  as jSon
	Local oResult 		:= Nil                  as jSon
	Local jAuxLog  		:= Nil                  as jSon
	Local cMsgErr  		:= ""                   as Character
	Local cMsgOk   		:= ""                   as Character
	Local cPathSch 		:= ""                   as Character
	Local jMedicoes		:= Nil      			as jSon
	Local lRet     		:= .T.                  as Logical
	Local cMedicao		:= ""                   as Character
	Local cCNPJ			:= ""                   as Character

	Try
		// Define o formato de retorno do Response para o oRest
		oAux := JsonObject():New()
		oAux:FromJson('{"Content-Type":"application/json"}')
		oRest:setHeaderResponse(oAux)
		FreeObj(oAux)

		// Coleta dados do Body da Requisicao
		oBody := JsonObject():New()
		oBody:FromJson(oRest:GetBodyRequest())

		//Chama função para preparar o ambiente pelo CNPJ
		If oBody:HasProperty("cnpj")

			cCNPJ := oBody["cnpj"]
			If ! U_PrepEnvironment(cCNPJ) //! fValidEmp(cCNPJ)

				oRest:SetStatusCode(602)
				oRest:SetResponse(U_AnswerFormat(602, "Erro ao preparar ambiente", "Erro ao preparar o ambiente com o CNPJ informado"))
				Return(.T.)
			Else

				cPathSch := SuperGetMV("UB_SCHEMA", .F., "\schemaint")
				oLog := CtrlLOG():New()
				jAuxLog := JsonObject():New()

				If ! oLog:SetTab("SZL")

					ConOut(oLog:GetError())
					oRest:SetStatusCode(501)
					oRest:SetResponse(U_AnswerFormat(501, "Erro DEV", oLog:GetError()))
					Return(.T.)
				EndIf

				// Realiza a Validacao do JSON enviado com Schema
				If File(cPathSch + "\IncMed.json")

					oVldSch := VldSchJSON():New()
					If oVldSch:SetFileSch(cPathSch + "\IncMed.json", @cMsgErr)

						If ! oVldSch:ValidJSON(oBody, @cMsgErr)

							oRest:SetStatusCode(502)
							oDetail['detalhes']	:= cMsgErr
							cMsgErr := oDetail:ToJson()
							oRest:SetResponse(U_AnswerFormat(502, "Validacao de Schema", cMsgErr))
							Return (.T.)
						EndIf

					Else
						oRest:SetStatusCode(502)
						oDetail['detalhes']	:= cMsgErr
						cMsgErr := oDetail:ToJson()
						oRest:SetResponse(U_AnswerFormat(502, "Validacao de Schema", cMsgErr))
						Return (.T.)
					EndIf
				EndIf

				// Inicia o processo
				oAux := JsonObject():New()
				If oBody:HasProperty("medicoes")

					fGeraMedicao(@cMedicao, oBody, jMedicoes, @lRet, @cMsgOk, @cMsgErr)

					if ! lRet
						oRest:SetStatusCode(606)
						oDetail['detalhes']	:= IIf(!Empty(cMsgOk), "Medições Incluidas"+ Enter + cMsgOk + Enter + "Medições nao Incluidas" + Enter + cMsgErr, "Medições nao Incluidas" + Enter + cMsgErr)
						cMsgOk 	:= oDetail:ToJson()
						oRest:SetResponse(U_AnswerFormat(606, "Algumas Medições com erro na Inclusao", cMsgOk))
					Else
						oRest:SetStatusCode(201)
						oDetail['detalhes']	:= cMsgOk
						cMsgOk := oDetail:ToJson()
						oRest:SetResponse(U_AnswerFormat(201, "Medições Incluidas com sucesso!", cMsgOk))
					Endif
				Else
					oRest:SetStatusCode(602)
					oDetail['detalhes']	:= cMsgErr
					cMsgErr := oDetail:ToJson()
					oRest:SetResponse(U_AnswerFormat(602, "Nao informado objeto medicoes", "Objeto medicoes invalido"))

					FreeObj(jAuxLog)
					jAuxLog := JsonObject():New()

					jAuxLog["status"]  := "0"
					jAuxLog["idinteg"] := ""
					jAuxLog["nomapi"]  := "POST_INCMED"
					jAuxLog["rotina"]  := "CNTA121"
					jAuxLog["tabela"]  := "CND"
					jAuxLog["recno"]   := 0
					jAuxLog["data"]    := DToS(dDataBase)
					jAuxLog["hora"]    := Time()
					jAuxLog["msgresp"] := "error"
					jAuxLog["msgerr"]  := "Nao informado o objeto Medicao"
					jAuxLog["jsonbod"] := oRest:GetBodyRequest()
					jAuxLog["jsonret"] := '{"result": "Nao foi informada objeto Medicao"}'
				Endif
			Endif
		EndIf

	Catch oError

		cMsgOk := '{"erros": ["' + oError:Description + '"]}'
		oRest:SetStatusCode(501)
		oRest:SetResponse(U_AnswerFormat(501, "Erro DEV", cMsgOk))
		FreeObj(oBody)
		FreeObj(oResult)
	EndTry

Return(.T.)

//Função para Geração do Execauto da Mediçao via MVC 
Static Function fGeraMedicao(cMedicao, jbody, jMedicoes, lRet, cMsgOk, cLogErro)

	Local aArea         := FWGetArea()          as Array
	Local oModel        := Nil                  as Object
	Local cContrato     := ""                   as Character
	Local cNumMed       := ""                   as Character
	Local cCompet       := ""                   as Character
	Local cAlias        := ""                   as Character
	Local nRecno        := 0                    as numeric
	Local cRevisao      := ""                   as Character
	Local cGrAprov      := ""                   as Character
	Local cConta        := ""                   as Character
	Local cCCusto       := ""                   as Character
	Local cTes          := ""                   as Character
	Local cMultp 		:= ""                   as Character
	Local cMuldes 		:= ""                   as Character
	Local nMulval 		:= 0                    as numeric
	Local aMsgDeErro    := {}                   as Array
	Local nc            := 1                    as numeric
	Local nj            := 1                    as numeric
	Local nK            := 1                    as numeric
	Local jAuxLog       := Nil                  as Json
	Local oLog          := Nil                  as Object
	Local nQuant        := 0                    as Numeric	
	Local cRateio		:= ""					as Character

	TRY
		oLog := CtrlLOG():New()
		jAuxLog := JsonObject():New()
		If !oLog:SetTab("SZL")
			U_AdminMsg("[CNTA121] " + DToC(dDataBase) + " - " + Time() + " -> " + oLog:GetError(), IsBlind())
		EndIf

		jMedicoes := jBody:GetJsonObject("medicoes")

		For nc:= 1 to Len(jMedicoes)

			xIDInteg  := jmedicoes[nc]['idint']
			cContrato := jmedicoes[nc]['CND_CONTRA']
			cCompet   := jmedicoes[nc]['CND_COMPET']
			cRevisao  := ""
			nRecno    := 0

			//Posicionar no ultimo registro para obter a ultima revisao
			cAlias	:= "SELECT MAX(R_E_C_N_O_) RECNO FROM "+ RetSqlName("CN9") +" WHERE D_E_L_E_T_ = '' AND CN9_NUMERO = '"+cContrato+"' AND CN9_SITUAC = '05'

			cAlias	:= ChangeQuery(cAlias)
			PLSQuery(cAlias, "cQry")

			If ! cQry->(EoF())

				nRecno   := cQry->RECNO

				CN9->(DBSetOrder(1))//CN9_FILIAL+CN9_NUMERO+CN9_REVISA
				CN9->(dbGoto(nRecno))

				// Buscando a Competencia do Contrato
				aCompets		:= CtrCompets()
				nCompet			:= cValtoChar(aScan(aCompets, {|x| AllTrim(x) == cCompet }) )
				lSemifixo		:= IF(Posicione("CN1",1,FWxFILIAL("CN1")+CN9->CN9_TPCTO,"CN1_CTRFIX")=="3",.T.,.F.) //Contrato Semifixo
				lNfixo			:= IF(Posicione("CN1",1,FWxFILIAL("CN1")+CN9->CN9_TPCTO,"CN1_CTRFIX")=="2",.T.,.F.) //Contrato Não Fixo
				lFixo     		:= IF(Posicione("CN1",1,FWxFILIAL("CN1")+CN9->CN9_TPCTO,"CN1_CTRFIX")=="1",.T.,.F.) //Contrato Fixo
				cRevisao  		:= CN9->CN9_REVISA
				cGrAprov  		:= CN9->CN9_GRPAPR

				oModel := FWLoadModel("CNTA121")
				oModel:SetOperation(3)

				If (oModel:CanActivate())
					oModel:Activate()

					oModel:SetValue("CNDMASTER","CND_CONTRA"    ,CN9->CN9_NUMERO)
					oModel:SetValue("CNDMASTER","CND_APROV"     ,cGrAprov)
					oModel:SetValue("CNDMASTER","CND_RCCOMP"    ,nCompet)
					oModel:SetValue("CNDMASTER","CND_XIDINT"    ,xIDInteg)

					//GAP 201 - Gravar o jSon contabil para posterior gravacao na tabela SZ0 atraves de PE.
					If jmedicoes[nc]['CND_XRATEI']:HasProperty('contabil')

						cRateio := jMedicoes[1]['CND_XRATEI']:ToJson()

						If ! Empty(cRateio)
							oModel:SetValue("CNDMASTER","CND_XRATEI"	,cRateio)
						Endif
					Endif

					oModel:SetValue("CXNDETAIL","CXN_CHECK" 	, .T.)			//Marcar a planilha(nesse caso apenas uma)

					For nj := 1 to len(jmedicoes[nc]['itens'])

						cProduto := (jmedicoes[nc]['itens'][nj]['CNE_PRODUT'])
						nQuant   := (jmedicoes[nc]['itens'][nj]['CNE_QUANT'])
						nVlList  := (jmedicoes[nc]['itens'][nj]['CNE_VLUNIT'])

						cNumPlan := oMODEL:GETVALUE("CNEDETAIL","CNE_NUMERO")

						If jmedicoes[nc]['itens'][nj]:HasProperty('CNE_TS')
							cTes		:= (jmedicoes[nc]['itens'][nj]['CNE_TS'])
						Endif

						If jmedicoes[nc]['itens'][nj]:HasProperty('CNE_CC')
							cCCusto		:= (jmedicoes[nc]['itens'][nj]['CNE_CC'])
						Endif

						If jmedicoes[nc]['itens'][nj]:HasProperty('CNE_CONTA')
							cConta		:= (jmedicoes[nc]['itens'][nj]['CNE_CONTA'])
						Endif

						If lNfixo
							oModel:GetModel('CNEDETAIL'):LoadValue('CNE_ITEM', PadL(cValtoChar(nj), CNE->(Len(CNE_ITEM)), "0"))//Adiciona um item a planilha
							oModel:SetValue( 'CNEDETAIL' , 'CNE_PRODUT' , cProduto)
							oModel:SetValue( 'CNEDETAIL' , 'CNE_QUANT'  , nQuant)
							oModel:SetValue( 'CNEDETAIL' , 'CNE_VLUNIT' , nVlList)
							If ! Empty(cTes)
								oModel:SetValue( 'CNEDETAIL' , 'CNE_TS'     , cTes)
							Endif
							If ! Empty(cCCusto)
								oModel:SetValue( 'CNEDETAIL' , 'CNE_CC'     , cCCusto)
							Endif
							If ! Empty(cConta)
								oModel:SetValue( 'CNEDETAIL' , 'CNE_CONTA'  , cConta)
							Endif

						Else
							oModel:GetModel('CNEDETAIL'):GoLine(nj)
							oModel:SetValue( 'CNEDETAIL' , 'CNE_QUANT'		, nQuant)
							If lSemifixo
								oModel:SetValue( 'CNEDETAIL' , 'CNE_VLUNIT' , nVlList)
							Endif
							If ! Empty(cTes)
								oModel:SetValue( 'CNEDETAIL' , 'CNE_TS'     , cTes)
							Endif
							If ! Empty(cCCusto)
								oModel:SetValue( 'CNEDETAIL' , 'CNE_CC'     , cCCusto)
							Endif
							If ! Empty(cConta)
								oModel:SetValue( 'CNEDETAIL' , 'CNE_CONTA'  , cConta)
							Endif
						Endif

						If valtype(jmedicoes[nc]['itens'][nj]['multabonif']) <> 'U'
							For nK := 1 to len(jmedicoes[nc]['itens'][nj]['multabonif'])

								If nK == 1
									oModel:GetModel('CNRDETAIL2'):GoLine(nK)
								Else
									oModel:GetModel('CNRDETAIL2'):AddLine()
								Endif

								cMultp 	:= jmedicoes[nc]['itens'][nj]['multabonif'][nK]['CNR_TIPO']
								cMuldes	:= jmedicoes[nc]['itens'][nj]['multabonif'][nK]['CNR_DESCRI']
								cMulval	:= jmedicoes[nc]['itens'][nj]['multabonif'][nK]['CNR_VALOR']
								oModel:SetValue("CNRDETAIL2","CNR_TIPO"     , cMultp)//1=Multa/2=Bonificação
								oModel:SetValue("CNRDETAIL2","CNR_DESCRI"   , cMuldes)
								oModel:SetValue("CNRDETAIL2","CNR_VALOR"    , nMulval)
							Next nK
						Endif
					Next

					If (oModel:VldData())
						oModel:CommitData()
					EndIf

					If(oModel:HasErrorMessage())

						//Caso nao tenha sido gravada a medição, verifica o erro
						aMsgDeErro := oModel:GetErrorMessage()
						cMsgErro   := aMsgDeErro[6]
						cLogErro   += cContrato + ' ' +  "Erro: " + cMsgErro + CRLF
						lRet := .F.

						FreeObj(jAuxLog)
						jAuxLog             := JsonObject():New()
						jAuxLog["status"]   := "0"
						jAuxLog["idinteg"]  := ""
						jAuxLog["nomapi"]   := "POST_INCCONTR"
						jAuxLog["rotina"]   := "CNTA121"
						jAuxLog["tabela"]   := "CN9"
						jAuxLog["recno"]    := 0
						jAuxLog["data"]     := DToS(dDataBase)
						jAuxLog["hora"]     := Time()
						jAuxLog["msgresp"]  := "error"
						jAuxLog["msgerr"]   := cLogErro
						jAuxLog["jsonbod"]  := oRest:GetBodyRequest()
						jAuxLog["jsonret"]  := '{"result": "' + cLogErro + '"}'

						If !oLog:AddItem(jAuxLog)
							ConOut(oLog:GetError())
						EndIf
					Else
						cNumMed := CND->CND_NUMMED
						oModel:DeActivate()
						lRet := CN121Encerr(.T.) //Realiza o encerramento da medição
						If lRet

							cMsgOK  += cContrato + ' ' + "Medicao: " + cNumMed + " - " + cCompet + " - " + cRevisao + ' ' + 'Pedido: ' + SC7->C7_NUM + CRLF

							FreeObj(jAuxLog)
							jAuxLog     	   := JsonObject():New()
							jAuxLog["status"]  := "1"
							jAuxLog["idinteg"] := xIDInteg
							jAuxLog["nomapi"]  := "POST_INCMED"
							jAuxLog["rotina"]  := "CNTA121"
							jAuxLog["tabela"]  := "CND"
							jAuxLog["recno"]   := CND->(RecNo())
							jAuxLog["data"]    := DToS(dDataBase)
							jAuxLog["hora"]    := Time()
							jAuxLog["msgresp"] := "success"
							jAuxLog["msgerr"]  := ""
							jAuxLog["jsonbod"] := oRest:GetBodyRequest()
							jAuxLog["jsonret"] := '{"result": Medicao incluida com sucesso!!"}'

							If !oLog:AddItem(jAuxLog)
								ConOut(oLog:GetError())
							EndIf

						Else
							cMsgErro   := "Medicao não encerrada!"
							cLogErro   += cContrato + ' ' + "Medicao: " + cNumMed + " - " + cCompet + " - " + cRevisao + "Erro: " + cMsgErro + CRLF
							lRet := .F.

							FreeObj(jAuxLog)
							jAuxLog            := JsonObject():New()
							jAuxLog["status"]  := "0"
							jAuxLog["idinteg"] := xIDInteg
							jAuxLog["nomapi"]  := "POST_INCMED"
							jAuxLog["rotina"]  := "CNTA121"
							jAuxLog["tabela"]  := "CND"
							jAuxLog["recno"]   := CND->(RecNo())
							jAuxLog["data"]    := DToS(dDataBase)
							jAuxLog["hora"]    := Time()
							jAuxLog["msgresp"] := "success"
							jAuxLog["msgerr"]  := ""
							jAuxLog["jsonbod"] := oRest:GetBodyRequest()
							jAuxLog["jsonret"] := '{"result": Medicao não encerrada!!"}'

							If !oLog:AddItem(jAuxLog)
								ConOut(oLog:GetError())
							EndIf
						Endif
					EndIf
				Endif
			Else

				cMsgErro   := "Contrato nao encontrado ou nao esta vigente!"
				cLogErro   += cContrato + ' ' +  "Erro: " + cMsgErro + CRLF
				lRet := .F.

				FreeObj(jAuxLog)
				jAuxLog     := JsonObject():New()
				jAuxLog["status"]  := "0"
				jAuxLog["idinteg"] := xIDInteg
				jAuxLog["nomapi"]  := "POST_INCMED"
				jAuxLog["rotina"]  := "CNTA121"
				jAuxLog["tabela"]  := "CND"
				jAuxLog["recno"]   := CND->(RecNo())
				jAuxLog["data"]    := DToS(dDataBase)
				jAuxLog["hora"]    := Time()
				jAuxLog["msgresp"] := "success"
				jAuxLog["msgerr"]  := ""
				jAuxLog["jsonbod"] := oRest:GetBodyRequest()
				jAuxLog["jsonret"] := '{"result": Contrato não encontrado ou contrato não está vigente!!"}'

				If !oLog:AddItem(jAuxLog)
					ConOut(oLog:GetError())
				EndIf
			Endif
		next nC

	Catch oError

		cMsgErro	:= oError:Description
		cLogErro	+= cContrato + ' ' + "Erro: " + cMsgErro + CRLF
		lRet 		:= .F.
	EndTry

	FWRestArea(aArea)

Return(lRet)
