#include "totvs.ch"
#Include 'TopConn.ch'
#include "restful.ch"
#Include 'tlpp-core.th'
#Include 'tlpp-rest.th'

#Define cTitApp "Integração de Documentos Fluig para aprovação"

/*/{Protheus.doc} IntAprovFluig
Função para enviar aprovadores da tabela SCR para o Fluig via REST - GAP068
@type function
@author Junior Tiengo
@since 30/06/2025
@Param cTabela  C - SC7 = Pedido de Compras, SC1 = Solicitação de Compras, CN9 = Contrato, CND = Medição
@Param cTipo    C - SC = Solicitação de Compras, PC = Pedido de Compras, IP = Itens do PC, CT = Contrato, MD = Medição, 
@Param cNum     C - Número do Pedido de Compras, Solicitação de Compras, Contrato ou Medição
@Param cRevisao C - Revisão do Contrato (apenas para cTipo = CTR)
@Param cMed     C - Número da Medição (apenas para cTipo = MED)
/*/

User Function IntAprovFluig(cTabela, cTipo, cNum, cRevisao, cMed)

	Local oLog          := Nil                 		            as Object
	Local oError        := ErrorClass():New()     				as Object
	Local jAuxLog  		:= Nil                 		            as jSon

	TRY

		oLog 	:= CtrlLOG():New()
		jAuxLog := JsonObject():New()

		If ! oLog:SetTab("SZL")
			U_AdminMsg("["+FunName()+"] " + DToC(dDataBase) + " - " + Time() + " -> " + oLog:GetError(), IsBlind())
		EndIf

		If cTipo <> 'SCR'

			fEnviaFluig(cTabela, cTipo, cNum, cRevisao, cMed)

		Elseif cTipo == 'SCR'

			fAprovaFluig(cIdFluig)
		Endif

	CATCH oError

		U_AdminMsg("["+FunName()+"] " + DToC(Date()) + " - " + Time() + " -> " + oError:Description, IsBlind(), oError)

	ENDTRY

Return()

//Envia dados para o Fluig
Static Function fEnviaFluig(_nOpc, cTipo, cNum, cRevisao, cMed)

	Local cQuery		:= ""						            as Character
	Local cBody         := ""						            as Character
	Local oJSon         := JsonObject():New()		            as Object
	Local cLogErro      := ""						            as Character
	Local jAuxLog  		:= Nil                 		            as jSon
	Local oLog          := Nil                 		            as Object
	Local oError        := ErrorClass():New()     				as Object
	Local jSonRet		:= JsonObject():New()					as jSon
	Local nRecno		:= 0 									as Numeric
	Local nItem			:= 0 									as Numeric
	Local cAprov 		:= ''									as Character

	TRY

		oLog 	:= CtrlLOG():New()
		jAuxLog := JsonObject():New()

		If ! oLog:SetTab("SZL")
			U_AdminMsg("["+FunName()+"] " + DToC(dDataBase) + " - " + Time() + " -> " + oLog:GetError(), IsBlind())
		EndIf

		//Monta query para buscar aprovadores
		cQuery := " SELECT SCR.CR_FILIAL,                           "
		cQuery += "        SCR.CR_NUM,                              "
		cQuery += "        SCR.CR_TIPO,                             "
		cQuery += "        SCR.CR_USER,                             "
		cQuery += "        SCR.CR_APROV,                            "
		cQuery += "        SCR.CR_NIVEL,                            "
		cQuery += "        SCR.CR_STATUS                            "
		cQuery += "FROM " + RetSQLName("SCR") + " SCR               "
		cQuery += "WHERE SCR.D_E_L_E_T_ = ' '                       "
		cQuery += "AND SCR.CR_FILIAL = '" + FWxFilial("SCR") + "'   "
		cQuery += "AND SCR.CR_NUM = '" + cNum + "'                  "
		cQuery += "AND SCR.CR_TIPO = '" + cTipo + "'         		"
		cQuery += "ORDER BY SCR.CR_NIVEL ASC               			"

		cQuery := ChangeQuery(cQuery)
		cAlias := MPSysOpenQuery(cQuery)

		If (cAlias)->(EoF())
			ConOut("AprovFluig: Nenhum documento encontrado na SCR")
			Return()
		Endif

		nRecno 	:= &(cTipo)->(RecNo())

		Do Case

		Case cTipo == 'SC7'

			oJSon["targetState"]      					:= 2
			oJSon["subProcessTargetState"]				:= 0
			oJSon["comment"]							:= "Pedido de materiais de escritório"

			//Cria o objeto formFields
			oJSon["formFields"] := JsonObject():New()
			oJSon["formFields"]["tp_processo"]  		:= "FLUIG"
			oJSon["formFields"]["processo"]   			:= "PED"
			oJSon["formFields"]["aprovador"]   			:= PswChave((cAlias)->CR_USER)
			oJSon["formFields"]["status"]      			:= "Em Aprovação"
			oJSon["formFields"]["aprovado"]  			:= ""
			oJSon["formFields"]["dt_solicitacao"]   	:= SC7->C7_EMISSAO
			oJSon["formFields"]["quantidade_total"] 	:= xTotal(cNum,'quant')
			oJSon["formFields"]["valor_total"]      	:= xTotal(cNum,'total')
			oJSon["formFields"]["fornecedor_nome"]   	:= Alltrim(Posicione('SA2',1, FWxFilial("SA2") + SC7->C7_FORNECE + SC7->C7_LOJA, "A2_NOME"))

			// Percorre os itens da SC7 e adiciona ao JSON
			If SC7->(MSSeek(FWxFilial('SC7') + cNum)) //C7_FILIAL+C7_NUM+C7_ITEM+C7_SEQUEN

				While ! SC7->(EoF()) .and. FWxFilial("SC7") + cNum == SC7->C7_FILIAL + SC7->C7_NUM

					nItem ++
					oJSon["formFields"]["C7_ITEM___"    + cValtoChar(nItem)]   := SC7->C7_ITEM
					oJSon["formFields"]["C7_PRODUTO___" + cValtoChar(nItem)]   := SC7->C7_PRODUTO
					oJSon["formFields"]["C7_DESCRI___"  + cValtoChar(nItem)]   := Alltrim(SC7->C7_DESCRI)
					oJSon["formFields"]["C7_UM___"      + cValtoChar(nItem)]   := SC7->C7_UM
					oJSon["formFields"]["C7_QUANT___"   + cValtoChar(nItem)]   := SC7->C7_QUANT
					oJSon["formFields"]["C7_PRECO___"   + cValtoChar(nItem)]   := SC7->C7_PRECO
					oJSon["formFields"]["C7_TOTAL___"   + cValtoChar(nItem)]   := SC7->C7_TOTAL

					SC7->(DbSkip())
				EndDo
			Endif

		Case cTipo == 'SC1'

			oJSon["targetState"]      					:= 2
			oJSon["subProcessTargetState"]				:= 0
			oJSon["comment"]							:= "Solicitacao de Compras para aprovacao no Fluig"

			//Cria o objeto formFields
			oJSon["formFields"] := JsonObject():New()
			oJSon["formFields"]["tp_processo"]  		:= "FLUIG"
			oJSon["formFields"]["processo"]   			:= "SOLIC"
			oJSon["formFields"]["aprovador"]   			:= PswChave((cAlias)->CR_USER)
			oJSon["formFields"]["status"]      			:= "Em Aprovação"
			oJSon["formFields"]["aprovado"]  			:= ""
			oJSon["formFields"]["dt_solicitacao"]   	:= SC1->C1_EMISSAO
			oJSon["formFields"]["quantidade_total"] 	:= xTotal(cNum,'quant')
			oJSon["formFields"]["valor_total"]      	:= xTotal(cNum,'total')

			// Percorre os itens da SC1 e adiciona ao JSON
			If SC1->(MSSeek(FWxFilial('SC1') + cNum)) //C1_FILIAL+C1_NUM+C1_ITEM+C1_ITEMGRD

				While ! SC1->(EoF()) .and. FWxFilial("SC1") + cNum == SC1->C1_FILIAL + SC1->C1_NUM

					nItem ++
					oJSon["formFields"]["C1_ITEM___"    + cValtoChar(nItem)]   := SC1->C1_ITEM
					oJSon["formFields"]["C1_PRODUTO___" + cValtoChar(nItem)]   := SC1->C1_PRODUTO
					oJSon["formFields"]["C1_DESCRI___"  + cValtoChar(nItem)]   := Alltrim(SC1->C1_DESCRI)
					oJSon["formFields"]["C1_UM___"      + cValtoChar(nItem)]   := SC1->C1_UM
					oJSon["formFields"]["C1_QUANT___"   + cValtoChar(nItem)]   := SC1->C1_QUANT
					oJSon["formFields"]["C1_PRECO___"   + cValtoChar(nItem)]   := SC1->C1_PRECO
					oJSon["formFields"]["C1_TOTAL___"   + cValtoChar(nItem)]   := SC1->C1_TOTAL

					SC1->(DbSkip())
				EndDo
			Endif

		Case cTipo == 'CN9'

			oJSon["comment"] 						:= "Solicitação de Aprovação de Contrato: " + cNum

			oJSon["formFields"]["CN9_NUMERO"]		:= cNum
			oJSon["formFields"]["CN9_REVISA"]		:= cRevisao
			oJSon["formFields"]["CN9_VLATU"]		:= CN9->CN9_VLATU
			oJson["formFields"]["CN9_APROV"]		:= CN9->CN9_APROV
			oJSon["formFields"]["CNC_CODIGO"]		:= CNC->CNC_CODIGO
			oJSon["formFields"]["CNC_LOJA"]			:= CNC->CNC_LOJA
			oJSon["formFields"]["A2_NOME"]    		:= Alltrim(Posicione('SA2',1, FWxFilial("SA2") + CNC->CNC_CODIGO + CNC->CNC_LOJA, "A2_NOME"))

		Case cTipo == 'CND'

			oJSon["comment"] 						:= "Solicitação de Aprovação de Medição: " + cNum

			oJSon["formFields"]["CND_NUMMED"]		:= cNum
			oJSon["formFields"]["CND_CONTRA"]		:= CND->CND_CONTRA
			oJSon["formFields"]["CND_REVISA"]		:= CND->CND_REVISA
			oJSon["formFields"]["CND_COMPET"]		:= CND->CND_COMPET
			oJSon["formFields"]["CXN_PARCEL"]		:= CXN->CXN_PARCEL
			oJSon["formFields"]["CXN_FORNEC"]		:= CXN->CXN_FORNEC
			oJSon["formFields"]["CXN_LJFORN"]		:= CXN->CXN_LJFORN
			oJSon["formFields"]["CND_VLTOT"]   		:= CXN->CXN_VLTOT
		Endcase

		//Percorrer a query para montar os aprovadores
		cAprov := "["
		While ! (cAlias)->(EoF())

			//cAprov += '{ "nivel": "' + (cAlias)->CR_NIVEL + '", "usuario": "' + PswChave((cAlias)->CR_USER) + '" },'
			cAprov += '{ "nivel": ' + AllTrim(Str(Val((cAlias)->CR_NIVEL)))
			cAprov += '", "usuario": "' + PswChave((cAlias)->CR_USER) + '" },'

			(cAlias)->(dbSkip())
		EndDo

		//remove a último vírgula
		cAprov := Left(cAprov, Len(cAprov) - 1)
		cAprov += "]"

		//atribua a string completo ao objeto aprovadores.
		oJson["formFields"]["aprovacoes"] := cAprov

		//exporto o objeto JSON para uma string em formato JSON
		cBody := oJson:toJson()

		//Chamo a função RetFluigEng onde irá autenticar e enviar a requisição POST
		jSonRet := u_RetFluigEnv('POST',"/process-management/api/v2/processes/WKF_APROVACOES/start",cBody)

		//Se existir a propriedade processInstanceId, e porque o processo foi executado com sucesso
		If jSonRet:HasProperty("processInstanceId")

			FreeObj(jAuxLog)
			jAuxLog             := JsonObject():New()
			jAuxLog["status"]   := "1"
			jAuxLog["idinteg"]  := ""
			jAuxLog["nomapi"]   := "POST_EnvFluig"
			jAuxLog["rotina"]   := FunName()
			jAuxLog["tabela"]   := cTipo
			jAuxLog["recno"]    := nRecno
			jAuxLog["data"]     := DToS(dDataBase)
			jAuxLog["hora"]     := Time()
			jAuxLog["msgresp"]  := "success"
			jAuxLog["msgerr"]   := ""
			jAuxLog["jsonbod"]  := oJson
			jAuxLog["jsonret"]  := jSonRet

			If ! oLog:AddItem(jAuxLog)
				ConOut(oLog:GetError())
			EndIf

			Do Case
			Case cTabela == 'SC7'
				SC7->(DbSetOrder(1)) //C7_FILIAL+C7_NUM+C7_ITEM+C7_SEQUEN
				If SC7->(MSSeek(FWxFilial('SC7') + cNum)) //C7_FILIAL+C7_NUM+C7_ITEM+C7_SEQUEN
					While ! SC7->(EoF()) .and. FWxFilial("SC7") + cNum == SC7->C7_FILIAL + SC7->C7_NUM
						SC7->(Reclock("SC7", .F.))
						SC7->C7_XIDFLU := jSonRet['processInstanceId']
						SC7->(MsUnlock())
					EndDo
				Endif
			Case cTabela == 'SC1'
				SC1->(DbSetOrder(1)) //C1_FILIAL+C1_NUM
				If SC1->(MSSeek(FWxFilial('SC1') + cNum))
					While ! SC1->(EoF()) .and. FWxFilial("SC1") + cNum == SC1->C1_FILIAL + SC1->C1_NUM
						SC1->(Reclock("SC1", .F.))
						SC1->C7_XIDFLU := jSonRet['processInstanceId']
						SC1->(MsUnlock())
					EndDo
				Endif
			Case cTabela == 'CN9'
				CN9->(Reclock("CN9", .F.))
				CN9->CN9_XIDFLU := jSonRet['processInstanceId']
				CN9->(MsUnlock())
			Case cTabela == 'CND'
				CND->(Reclock("CND", .F.))
				CND->CND_XIDFLU := jSonRet['processInstanceId']
				CND->(MsUnlock())
			EndCase
		Else
			cLogErro   := jSonRet['message']

			FreeObj(jAuxLog)
			jAuxLog             := JsonObject():New()
			jAuxLog["status"]   := "0"
			jAuxLog["idinteg"]  := ""
			jAuxLog["nomapi"]   := "POST_EnvFluig"
			jAuxLog["rotina"]   := FunName()
			jAuxLog["tabela"]   := cTipo
			jAuxLog["recno"]    := nRecno
			jAuxLog["data"]     := DToS(dDataBase)
			jAuxLog["hora"]     := Time()
			jAuxLog["msgresp"]  := "error"
			jAuxLog["msgerr"]   := cLogErro
			jAuxLog["jsonbod"]  := oJson
			jAuxLog["jsonret"]  := jSonRet

			If ! oLog:AddItem(jAuxLog)
				ConOut(oLog:GetError())
			EndIf
		EndIf

	CATCH oError

		U_AdminMsg("["+FunName()+"] " + " - " + Time() + " -> " + oError:Description, IsBlind(), oError)

	ENDTRY

Return()

/*/{Protheus.doc} IntCancFluig
Função para enviar o cancelamento para o Fluig via REST - GAP068
@type function
@author Junior Tiengo
@since 30/06/2025
@Param cTabela  C - Tabela que está posicionada
@Param cIdFluig C - ID do Fluig 
@Param nRecno   N - Número da linha da tabela
/*/

User Function IntCancFluig(cTabela, cIDFluig, nRecno)

	Local oJsonCanc 	:= JsonObject():New()                  	as Object
	Local lCancela    	:= .T.                                  as Logical
	Local cBody		 	:= ''					            	as Character
	Local oError        := ErrorClass():New()     				as Object
	Local oLog          := Nil                 		            as Object
	Local jAuxLog  		:= Nil                 		            as jSon

	TRY

		oLog 	:= CtrlLOG():New()
		jAuxLog := JsonObject():New()

		If ! oLog:SetTab("SZL")
			U_AdminMsg("["+FunName()+"] " + DToC(dDataBase) + " - " + Time() + " -> " + oLog:GetError(), IsBlind())
		EndIf

		//Montando o Body do cancelamento
		oJsonCanc["processInstanceId"] := cIDFluig
		oJsonCanc["cancelText"]        := "Solicitação Cancelada Automaticamente pelo ERP Protheus"
		oJsonCanc["replacedId"]        := 'cdig_publica_key'

		cBody := oJsonCanc:toJson()

		//exporto o objeto JSON para uma string em formato JSON
		cBody := oJsonCanc:toJson()

		//Chamo a função RetFluigEng onde irá autenticar e enviar a requisição POST
		jSonRet := u_RetFluigEnv('POST',"/api/public/2.0/workflows/cancelInstance",cBody)

		//Se existir a propriedade processInstanceId, e porque o processo foi executado com sucesso
		If jSonRet["content"]["status"] == "SUCCESS"

			FreeObj(jAuxLog)
			jAuxLog             := JsonObject():New()
			jAuxLog["status"]   := "1"
			jAuxLog["idinteg"]  := ""
			jAuxLog["nomapi"]   := "POST_CancFluig"
			jAuxLog["rotina"]   := FunName()
			jAuxLog["tabela"]   := cTabela
			jAuxLog["recno"]    := nRecno
			jAuxLog["data"]     := DToS(dDataBase)
			jAuxLog["hora"]     := Time()
			jAuxLog["msgresp"]  := "success"
			jAuxLog["msgerr"]   := ""
			jAuxLog["jsonbod"]  := oJsonCanc
			jAuxLog["jsonret"]  := jSonRet

			If ! oLog:AddItem(jAuxLog)
				ConOut(oLog:GetError())
			EndIf
		Else
			cLogErro   := DecodeUTF8(jSonRet["content"]['message'], "cp1252")

			FreeObj(jAuxLog)
			jAuxLog             := JsonObject():New()
			jAuxLog["status"]   := "0"
			jAuxLog["idinteg"]  := ""
			jAuxLog["nomapi"]   := "POST_CancFluig"
			jAuxLog["rotina"]   := FunName()
			jAuxLog["tabela"]   := cTabela
			jAuxLog["recno"]    := nRecno
			jAuxLog["data"]     := DToS(dDataBase)
			jAuxLog["hora"]     := Time()
			jAuxLog["msgresp"]  := "error"
			jAuxLog["msgerr"]   := cLogErro
			jAuxLog["jsonbod"]  := oJsonCanc
			jAuxLog["jsonret"]  := jSonRet

			If ! oLog:AddItem(jAuxLog)
				ConOut(oLog:GetError())
			EndIf

			lCancela := .F.

		EndIf

	CATCH oError

		U_AdminMsg("["+FunName()+"] " + DToC(Date()) + " - " + Time() + " -> " + oError:Description, IsBlind(), oError)

	ENDTRY

Return(lCancela)

//Aprovação de processo Fluig 
Static Function fAprovaFluig(_nOpc, cIdFluig)

	Local cBody         := ""						            as Character
	Local oAprov        := Nil                                  as Object
	Local cLogErro      := ""						            as Character
	Local jAuxLog  		:= Nil                 		            as jSon
	Local oLog          := Nil                 		            as Object
	Local oError        := ErrorClass():New()     				as Object
	//Local cProcAprov    := GetNewPar('EZ_XTARGA'   ,'')        	as Character //irá informar para qual atividade deverá ser movimentado o processo do Fluig em caso de aprovação
	//Local cProcReprv    := GetNewPar('EZ_XTARGR'   ,'')        	as Character //irá informar para qual atividade deverá ser movimentado o processo do Fluig em caso de reprovação
	Local jSonRet		:= JsonObject():New()					as jSon

	TRY

		oLog := CtrlLOG():New()

		If ! oLog:SetTab("SZL")

			U_AdminMsg("["+FunName()+"] " + DToC(dDataBase) + " - " + Time() + " -> " + oLog:GetError(), IsBlind())
		EndIf

		//Só irá processar se a operação for 1 e 5 (1-Aprovar, 2-Estornar, 3-Aprovar pelo Superior, 4-Transferir para Superior, 5-Rejeitar, 6-Bloquear)
		If _nOpc == 1 .or. _nOpc == 5
			oAprov 								:= JsonObject():New()
			oAprov["processInstanceId"]      	:= 872
			oAprov["cancelText"]              	:= "Solicitação Cancelada Automaticamente pelo Protheus via API"
			oAprov["replacedId"]           		:= "integrador"

			//Chama a função para autenticar e enviar o POST
			cBody := oAprov:toJson()
			jSonRet := u_RetFluigEnv('POST',"'/v2/requests/"+cIdFluig+"/move'",cBody) // Chama a função para obter o token e enviar o POST

			If jSonRet:HasProperty("processInstanceId")

				FreeObj(jAuxLog)
				jAuxLog             := JsonObject():New()
				jAuxLog["status"]   := "1"
				jAuxLog["idinteg"]  := ""
				jAuxLog["nomapi"]   := "POST_AprovaFluig"
				jAuxLog["rotina"]   := FunName()
				jAuxLog["tabela"]   := 'SCR'
				jAuxLog["recno"]    := SCR->(RecNo())
				jAuxLog["data"]     := DToS(dDataBase)
				jAuxLog["hora"]     := Time()
				jAuxLog["msgresp"]  := "success"
				jAuxLog["msgerr"]   := ""
				jAuxLog["jsonbod"]  := jSonRet
				jAuxLog["jsonret"]  := '{"result": Post Gerado com sucesso!"}'

				If ! oLog:AddItem(jAuxLog)
					ConOut(oLog:GetError())
				EndIf
			Else
				cLogErro   := jSonRet['message']

				FreeObj(jAuxLog)
				jAuxLog             := JsonObject():New()
				jAuxLog["status"]   := "0"
				jAuxLog["idinteg"]  := ""
				jAuxLog["nomapi"]   := "POST_AprovaFluig"
				jAuxLog["rotina"]   := FunName()
				jAuxLog["tabela"]   := 'SCR'
				jAuxLog["recno"]    := SCR->(RecNo())
				jAuxLog["data"]     := DToS(dDataBase)
				jAuxLog["hora"]     := Time()
				jAuxLog["msgresp"]  := "error"
				jAuxLog["msgerr"]   := cLogErro
				jAuxLog["jsonbod"]  := jSonRet
				jAuxLog["jsonret"]  := jSonRet

				If ! oLog:AddItem(jAuxLog)
					ConOut(oLog:GetError())
				EndIf

				U_AdminMsg("["+FunName()+"] " + DToC(Date()) + " - " + Time() + " -> " + cLogErro, IsBlind())
			Endif
		Endif

	CATCH oError

		U_AdminMsg("["+FunName()+"] " + " - " + Time() + " -> " + oError:Description, IsBlind(), oError)

	ENDTRY

Return()

/*/{Protheus.doc} xIDInt
Função para retornar o total da nota na TAG do XML
@type function
@version  
@author Tiengo Junior
@since 29/07/2025
@return variant, return_description
/*/
Static Function xTotal(cNum,cTipo)

	Local nRet			:= 0
	Local cQuery 		:= ""
	Local cAlias		:= ""

	cQuery += "SELECT SUM(C1_TOTAL) TOTAL, SUM(C1_QUANT) QUANT FROM " + RetSqlName("SC1") + " WHERE D_E_L_E_T_ = ' ' AND C1_NUM = '" + cNum + "'"
	cQuery += "UNION ALL "
	cQuery += "SELECT SUM(C7_TOTAL) TOTAL, SUM(C7_QUANT) QUANT FROM " + RetSqlName("SC7") + " WHERE D_E_L_E_T_ = ' ' AND C7_NUM = '" + cNum + "'"

	cQuery := ChangeQuery(cQuery)
	cAlias := MPSysOpenQuery(cQuery)

	If ! (cAlias)->(EoF())
		If cTipo == 'quant'
			nRet := (cAlias)->QUANT
		Else
			nRet := (cAlias)->TOTAL
		Endif
	Endif

	(cAlias)->(dbCloseArea())

Return(nRet)
