#include 'ABSENT.CH'
#Include 'rwMake.ch'

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³ ABSENT   ³ Autor ³ Alexsandro Pereira    ³ Data ³ 15.05.00 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Absenteismo                                                ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ Absent(void)                                               ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³                                                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ Generico                                                   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³         ATUALIZACOES SOFRIDAS DESDE A CONSTRU€AO INICIAL.             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Programador ³ Data   ³ BOPS ³  Motivo da Alteracao                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³            ³        ³      ³                                          ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
User Function Absent()
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Define Variaveis Locais (Basicas)                            ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
Local cDesc1  := STR0001  // 'Absenteismo'
Local cDesc2  := STR0002  // 'Ser  impresso de acordo com os parametros solicitados pelo'
Local cDesc3  := STR0003  // 'usuario.'
Local cString := 'SRA' //-- Alias do arquivo principal (Base)
Local aOrd    := {STR0004 , STR0005 , STR0006 , STR0007 , STR0030 } // 'Matricula'###'Centro de Custo'###'Nome'###'Turno'###'C.Custo+Nome'
Local wnRel

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Define Variaveis PRIVATE(Basicas)                            ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
Private aReturn    := { STR0008 , 1, STR0009 , 2, 2, 1, '',1 } // 'Zebrado'###'Administra‡„o'
Private nomeprog   := 'ABSENT'
Private aLinha     := {}
Private nLastKey   := 0
Private cPerg      := 'ABSENT'
Private nPagAtu    := 1

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Verifica as perguntas selecionadas                           ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
Pergunte('ABSENT',.F.)

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Variaveis Utilizadas na funcao IMPR                          ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
Private Titulo   := OemToAnsi(STR0001 ) // 'Absenteismo'
Private cCabec   := ''
Private AT_PRG   := 'ABSENT'
Private wCabec0  := 1
Private wCabec1  := STR0011  //'Matric Nome                  Periodo  Hrs.Prev.  Hrs.Real     %  (1)Hrs.Adic.     %  (2)Hrs.N.Trab.     %  (3)Hrs.Abonadas     %   '
Private CONTFL   := 1
Private LI       := 0 
Private nTamanho := 'M'

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Define Variaveis Private(Programa)                           ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
Private nOrdem

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Variaveis utilizadas para parametros                         ³
//³ mv_par01 - Filial De           ?                             ³
//³ mv_par02 - Filial Ate          ?                             ³
//³ mv_par03 - Centro de Custo De  ?                             ³
//³ mv_par04 - Centro de Custo Ate ?                             ³
//³ mv_par05 - Turno De            ?                             ³
//³ mv_par06 - Turno Ate           ?                             ³
//³ mv_par07 - Matricula De        ?                             ³
//³ mv_par08 - Matricula Ate       ?                             ³
//³ mv_par09 - Nome De             ?                             ³
//³ mv_par10 - Nome Ate            ?                             ³
//³ mv_par11 - Situacoes a Impr.   ?                             ³
//³ mv_par12 - Categorias a Impr.  ?                             ³
//³ mv_par13 - C.C. em Outra Pag.  ? Sim/Nao                     ³
//³ mv_par14 - Data De             ?                             ³
//³ mv_par15 - Data Ate            ?                             ³
//³ mv_par16 - Discrimina Eventos  ? Sim/Nao                     ³
//³ mv_par17 - Analitico/Sintetico ? Analitico/Sintetico         ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Envia controle para a funcao SETPRINT                        ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
wnrel := 'ABSENT' //-- Nome Default do relatorio em Disco
wnrel := SetPrint(cString,wnrel,cPerg,@Titulo,cDesc1,cDesc2,cDesc3,.F.,aOrd,,nTamanho)

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Carregando variaveis mv_par?? para Variaveis do Sistema.     ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
nOrdem     := aReturn[8]
cFilDe     := mv_par01
cFilAte    := mv_par02
CcDe       := mv_par03
CcAte      := mv_par04
TurDe      := mv_par05
TurAte     := mv_par06
MatDe      := mv_par07
MatAte     := mv_par08
NomDe      := mv_par09
NomAte     := mv_par10
cSit       := mv_par11
cCat       := mv_par12
lCC        := If(mv_par13 == 1,.T.,.F.)
dDataDe    := mv_par14
dDataAte   := mv_par15
lSintetico := If(mv_par16 == 1,.F.,.T.)
lDiscri    := If(mv_par17 == 1,.T.,.F.)

If	nLastKey == 27
	Return Nil
Endif

SetDefault(aReturn,cString)

If nLastKey == 27
	Return Nil
Endif

cCabec := STR0001+' '+Transf(dDataDe,'@E')+' - '+Transf(dDataAte,'@E')  // 'Absenteismo'

Titulo := OemToAnsi(cCabec)
RptStatus({|lEnd| ABSENTImp(@lEnd,wnRel,cString)},Titulo)

Return Nil

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³ABSENTImp ³ Autor ³ Alexsandro Pereira    ³ Data ³ 15.05.00 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³ Absenteismo                                                ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe e ³ ABSENTImp(lEnd,wnRel,cString)                              ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³                                                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ Gen‚rico                                                   ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Static Function ABSENTImp(lEnd,WnRel,cString)

//-- Variaveis Locais
Local cDet         := ''				//-- Linha de detalhe da impressao
Local cSeqAnt      := '  '				//-- Sequencia anterior
Local nX           := 0					//-- Variavel de loop for
Local aAbon        := {}				//-- Itens de abono
Local aNTra        := {}				//-- Itens de hrs nao trabalhadas
Local aAdic        := {}				//-- Itens de hrs adicionais
Local aCodHeAut    := {}				//-- Codigos de hora extra autorizada
Local aCodAbat     := {}				//-- Codigos de horas nao trabalhadas
Local aTabCalend   := {}				//-- Calendario de trabalho
Local aTurnos      := {}				//-- Trocas de turno do periodo
Local aPeriodos    := {}				//-- Periodos a imprimir
Local cColuna01    := ''				//-- Detalhe da coluna 1 do relatorio
Local cColuna02    := ''				//-- Detalhe da coluna 2 do relatorio
Local cColuna03    := ''				//-- Detalhe da coluna 3 do relatorio
Local cAlias       := 'SPC'				//-- Alias do arquivo a partir do qual os lancamentos serao lidos
Local nHrsPrev     := 0					//-- Horas previstas
Local nHrsReal     := 0					//-- Horas reais
Local nPReal       := 0					//-- Percentual horas reais
Local nHrsAdic     := 0					//-- Horas adicionais
Local nPAdic       := 0					//-- Percentual horas adicionais
Local nHrsnTra     := 0					//-- Horas nao trabalhadas
Local nPNTra       := 0					//-- Percentual horas nao trabalhadas
Local nHrsAbon     := 0					//-- Horas abonadas
Local nPAbo        := 0					//-- Percentual horas abonadas
Local dPerIni      := Ctod("  /  /  ")	//-- Data de inicio do periodo
Local dPerFim      := Ctod("  /  /  ")	//-- Data fim do periodo
Local cAcessaSRA   := &("{ || " + ChkRH("ABSENT","SRA","2") + "}")

Private cFilAnte   := ''				//-- Filial anterior
Private cTnoAnt    := ''				//-- Turno anterior
Private cCcAnt     := ''				//-- Centro de custo anterior
Private aTabPadrao := {}				//-- Tabela de horario padrao
Private aAdicT     := {}					//-- Totalizador hrs adicionais turno
Private aNTraT     := {}					//-- Totalizador hrs nao trab. turno
Private aAbonT     := {}					//-- Totalizador hrs abonadas turno
Private aAdicC     := {}					//-- Totalizador hrs adicionais centro de custo
Private aNTraC     := {}					//-- Totalizador hrs nao trabalhadas centro de custo
Private aAbonC     := {}					//-- Totalizador hrs abonadas centro de custo
Private aAdicF     := {}					//-- Totalizador hrs adicionais filial
Private aNTraF     := {}					//-- Totalizador hrs nao trabalhadas filial
Private aAbonF     := {}					//-- Totalizador hrs abonadas filial
Private aAdicE     := {}					//-- Totalizador hrs adicionais empresa
Private aNTraE     := {}					//-- Totalizador hrs nao trabalhadas empresa
Private aAbonE     := {}					//-- Totalizador hrs abonadas empresa
Private aTotalF    := {}
Private aTotalE    := {}
Private aTotalC    := {}
Private aTotalT    := {}

//-- Define o periodo de apura‡„o, de acordo com MV_PAPONTA
If !PerAponta(@dPerIni,@dPerFim)
	HELP(' ',1,'PERNCAD')
	Return Nil
Endif

//-- aPeriodos
//-- [n,1] - data inicio do periodo.
//-- [n,2] - data termino do periodo.
//-- [n,3] - data inicio do acumulo dos dados dentro do periodo.
//-- [n,4] - data fim do acumulo dos dados dentro do periodo.

//-- Identifica os periodos a serem impressos e armazena em aPeriodos
If Len((aPeriodos := Monta_Per(dDataDe,dDataAte))) == 0
	HELP(' ',1,'PERNCAD')
	Return Nil
Endif

//-- Carga da tabela de horario padrao
If !fTabTurno(aTabPadrao)
	Help(' ',1,'TPADNCAD')
	Return Nil
EndIf

//-- Posiciona registro inicial de acordo com de/ate
dbSelectArea('SRA')
dbGoTop()
dbSetOrder(nOrdem)
If nOrdem == 1
	dbSeek(cFilDe + MatDe,.T.)
	cInicio := 'SRA->RA_FILIAL + SRA->RA_MAT'
	cFim    := cFilAte + MatAte
ElseIf nOrdem == 2
	dbSeek(cFilDe + CcDe + MatDe,.T.)
	cInicio := 'SRA->RA_FILIAL + SRA->RA_CC + SRA->RA_MAT'
	cFim    := cFilAte + CcAte + MatAte
ElseIf nOrdem == 3
	dbSeek(cFilDe + NomDe + MatDe,.T.)
	cInicio := 'SRA->RA_FILIAL + SRA->RA_NOME + SRA->RA_MAT'
	cFim    := cFilAte + NomAte + MatAte
ElseIf nOrdem == 4
	dbSeek(cFilDe + TurDe,.T.)
	cInicio := 'SRA->RA_FILIAL + SRA->RA_TNOTRAB'
	cFim    := cFilAte + TurAte
ElseIf nOrdem == 5
	dbSetOrder(8)
	dbSeek(cFilDe + CcDe + NomDe,.T.)
	cInicio  := 'SRA->RA_FILIAL + SRA->RA_CC + SRA->RA_NOME'
	cFim     := cFilAte + CcAte + NomAte
Endif

//-- Inicializa regua de processamento
SetRegua(SRA->(RecCount()))

While SRA->(!Eof()) .And. &cInicio <= cFim

	//-- Incrementa regua de processamento
	IncRegua()

	//-- Cancelamento de impressao pelo usuario
	If lEnd
		Impr(cCancela,'C')
		Exit
	EndIF

	//-- Consiste Parametrizacao do Intervalo de Impressao
	If (SRA->RA_DEMISSA < dPerIni .And. !Empty(SRA->RA_DEMISSA)) .Or. ;
		(SRA->RA_TNOTRAB < TurDe) .Or. (SRA->RA_TNOTRAB > TurAte) .Or. ;
		(SRA->RA_NOME < NomDe) .Or. (SRA->RA_NOME > NomAte) .Or. ;
		(SRA->RA_MAT < MatDe) .Or. (SRA->RA_MAT > MatAte) .Or. ;
		(SRA->RA_CC < CcDe) .Or. (SRA->RA_CC > CCAte) .Or. ;
		Empty(SRA->RA_CRACHA)
		fCabTotal()
		Loop
	Endif

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Consiste controle de acessos e filiais validas               ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If !(SRA->RA_FILIAL $ fValidFil()) .Or. !Eval(cAcessaSRA)
		fCabTotal()
		Loop
	EndIf

	//-- Processa a Quebra de Filial
	If SRA->RA_FILIAL # cFilAnte
		//-- Dados da empresa/filial
		aInfo := {}
		fInfo(@aInfo, SRA->RA_Filial)

		//-- Carrega os codigos de adicionais (Horas Extras)
		fCarCodHe(@aCodHeAut)
		//-- Carrega os codigos de horas nao trabalhadas
		fCarCodAbat(@aCodAbat)
		cFilAnte := SRA->RA_FILIAL
		cCcAnt := SRA->RA_CC
	Endif

	//-- Processa a Quebra de Turno
	If cTnoAnt+cSeqAnt # SRA->RA_TNOTRAB+SRA->RA_SEQTURN
		//-- Carrega os codigos de adicionais ( Horas extras )
		fCarCodHe(@aCodHeAut)
		//-- Carrega os codigos de horas nao trabalhadas
		fCarCodAbat(@aCodAbat)
		cSeqAnt := SRA->RA_SEQTURN
		cTnoAnt := SRA->RA_TNOTRAB
	Endif

	//-- Monta o Array aImp com as ocorrˆncias do per¡odo
	aImp := {}

	For nX := 1 To Len(aPeriodos)

		cSeqTurn := '**'

		//-- Chamada a fTrocaTno() para identificar o turno correto a ser passado para retseq.
		fTrocaTno(aPeriodos[nX,1], aPeriodos[nX,2], @aTurnos)

		cSeqTurn := SRA->RA_SEQTURN
		cTno     := If(Len(aTurnos)==0,SRA->RA_TNOTRAB,aTurnos[1,1])

		//-- Se periodo for anterior ao atual arquivo de trabalho sera SPH
		If aPeriodos[nX,1] >= dPerIni .And. aPeriodos[nX,2] <= dPerFim
			cAlias := 'SPC'
			Else

			cAlias := 'SPH'
			//-- Calcula a sequencia inicial do periodo retroativo
			//cSeqTurn := RetSeq(cSeqTurn,cTno,aPeriodos[nX,1],dPerIni-1,dDataBase,aTabPadrao)
		Endif

		//-- Monta calendario com horarios de trabalho
		If !CriaCalend( aPeriodos[nX,1],aPeriodos[nX,2],cTno,cSeqTurn,aTabPadrao,@aTabCalend,SRA->RA_FILIAL,SRA->RA_MAT,SRA->RA_CC,@aTurnos)
			SRA->(dbSkip())
			fCabTotal()
			Loop
		EndIf

		//-- Apura as horas trabalhadas a partir do calendario de trabalho
		nHrsPrev := fHrsPrev(aTabCalend)
		//-- Apura as horas adicionais a partir do SPC e/ou SPH
		nHrsAdic := fSomaHrs(aCodHeAut,@aAdic,aPeriodos[nX,3],aPeriodos[nX,4],cAlias)
		//-- Apura as horas nao trabalhadas a partir do SPC e/ou SPH
		nHrsnTra := fSomaHrs(aCodAbat ,@aNTra,aPeriodos[nX,3],aPeriodos[nX,4],cAlias)
		//-- Apura as horas abonadas
		nHrsAbon := fHrsAbon(aPeriodos[nX,3],aPeriodos[nX,4],@aAbon)

		//-- Apura as horas efetivamente trabalhasdas ( previstas - nao trab )
		nHrsReal := SubHoras(nHrsPrev,nHrsnTra)
		//-- Percentual de horas reais x previstas
		nPReal   := (fConvHr(nHrsReal,'D') / fConvHr(nHrsPrev,'D')) * 100
		//-- Percentual de horas extras x previstas
		nPAdic   := (fConvHr(nHrsAdic,'D') / fConvHr(nHrsPrev,'D')) * 100
		//-- Percentual de horas nao trabalhadas x previstas
		nPNTra   := (fConvHr(nHrsnTra,'D') / fConvHr(nHrsPrev,'D')) * 100
		//-- Percentual de horas abonadas x horas nao trabalhadas
		nPAbo    := (fConvHr(nHrsAbon,'D') / fConvHr(nHrsnTra,'D')) * 100

		//-- Monta array de impressao
		If ! lSintetico
			AAdd(aImp, If(nX==1,SRA->RA_MAT+Space(01)+Left(SRA->RA_NOME,20),Space(27))+'  '+StrZero(Month(aPeriodos[nX,2]),2)+'/'+Transf(Year(aPeriodos[nX,2]),'9999')+'  '+Transf(nHrsPrev, "@E 999.99")+;
			Space(05)+Transf(nHrsReal, "@E 999.99")+Space(02)+Transf(nPReal,"@E 999.99")+;
			Space(03)+Transf(nHrsAdic, "@E 999.99")+Space(05)+Transf(nPAdic,"@E 999.99")+;
			Space(05)+Transf(nHrsnTra, "@E 999.99")+Space(05)+Transf(nPNTra, "@E 999.99")+;
			Space(05)+Transf(nHrsAbon, "@E 999.99")+Space(06)+Transf(nPAbo, "@E 999.99"))
		Endif

		//-- Acumula os totais dos itens por filial/centro de custo/turno
		fMontaTot(aAdic,aNTra,aAbon,nHrsPrev,nHrsReal,nHrsAdic,nHrsnTra,nHrsAbon,aPeriodos[nX,2],nPReal, nPAdic, nPNTra, nPAbo)

	Next nX

	//-- Espacamento de uma linha apos a linha de informacoes
	AAdd(aImp, '')

	//-- Emite resumo com a dicriminacao das horas
	nX := 0
	If lDiscri .And. !lSintetico .And. (Len(aAdic)+Len(aNTra)+Len(aAbon)) > 0
		AAdd(aImp, STR0010) //'(1) Descricao                  Horas      % (2) Descricao                  Horas      %  (3) Descricao                  Horas      %'
		For nX := 1 To Max(Max(Len(aAdic), Len(aNTra)),Len(aAbon))
			cColuna01 := If(nX<=Len(aAdic),aAdic[nX,1]+Space(02)+Left(aAdic[nX,2],20)+Space(01)+Transf(aAdic[nX,3],"@E 999.99")+Space(01)+Transf(aAdic[nX,4],"@E 999.99"),Space(39))
			cColuna02 := If(nX<=Len(aNTra),aNTra[nX,1]+Space(02)+Left(aNTra[nX,2],20)+Space(01)+Transf(aNTra[nX,3],"@E 999.99")+Space(01)+Transf(aNTra[nX,4],"@E 999.99"),Space(39))
			cColuna03 := If(nX<=Len(aAbon),aAbon[nX,1]+Space(02)+Left(aAbon[nX,2],20)+Space(01)+Transf(aAbon[nX,3],"@E 999.99")+Space(01)+Transf(aAbon[nX,4],"@E 999.99"),Space(39))
			AAdd(aImp, Space(04)+cColuna01+Space(05)+cColuna02+Space(06)+cColuna03)
		Next nX
	Endif

	//-- Reinicializa variaveis de lancamentos
	aAdic := {}
	aNTra := {}
	aAbon := {}

	//-- Imprime funcionarios                                         ³
	fImpFun(@aImp)

	//-- Imprime cabecalho
	fCabTotal()

EndDo

//-- Totaliza centro de custo/turno
fTotais(nOrdem)

//-- Totaliza filial
fTotais(3)

//-- Totaliza empresa
fTotais(0)

//-- Termino do relatorio
If Li > 0
	Impr('','F')
Endif

Set Device To Screen
If aReturn[5] == 1
	Set Printer To
	Commit
	OurSpool(wnrel)
Endif
MS_FLUSH()

*---------------------------*
Static Function fCabTotal()
*---------------------------*
dbSelectArea( "SRA" )
dbSkip()

nPagAtu := ContFl

Return Nil

*-------------------------------------------*
Static Function fImpFun(aFun)            // Imprime um Funcionario e Executa Quebras
*-------------------------------------------*

If	Len(aFun) == 0
	Return Nil
Endif

If cCcAnt # SRA->RA_CC .And. !Eof() .And. (nOrdem == 2 .Or. nOrdem == 5)				// Quebra p/ C.Custo
	fImprime({},2)
Elseif cTnoAnt # SRA->RA_TNOTRAB .And. !Eof() .And. nOrdem == 4 // Quebra p/ Turno
	fImprime({},4)
ElseIf cFilAnte # SRA->RA_FILIAL .And. !Eof()							// Quebra p/ Filial
	fImprime({},3)
Endif

cFilAnte:= SRA->RA_FILIAL
cCcAnt  := SRA->RA_CC
cTnoAnt := SRA->RA_TNOTRAB

fImprime(aFun,1)
aFun := {}

Return Nil

*-----------------------------------------------*
Static Function fImprime(aFun,nTipo)
*-----------------------------------------------*
// nTipo: 1- Funcionario
//        2- Centro de Custo
//        3- Filial
//        4- Turno

Local Det    := ""
Local nConta := 0
Local nPre   := 0

If nTipo == 2	// Salta pagina a cada Centro de Custo

	If lCC .And. !Empty(cCcAnt)
		fPNR040Linha(2,,"P")
		//-- Imprime os totais na quebra
	Else
		fPNR040Linha(2)
		//-- Imprime os totais na quebra
	Endif
	fTotais(nTipo)

ElseIf nTipo == 3	// Salta pagina a cada Filial

	//-- Imprime os totais na quebra
	fTotais(nTipo)

	If nOrdem == 2 .Or. nOrdem == 4 .Or. nOrdem == 5
		fPNR040Linha(nOrdem,,"P")
	Else
		fPNR040Linha(3,,"P")
	Endif
ElseIf nTipo == 4	// Salta pagina a cada Filial

	//-- Imprime os totais na quebra
	fTotais(nTipo)

	fPNR040Linha(4)	// Imprime cabecalho do Turno
Endif

If nTipo == 1 .And. !lSintetico
	For nPre := 1 to Len(aFun)
		If Li >= 57
			If nOrdem == 2	.Or. nOrdem == 4 .Or. nOrdem == 5 // - Centro de Custo ou Turno de Trab
				fPNR040Linha(nOrdem,,"P")
			Else
				fPNR040Linha(3,,"P")
			Endif
			Loop
		Endif
		fPNR040Linha(1,aFun[nPre])
	Next nPre
	fPNR040Linha(1,Replicate("-",132))
Endif
Return Nil

*-------------------------------------------*
Static Function fPNR040Linha(nTipo,Det,cPara)	// Imprime cabecalhos
*-------------------------------------------*
Local cDet:=""

nTipo := If(nTipo==NIL,0,nTipo)
cPara := If(cPara==Nil,"C",cPara)

If Li >= 57 .Or. cPara == "P"
	Impr("","P")
Endif

If nTipo == 1
	Impr(Det,"C")
ElseIf nTipo > 0
	If nTipo == 2 .Or. nTipo == 5 .Or. nPagAtu <> ContFl
		cDet := Replic('*',132)
	Elseif nTipo == 3 .Or. nPagAtu <> ContFl
		cDet:= STR0030+SRA->RA_FILIAL // 'Filial: '
	Elseif nTipo == 4 .Or. nPagAtu <> ContFl
		cDet:= STR0027+SRA->RA_FILIAL+STR0014+SRA->RA_TNOTRAB+FDescTno(SRA->RA_FILIAL,SRA->RA_TNOTRAB)		//"Filial: "###" Turno: "
	Endif
	Impr(cDet,"C")
	Impr(Replicate("-",132),"C")
Endif
nPagAtu := ContFl
Return Nil
/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³ fCarCodHe³ Autor ³                       ³ Data ³          ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³                                                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe e ³                                                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³                                                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³                                                            ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±*/
Static Function fCarCodHe(aCodHeAut)

Local lRet := .T.
Local cKey := ''

If SP4->(dbSeek(SRA->RA_FILIAL + SRA->RA_TNOTRAB, .F.)) .Or. ;
	SP4->(dbSeek(SRA->RA_FILIAL, .F.))
	aCodHeAut := {}
	cKey  := SP4->P4_FILIAL + SP4->P4_TURNO
	While !SP4->(Eof()) .And. SP4->P4_FILIAL + SP4->P4_TURNO == cKey
		If Len(aCodHeAut) == 0 .Or. Ascan(aCodHeAut, SP4->P4_CODAUT) == 0
			aAdd(aCodHeAut, SP4->P4_CODAUT)
		EndIf
		SP4->(dbSkip())
	EndDo
Else
	lRet := .F.
EndIf
Return lRet

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³ fHrsPrev ³ Autor ³ Alexsandro Pereira    ³ Data ³          ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³                                                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³                                                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³                                                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ Gen‚rico                                                   ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±*/
Static Function fHrsPrev(aTabCalend)

Local nHrsPrev := 0
Local nX       := 0
Local dData    := 0

//-- Ordem do elemento anterior de aTabCalend
cOrdant := '  '
For nX := 1 To Len(aTabCalend)

	dData := aTabCalend[nX,1]

	//-- Nao conta as horas da tabela em dias de afastamento
	If fAfasta(SRA->RA_FILIAL,SRA->RA_MAT,dData)
		If (nX := Ascan(aTabCalend, { |x| x[1] == dData + 1 })) > 0
			Loop
		Else
			Exit
		Endif
	Endif

	If aTabCalend[nX,2] # cOrdAnt
		nHrsPrev := SomaHoras(nHrsPrev,aTabCalend[nX,7])
	Endif
	cOrdAnt := aTabCalend[nX,2]
Next nX
Return nHrsPrev

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³ fSomaHrs ³ Autor ³ Alexsandro Pereira    ³ Data ³          ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³                                                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³                                                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³                                                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ Gen‚rico                                                   ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±*/
Static Function fSomaHrs(aCodigos,aColuna,dPerIni,dPerFim,cAlias)

Local nX      := 0
Local nHoras  := 0

cPD     := cAlias+'->'+Right(cAlias,2)+'_PD'		//-- Campo codigo de evento
cFil    := cAlias+'->'+Right(cAlias,2)+'_FILIAL'	//-- Campo codigo da filial
cMat    := cAlias+'->'+Right(cAlias,2)+'_MAT'		//-- Campo matricula
cPDI    := cAlias+'->'+Right(cAlias,2)+'_PDI'		//-- Campo codigo de evento informado
cPD     := cAlias+'->'+Right(cAlias,2)+'_PD'		//-- Campo codigo de evento gerado
cData   := cAlias+'->'+Right(cAlias,2)+'_DATA'		//-- Campo data de referencia do lancamento
cQuantc := cAlias+'->'+Right(cAlias,2)+'_QUANTC'	//-- Campo quantidade de horas calculadas
cQuanti := cAlias+'->'+Right(cAlias,2)+'_QUANTI'	//-- Campo quantidade de horas informadas

dbSelectArea(cAlias)
If dbSeek(fFilFunc(cAlias)+SRA->RA_MAT)

	Do While &cFil + &cMat == SRA->RA_FILIAL + SRA->RA_MAT

		cEvento := If(Empty(&cPDI),&cPD,&cPDI)

		If Ascan(aCodigos, cEvento) == 0
			dbSkip()
			Loop
		Endif

		If &cData < dPerIni .Or. &cData > dPerFim
			dbSkip()
			Loop
		Endif

		nQuant := If(Empty(&cPDI),&cQuantc,&cQuanti)

		If Len(aColuna) > 0 .And. (nPos := Ascan(aColuna, { |x| x[1] == cEvento })) > 0
			aColuna[nPos,3] := SomaHoras(aColuna[nPos,3], nQuant)
		Else
			Aadd(aColuna, { cEvento, DescPDPon(cEvento), nQuant, 0 })
		Endif

		nHoras := SomaHoras(nHoras, If(Empty(&cPDI),&cQuantc,&cQuanti))

		dbSkip()
	Enddo

	//-- Calcula o percentual de cada item em relacao ao total
	For nX := 1 To Len(aColuna)
		aColuna[nX,4] := (fConvHr(aColuna[nX,3],'D') / fConvHr(nHoras,'D')) * 100
	Next nX
Endif
Return nHoras

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³fCarCodAbat³ Autor ³ Alexsandro Pereira    ³ Data ³          ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³                                                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³                                                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³                                                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ Gen‚rico                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±*/
Static Function fCarCodAbat(aCodAbat)

If SP9->(dbSeek(fFilFunc('SP9')))
	Do While ! SP9->(Eof()) .And. SP9->P9_FILIAL == fFilFunc('SP9')
		If SP9->P9_TIPOCOD = "2" //Evento de Desconto
			Aadd(aCodAbat, SP9->P9_CODIGO)
		Endif
		SP9->(dbSkip())
	Enddo
Endif
Return Nil

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³ fHrsAbon ³ Autor ³ Alexsandro Pereira    ³ Data ³          ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³                                                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³                                                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³                                                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ Gen‚rico                                                   ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±*/
Static Function fHrsAbon(dPerIni, dPerfim, aAbon)

Local nHrsAbon := 0
Local nX       := 0
Local aAbonos  := {}
Local dData    := dPerIni

For nX := 1 To (dPerFim-dPerIni)

	nHrsAbon := SomaHoras(nHrsAbon,fAbonos(dData,,,@aAbonos))

	For nY := 1 To Len(aAbonos)
		If (nPos := Ascan(aAbon, { |x| x[1] == aAbonos[nY,1] })) > 0
			aAbon[nPos,3] := SomaHoras(aAbonos[nY,2],aAbon[nPos,3])
		Else
			Aadd(aAbon, { aAbonos[nY,1], DescAbono(aAbonos[nY,1],'C'), aAbonos[nY,2], 0 })
		Endif
	Next nY

	//-- limpa variavel para adicionar proximo abono
	aAbonos := {}

	dData ++
Next nX
//-- Calcula o percentual de cada item em relacao ao total
For nX := 1 To Len(aAbon)
	aAbon[nX,4] := (fConvHr(aAbon[nX,3],'D') / fConvHr(nHrsAbon,'D')) * 100
Next nX
Return nHrsAbon

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³ RetSeq   ³ Autor ³ Alexsandro Pereira    ³ Data ³          ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³                                                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe e ³                                                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³                                                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ Gen‚rico                                                   ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±*/
Static Function RetSeq(cSeqAtual,cTurno,dPerIni,dPerFim,dData,aTabPadrao)

//-- funcao chamada quando nao houver troca de turno.
Local dPerAntIni := Ctod('  /  /  ')	//-- Data inicial do periodo anterior
Local dPerAntFim := Ctod('  /  /  ')	//-- Data final do periodo anterior
Local dDataSeg   := Ctod('  /  /  ')	//-- Data da ultima segunda-feira
Local nSemanas   := 0					//-- Numero de semanas
Local nQtdSeq    := 0					//-- Quantidade de sequencias da tabela de horario padrao
Local nPosTab    := 0					//-- Posicao do turno na tabela de horario padrao
Local cFilSPF    := fFilFunc('SPF')		//-- Codigo da filial do arquivo SPF

//-- Quando a sequencia nao for informada, assume-se "01"
cSeqAtual := If(cSeqAtual==Nil .Or. Val(cSeqAtual)=0,'01',cSeqAtual)

//-- Obtem o total de sequencias da tabela
If (nPosTab := Ascan(aTabPadrao, { |x| x[1] == fFilFunc('SP7') .And. x[2] == cTurno })) > 0
	nQtdSeq := Len(aTabPadrao[nPosTab,3]) / 7
Endif

//-- Carrega o periodo de apontamento.
If !PerAponta(@dPerAntIni,@dPerAntFim,dData)
	Help(' ',1,'PERNCAD')
	Return Nil
Endif

//-- verifica as trocas de turno a partir do periodo escolhido ate a data atual
If SPF->(dbSeek(cFilSPF+SRA->RA_MAT+DTos(dPerIni),.T.))
	If SPF->PF_FILIAL+SPF->PF_MAT == cFilSPF+SRA->RA_MAT .And. SPF->PF_DATA <= dPerAntIni-1
		//-- Carrega o periodo de apontamento.
		Return cSeqTurn
	Endif
Endif

//-- Se a data fim do antepenultimo periodo nao for na segunda-feira
If Dow(dPerAntIni-1) # 2
	//-- Obtem a data da segunda-feira do antepenultimo periodo.
	dDataSeg := (dPerAntIni-1) - (Dow(dPerAntIni-1) - 2)
	Else
	dDataSeg := dPerAntIni-1
Endif

//-- Calcula o numero de semanas decorridas desde a data inicial do periodo a obter a sequencia.
nSemanas  := If((nSemanas:=(dDataSeg-dPerIni)/7) > Int(nSemanas),Int(nSemanas := nSemanas + 1),nSemanas)
cSeqAtual := Val(cSeqAtual)-nSemanas
cSeqAtual := If(cSeqAtual<=1,nQtdSeq + cSeqAtual ,cSeqAtual)
cSeqAtual := StrZero(cSeqAtual,2)
Return cSeqAtual

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³ Monta_Per³ Autor ³ Alexsandro Pereira    ³ Data ³          ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³                                                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe e ³                                                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³                                                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ Gen‚rico                                                   ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±*/
Static Function Monta_Per(dDataIni,dDataFim)

Local aPeriodos := {}
Local dPerIni   := Ctod('  /  /  ')
Local dPerFim   := Ctod('  /  /  ')
Local dData     := dDataIni

While .T.
	If !PerAponta(@dPerIni,@dPerFim,dData)
		HELP(' ',1,'PERNCAD')
		Return Nil
	Endif

	Aadd(aPeriodos, { dPerIni, dPerFim, Max(dPerIni,dDataIni), Min(dPerFim,dDataFim) })
	If dDataFim > dPerFim
		dData := dPerFim + 1
		Else
		Exit
	Endif

Enddo
Return aPeriodos

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³fMontaTot ³ Autor ³ Alexsandro Pereira    ³ Data ³          ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³                                                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe e ³                                                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³                                                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ Gen‚rico                                                   ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±*/
Static Function fMontaTot(aAdic,aNTra,aAbon,nHrsPrev,nHrsReal,nHrsAdic,nHrsnTra,nHrsAbon,dPeriodo,nPReal, nPAdic, nPnTra, nPAbo)

Local nPos   := 0
Local nHoras := 0

//-- Acumulador totais horas adicionais
For nX := 1 To Len(aAdic)

	//-- Acumulador para Filial
	If Len(aAdicF) > 0 .And. (nPos := Ascan(aAdicF, { |x| x[1] == aAdic[nX,1] })) > 0
		aAdicF[nPos,3] := SomaHoras(aAdicF[nPos,3],aAdic[nX,3])
	Else
		Aadd(aAdicF, { aAdic[nX,1], DescPDPon(aAdic[nX,1]), aAdic[nX,3], 0 })
	Endif

	//-- Acumulador para turno
	If Len(aAdicT) > 0 .And. (nPos := Ascan(aAdicT, { |x| x[1] == aAdic[nX,1] })) > 0
		aAdicT[nPos,3] := SomaHoras(aAdicT[nPos,3],aAdic[nX,3])
	Else
		Aadd(aAdicT, { aAdic[nX,1], DescPDPon(aAdic[nX,1]), aAdic[nX,3], 0 })
	Endif

	//-- Acumulador para centro de custo
	If Len(aAdicC) > 0 .And. (nPos := Ascan(aAdicC, { |x| x[1] == aAdic[nX,1] })) > 0
		aAdicC[nPos,3] := SomaHoras(aAdicC[nPos,3],aAdic[nX,3])
	Else
		Aadd(aAdicC, { aAdic[nX,1], DescPDPon(aAdic[nX,1]), aAdic[nX,3], 0 })
	Endif

	//-- Acumulador para empresa
	If Len(aAdicE) > 0 .And. (nPos := Ascan(aAdicE, { |x| x[1] == aAdic[nX,1] })) > 0
		aAdicE[nPos,3] := SomaHoras(aAdicE[nPos,3],aAdic[nX,3])
	Else
		Aadd(aAdicE, { aAdic[nX,1], DescPDPon(aAdic[nX,1]), aAdic[nX,3], 0 })
	Endif

Next nX

//-- Acumulador totais horas nao trabalhadas       
For nX := 1 To Len(aNTra)

	//-- Acumulador para turno
	If Len(aNTraT) > 0 .And. (nPos := Ascan(aNTraT, { |x| x[1] == aNTra[nX,1] })) > 0
		aNTraT[nPos,3] := SomaHoras(aNTraT[nPos,3],aNTra[nX,3])
	Else
		Aadd(aNTraT, { aNTra[nX,1], DescPDPon(aNTra[nX,1]), aNTra[nX,3], 0 })
	Endif

	//-- Acumulador para centro de custo
	If Len(aNTraC) > 0 .And. (nPos := Ascan(aNTraC, { |x| x[1] == aNTra[nX,1] })) > 0
		aNTraC[nPos,3] := SomaHoras(aNTraC[nPos,3],aNTra[nX,3])
	Else
		Aadd(aNTraC, { aNTra[nX,1], DescPDPon(aNTra[nX,1]), aNTra[nX,3], 0 })
	Endif

	//-- Acumulador para filial
	If Len(aNTraF) > 0 .And. (nPos := Ascan(aNTraF, { |x| x[1] == aNTra[nX,1] })) > 0
		aNTraF[nPos,3] := SomaHoras(aNTraF[nPos,3],aNTra[nX,3])
	Else
		Aadd(aNTraF, { aNTra[nX,1], DescPDPon(aNTra[nX,1]), aNTra[nX,3], 0 })
	Endif

	//-- Acumulador para empresa
	If Len(aNTraE) > 0 .And. (nPos := Ascan(aNTraE, { |x| x[1] == aNTra[nX,1] })) > 0
		aNTraE[nPos,3] := SomaHoras(aNTraE[nPos,3],aNTra[nX,3])
	Else
		Aadd(aNTraE, { aNTra[nX,1], DescPDPon(aNTra[nX,1]), aNTra[nX,3], 0 })
	Endif

Next nX

//-- Acumulador totais por centro de custo
For nX := 1 To Len(aAbon)

	//-- Acumulador para turno
	If Len(aAbonT) > 0 .And. (nPos := Ascan(aAbonT, { |x| x[1] == aAbon[nX,1] })) > 0
		aAbonT[nPos,3] := SomaHoras(aAbonT[nPos,3],aAbon[nX,3])
	Else
		Aadd(aAbonT, { aAbon[nX,1], DescAbono(aAbon[nX,1],'C'), aAbon[nX,3], 0 })
	Endif

	//-- Acumulador para centro de custo
	If Len(aAbonC) > 0 .And. (nPos := Ascan(aAbonC, { |x| x[1] == aAbon[nX,1] })) > 0
		aAbonC[nPos,3] := SomaHoras(aAbonC[nPos,3],aAbon[nX,3])
	Else
		Aadd(aAbonC, { aAbon[nX,1], DescAbono(aAbon[nX,1],'C'), aAbon[nX,3], 0 })
	Endif

	//-- Acumulador para filial
	If Len(aAbonF) > 0 .And. (nPos := Ascan(aAbonF, { |x| x[1] == aAbon[nX,1] })) > 0
		aAbonF[nPos,3] := SomaHoras(aAbonF[nPos,3],aAbon[nX,3])
	Else
		Aadd(aAbonF, { aAbon[nX,1], DescAbono(aAbon[nX,1],'C'), aAbon[nX,3], 0 })
	Endif

	//-- Acumulador para empresa
	If Len(aAbonE) > 0 .And. (nPos := Ascan(aAbonE, { |x| x[1] == aAbon[nX,1] })) > 0
		aAbonE[nPos,3] := SomaHoras(aAbonE[nPos,3],aAbon[nX,3])
	Else
		Aadd(aAbonE, { aAbon[nX,1], DescAbono(aAbon[nX,1],'C'), aAbon[nX,3], 0 })
	Endif

Next nX
//-- Percentuais do totalizador abonos por Empresa
nHoras := 0
aEval(aAbonE, { |y| nHoras := SomaHoras(nHoras,y[3]) })
aEval(aAbonE, { |x| x[4] := (fConvHr(x[3],'D') / fConvHr(nHoras,'D')) * 100 })

//-- Percentuais do totalizador abonos por filial
nHoras := 0
aEval(aAbonF, { |y| nHoras := SomaHoras(nHoras,y[3]) })
aEval(aAbonF, { |x| x[4] := (fConvHr(x[3],'D') / fConvHr(nHoras,'D')) * 100 })

//-- Percentuais do totalizador abonos por Centro de Custo
nHoras := 0
aEval(aAbonC, { |y| nHoras := SomaHoras(nHoras,y[3]) })
aEval(aAbonC, { |x| x[4] := (fConvHr(x[3],'D') / fConvHr(nHoras,'D')) * 100 })

//-- Percentuais do totalizador abonos por turno
nHoras := 0
aEval(aAbonT, { |y| nHoras := SomaHoras(nHoras,y[3]) })
aEval(aAbonT, { |x| x[4] := (fConvHr(x[3],'D') / fConvHr(nHoras,'D')) * 100 })


//-- Percentuais do totalizador adicionais por Empresa
nHoras := 0
aEval(aAdicE, { |y| nHoras := SomaHoras(nHoras,y[3]) })
aEval(aAdicE, { |x| x[4] := (fConvHr(x[3],'D') / fConvHr(nHoras,'D')) * 100 })

//-- Percentuais do totalizador adicionais por filial
nHoras := 0
aEval(aAdicF, { |y| nHoras := SomaHoras(nHoras,y[3]) })
aEval(aAdicF, { |x| x[4] := (fConvHr(x[3],'D') / fConvHr(nHoras,'D')) * 100 })

//-- Percentuais do totalizador adicionais por Centro de Custo
nHoras := 0
aEval(aAdicC, { |y| nHoras := SomaHoras(nHoras,y[3]) })
aEval(aAdicC, { |x| x[4] := (fConvHr(x[3],'D') / fConvHr(nHoras,'D')) * 100 })

//-- Percentuais do totalizador adicionais por turno
nHoras := 0
aEval(aAdicT, { |y| nHoras := SomaHoras(nHoras,y[3]) })
aEval(aAdicT, { |x| x[4] := (fConvHr(x[3],'D') / fConvHr(nHoras,'D')) * 100 })



//-- Percentuais do totalizador horas nao trab. por Empresa
nHoras := 0
aEval(aNTraE, { |y| nHoras := SomaHoras(nHoras,y[3]) })
aEval(aNTraE, { |x| x[4] := (fConvHr(x[3],'D') / fConvHr(nHoras,'D')) * 100 })

//-- Percentuais do totalizador horas nao trab. por filial
nHoras := 0
aEval(aNTraF, { |y| nHoras := SomaHoras(nHoras,y[3]) })
aEval(aNTraF, { |x| x[4] := (fConvHr(x[3],'D') / fConvHr(nHoras,'D')) * 100 })

//-- Percentuais do totalizador horas nao trab. por Centro de Custo
nHoras := 0
aEval(aNTraC, { |y| nHoras := SomaHoras(nHoras,y[3]) })
aEval(aNTraC, { |x| x[4] := (fConvHr(x[3],'D') / fConvHr(nHoras,'D')) * 100 })

//-- Percentuais do totalizador horas nao trab. por turno
nHoras := 0
aEval(aNTraT, { |y| nHoras := SomaHoras(nHoras,y[3]) })
aEval(aNTraT, { |x| x[4] := (fConvHr(x[3],'D') / fConvHr(nHoras,'D')) * 100 })

//-- aTotal
//-- [n,01] Periodo
//-- [n,02] Horas previstas
//-- [n,03] horas realizadas
//-- [n,04] percentual realizado
//-- [n,05] Horas adicionais
//-- [n,06] percentual adicional
//-- [n,07] Horas nao trabalhadas
//-- [n,08] Percentual horas nao trabalhadas
//-- [n,09] Horas abonadas
//-- [n,10] Percentual horas abonadas

//-- Totalizador da linha por filial
If Len(aTotalF) > 0 .And. (nPos := Ascan(aTotalF, { |x| x[1] == StrZero(Month(dPeriodo),2)+'/'+Transf(Year(dPeriodo),'9999') })) > 0
	aTotalF[nPos,02] := SomaHoras(aTotalF[nPos,02], nHrsPrev)
	aTotalF[nPos,03] := SomaHoras(aTotalF[nPos,03], nHrsReal)
	aTotalF[nPos,04] := (fConvHr(aTotalF[nPos,03],'D') / fConvHr(aTotalF[nPos,02],'D')) * 100
	aTotalF[nPos,05] := SomaHoras(aTotalF[nPos,05], nHrsAdic)
	aTotalF[nPos,06] := (fConvHr(aTotalF[nPos,05],'D') / fConvHr(aTotalF[nPos,02],'D')) * 100
	aTotalF[nPos,07] := SomaHoras(aTotalF[nPos,07], nHrsnTra)
	aTotalF[nPos,08] := (fConvHr(aTotalF[nPos,07],'D') / fConvHr(aTotalF[nPos,02],'D')) * 100
	aTotalF[nPos,09] := SomaHoras(aTotalF[nPos,09], nHrsAbon)
	aTotalF[nPos,10] := (fConvHr(aTotalF[nPos,09],'D') / fConvHr(aTotalF[nPos,07],'D')) * 100
Else
	Aadd(aTotalF, { StrZero(Month(dPeriodo),2)+'/'+Transf(Year(dPeriodo),'9999'),;
	nHrsPrev,nHrsReal, nPReal, nHrsAdic, nPAdic, nHrsnTra, nPnTra, nHrsAbon, nPAbo })
Endif

//-- Totalizador da linha por centro de custo
If Len(aTotalC) > 0 .And. (nPos := Ascan(aTotalC, { |x| x[1] == StrZero(Month(dPeriodo),2)+'/'+Transf(Year(dPeriodo),'9999') })) > 0
	aTotalC[nPos,02] := SomaHoras(aTotalC[nPos,02], nHrsPrev)
	aTotalC[nPos,03] := SomaHoras(aTotalC[nPos,03], nHrsReal)
	aTotalC[nPos,04] := (fConvHr(aTotalC[nPos,03],'D') / fConvHr(aTotalC[nPos,02],'D')) * 100
	aTotalC[nPos,05] := SomaHoras(aTotalC[nPos,05], nHrsAdic)
	aTotalC[nPos,06] := (fConvHr(aTotalC[nPos,05],'D') / fConvHr(aTotalC[nPos,02],'D')) * 100
	aTotalC[nPos,07] := SomaHoras(aTotalC[nPos,07], nHrsnTra)
	aTotalC[nPos,08] := (fConvHr(aTotalC[nPos,07],'D') / fConvHr(aTotalC[nPos,02],'D')) * 100
	aTotalC[nPos,09] := SomaHoras(aTotalC[nPos,09], nHrsAbon)
	aTotalC[nPos,10] := (fConvHr(aTotalC[nPos,09],'D') / fConvHr(aTotalC[nPos,07],'D')) * 100
	Else
	Aadd(aTotalC, { StrZero(Month(dPeriodo),2)+'/'+Transf(Year(dPeriodo),'9999'),;
	nHrsPrev,nHrsReal, nPReal, nHrsAdic, nPAdic, nHrsnTra, nPnTra, nHrsAbon, nPAbo })
Endif

//-- Totalizador da linha por turno
If Len(aTotalT) > 0 .And. (nPos := Ascan(aTotalT, { |x| x[1] == StrZero(Month(dPeriodo),2)+'/'+Transf(Year(dPeriodo),'9999') })) > 0
	aTotalT[nPos,02] := SomaHoras(aTotalT[nPos,02], nHrsPrev)
	aTotalT[nPos,03] := SomaHoras(aTotalT[nPos,03], nHrsReal)
	aTotalT[nPos,04] := (fConvHr(aTotalT[nPos,03],'D') / fConvHr(aTotalT[nPos,02],'D')) * 100
	aTotalT[nPos,05] := SomaHoras(aTotalT[nPos,05], nHrsAdic)
	aTotalT[nPos,06] := (fConvHr(aTotalT[nPos,05],'D') / fConvHr(aTotalT[nPos,02],'D')) * 100
	aTotalT[nPos,07] := SomaHoras(aTotalT[nPos,07], nHrsnTra)
	aTotalT[nPos,08] := (fConvHr(aTotalT[nPos,07],'D') / fConvHr(aTotalT[nPos,02],'D')) * 100
	aTotalT[nPos,09] := SomaHoras(aTotalT[nPos,09], nHrsAbon)
	aTotalT[nPos,10] := (fConvHr(aTotalT[nPos,09],'D') / fConvHr(aTotalT[nPos,07],'D')) * 100
Else
	Aadd(aTotalT, { StrZero(Month(dPeriodo),2)+'/'+Transf(Year(dPeriodo),'9999'),;
	nHrsPrev,nHrsReal, nPReal, nHrsAdic, nPAdic, nHrsnTra, nPnTra, nHrsAbon, nPAbo })
Endif

//-- Totalizador da linha por empresa
If Len(aTotalE) > 0 .And. (nPos := Ascan(aTotalE, { |x| x[1] == StrZero(Month(dPeriodo),2)+'/'+Transf(Year(dPeriodo),'9999') })) > 0
	aTotalE[nPos,02] := SomaHoras(aTotalE[nPos,02], nHrsPrev)
	aTotalE[nPos,03] := SomaHoras(aTotalE[nPos,03], nHrsReal)
	aTotalE[nPos,04] := (fConvHr(aTotalE[nPos,03],'D') / fConvHr(aTotalE[nPos,02],'D')) * 100
	aTotalE[nPos,05] := SomaHoras(aTotalE[nPos,05], nHrsAdic)
	aTotalE[nPos,06] := (fConvHr(aTotalE[nPos,05],'D') / fConvHr(aTotalE[nPos,02],'D')) * 100
	aTotalE[nPos,07] := SomaHoras(aTotalE[nPos,07], nHrsnTra)
	aTotalE[nPos,08] := (fConvHr(aTotalC[nPos,07],'D') / fConvHr(aTotalC[nPos,02],'D')) * 100
	aTotalE[nPos,09] := SomaHoras(aTotalE[nPos,09], nHrsAbon)
	aTotalE[nPos,10] := (fConvHr(aTotalC[nPos,09],'D') / fConvHr(aTotalC[nPos,07],'D')) * 100
Else
	Aadd(aTotalE, { StrZero(Month(dPeriodo),2)+'/'+Transf(Year(dPeriodo),'9999'),;
	nHrsPrev,nHrsReal, nPReal, nHrsAdic, nPAdic, nHrsnTra, nPnTra, nHrsAbon, nPAbo })
Endif
Return Nil

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³ fTotais  ³ Autor ³ Alexsandro Pereira    ³ Data ³          ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³                                                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³                                                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³                                                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ Gen‚rico                                                   ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±*/
Static Function fTotais(nTipo)

Local cColuna01  := ''
Local cColuna02  := ''
Local cColuna03  := ''
Local cDet       := ''
Local nX         := 0
Local nElementos := 0

If nTipo == 3 .Or. nTipo == 1 //-- Filial

	//-- 
	For nX := 1 To Len(aTotalF)
		If nX == 1
			cDet := STR0015+cFilAnte+' - '+aInfo[1] //'TOTAIS PARA A FILIAL '
			Impr(cDet,'C')
			Impr('','C')
			cDet := STR0016 //'Periodo     Hrs.Prev.     Hrs.Real       % (1)Hrs.Adic.      % (2)Hrs.N.Trab.      % (3)Hrs.Abonadas      %'
			//                 99/9999  9,999,999.99 9,999,999.99  999.99 9,999,999.99 999.99   9,999,999.99 999.99    9,999,999.99 999.99
			Impr(cDet,'C')
		Endif

		cDet := aTotalF[nX,1]+'  '+Transf(aTotalF[nX,2], "@E 9,999,999.99")+;
		Space(01)+Transf(aTotalF[nX,3], "@E 9,999,999.99")+Space(02)+Transf(aTotalF[nX,4],"@E 999.99")+;
		Space(01)+Transf(aTotalF[nX,5], "@E 9,999,999.99")+Space(01)+Transf(aTotalF[nX,6],"@E 999.99")+;
		Space(03)+Transf(aTotalF[nX,7], "@E 9,999,999.99")+Space(01)+Transf(aTotalF[nX,8], "@E 999.99")+;
		Space(04)+Transf(aTotalF[nX,9], "@E 9,999,999.99")+Space(01)+Transf(aTotalF[nX,10], "@E 999.99")
		Impr(cDet,'C')
	Next nX

	//-- Quando nao houver totais nao emite corpo totalizador
	If (nElementos := Max(Max(Len(aAdicF),Len(aNTraF)),Len(aAbonF))) == 0
		Return Nil
	Endif

	Impr('','C')
	cDet := STR0017 //'(1) Descricao                  Horas      % (2) Descricao                  Horas      %  (3) Descricao                  Horas      %'
	Impr(cDet,'C')

	//-- Imprime totalizador dos itens
	For nX := 1 To nElementos

		cColuna01 := If(nX<=Len(aAdicF),aAdicF[nX,1]+Space(02)+Left(aAdicF[nX,2],20)+Space(01)+Transf(aAdicF[nX,3],"@E 999.99")+Space(01)+Transf(aAdicF[nX,4],"@E 999.99"),Space(39))
		cColuna02 := If(nX<=Len(aNTraF),aNTraF[nX,1]+Space(02)+Left(aNTraF[nX,2],20)+Space(01)+Transf(aNTraF[nX,3],"@E 999.99")+Space(01)+Transf(aNTraF[nX,4],"@E 999.99"),Space(39))
		cColuna03 := If(nX<=Len(aAbonF),aAbonF[nX,1]+Space(02)+Left(aAbonF[nX,2],20)+Space(01)+Transf(aAbonF[nX,3],"@E 999.99")+Space(01)+Transf(aAbonF[nX,4],"@E 999.99"),Space(39))

		cDet := Space(04)+cColuna01+Space(05)+cColuna02+Space(06)+cColuna03
		Impr(cDet,'C')
	Next nX

	Impr(Replic('*',132),'C')

	aTotalF   := {}
	aAdicF    := {}
	aNTraF    := {}
	aAbonF    := {}

ElseIf nTipo == 2 .Or. nTipo == 5 //-- Centro de custo

	//-- 
	For nX := 1 To Len(aTotalC)
		If nX == 1
			cDet := STR0020+cCcAnt+' - '+DescCc(cCcAnt,SRA->RA_Filial) //'TOTAIS PARA O CENTRO DE CUSTO '
			Impr(cDet,'C')
			Impr('','C')
			cDet := STR0016
			//       99/9999  9,999,999.99 9,999,999.99  999.99 9,999,999.99 999.99   9,999,999.99 999.99    9,999,999.99 999.99
			Impr(cDet,'C')
		Endif

		cDet := aTotalC[nX,1]+'  '+Transf(aTotalC[nX,2], "@E 9,999,999.99")+;
		Space(01)+Transf(aTotalC[nX,3], "@E 9,999,999.99")+Space(02)+Transf(aTotalC[nX,4],"@E 999.99")+;
		Space(01)+Transf(aTotalC[nX,5], "@E 9,999,999.99")+Space(01)+Transf(aTotalC[nX,6],"@E 999.99")+;
		Space(03)+Transf(aTotalC[nX,7], "@E 9,999,999.99")+Space(01)+Transf(aTotalC[nX,8], "@E 999.99")+;
		Space(04)+Transf(aTotalC[nX,9], "@E 9,999,999.99")+Space(01)+Transf(aTotalC[nX,10], "@E 999.99")
		Impr(cDet,'C')
	Next nX

	//-- Quando nao houver totais nao emite corpo totalizador
	If (nElementos := Max(Max(Len(aAdicC),Len(aNTraC)),Len(aAbonC))) == 0
		Return Nil
	Endif

	Impr('','C')
	cDet := STR0017
	Impr(cDet,'C')


	//-- Imprime totalizador dos itens
	For nX := 1 To nElementos

		cColuna01 := If(nX<=Len(aAdicC),aAdicC[nX,1]+Space(02)+Left(aAdicC[nX,2],20)+Space(01)+Transf(aAdicC[nX,3],"@E 999.99")+Space(01)+Transf(aAdicC[nX,4],"@E 999.99"),Space(39))
		cColuna02 := If(nX<=Len(aNTraC),aNTraC[nX,1]+Space(02)+Left(aNTraC[nX,2],20)+Space(01)+Transf(aNTraC[nX,3],"@E 999.99")+Space(01)+Transf(aNTraC[nX,4],"@E 999.99"),Space(39))
		cColuna03 := If(nX<=Len(aAbonC),aAbonC[nX,1]+Space(02)+Left(aAbonC[nX,2],20)+Space(01)+Transf(aAbonC[nX,3],"@E 999.99")+Space(01)+Transf(aAbonC[nX,4],"@E 999.99"),Space(39))
		cDet := Space(04)+cColuna01+Space(05)+cColuna02+Space(06)+cColuna03
		Impr(cDet,'C')

	Next nX
	Impr(Replic('*',132),'C')

	//-- Zera totalizadores
	aTotalC   := {}
	aAdicC    := {}
	aNTraC    := {}
	aAbonC    := {}

ElseIf nTipo == 4 //-- Turno de trabalho

	//-- 
	For nX := 1 To Len(aTotalT)
		If nX == 1
			cDet := STR0019+cTnoAnt+' - '+fDescTno(cFilAnte,cTnoAnt) //'TOTAIS PARA O TURNO '
			Impr(cDet,'C')
			Impr('','C')
			cDet := STR0016
			//       99/9999  9,999,999.99 9,999,999.99  999.99 9,999,999.99 999.99   9,999,999.99 999.99    9,999,999.99 999.99
			Impr(cDet,'C')
		Endif

		cDet := aTotalT[nX,1]+'  '+Transf(aTotalT[nX,2], "@E 999,999,999.99")+;
		Space(01)+Transf(aTotalT[nX,3], "@E 9,999,999.99")+Space(02)+Transf(aTotalT[nX,4],"@E 999.99")+;
		Space(01)+Transf(aTotalT[nX,5], "@E 9,999,999.99")+Space(01)+Transf(aTotalT[nX,6],"@E 999.99")+;
		Space(03)+Transf(aTotalT[nX,7], "@E 9,999,999.99")+Space(01)+Transf(aTotalT[nX,8], "@E 999.99")+;
		Space(04)+Transf(aTotalT[nX,9], "@E 9,999,999.99")+Space(01)+Transf(aTotalT[nX,10], "@E 999.99")
		Impr(cDet,'C')

	Next nX

	//-- Quando nao houver totais nao emite corpo totalizador
	If (nElementos := Max(Max(Len(aAdicC),Len(aNTraC)),Len(aAbonC))) == 0
		Return Nil
	Endif

	Impr('','C')
	cDet := STR0017
	Impr(cDet,'C')


	//-- Imprime totalizador dos itens
	For nX := 1 To nElementos
		cColuna01 := If(nX<=Len(aAdicC),aAdicC[nX,1]+Space(02)+Left(aAdicC[nX,2],20)+Space(01)+Transf(aAdicC[nX,3],"@E 999.99")+Space(01)+Transf(aAdicC[nX,4],"@E 999.99"),Space(39))
		cColuna02 := If(nX<=Len(aNTraC),aNTraC[nX,1]+Space(02)+Left(aNTraC[nX,2],20)+Space(01)+Transf(aNTraC[nX,3],"@E 999.99")+Space(01)+Transf(aNTraC[nX,4],"@E 999.99"),Space(39))
		cColuna03 := If(nX<=Len(aAbonC),aAbonC[nX,1]+Space(02)+Left(aAbonC[nX,2],20)+Space(01)+Transf(aAbonC[nX,3],"@E 999.99")+Space(01)+Transf(aAbonC[nX,4],"@E 999.99"),Space(39))
		cDet := Space(04)+cColuna01+Space(05)+cColuna02+Space(06)+cColuna03
		Impr(cDet,'C')
	Next nX
	Impr(Replic('*',132),'C')

	//-- Zera totalizadores
	aTotalT   := {}
	aAdicT    := {}
	aNTraT    := {}
	aAbonT    := {}

ElseIf nTipo == 0 //-- Empresa

	//-- 
	For nX := 1 To Len(aTotalE)
		If nX == 1
			cDet := STR0018+aInfo[3] //'TOTAIS PARA A EMPRESA '
			Impr(cDet,'C')
			Impr('','C')
			cDet := STR0031 //'Periodo       Hrs.Prev.     Hrs.Real       % (1)Hrs.Adic.      % (2)Hrs.N.Trab.      % (3)Hrs.Abonadas      %'
			//       99/9999  9,999,999.99 9,999,999.99  999.99 9,999,999.99 999.99   9,999,999.99 999.99    9,999,999.99 999.99
			Impr(cDet,'C')
		Endif

		cDet := aTotalE[nX,1]+'  '+Transf(aTotalE[nX,2], "@E 999,999,999.99")+;
		Space(01)+Transf(aTotalE[nX,3], "@E 9,999,999.99")+Space(02)+Transf(aTotalE[nX,4],"@E 999.99")+;
		Space(01)+Transf(aTotalE[nX,5], "@E 9,999,999.99")+Space(01)+Transf(aTotalE[nX,6],"@E 999.99")+;
		Space(03)+Transf(aTotalE[nX,7], "@E 9,999,999.99")+Space(01)+Transf(aTotalE[nX,8], "@E 999.99")+;
		Space(04)+Transf(aTotalE[nX,9], "@E 9,999,999.99")+Space(01)+Transf(aTotalE[nX,10], "@E 999.99")
		Impr(cDet,'C')
	Next nX

	//-- Quando nao houver totais nao emite corpo totalizador
	If (nElementos := Max(Max(Len(aAdicE),Len(aNTraE)),Len(aAbonE))) == 0
		Return Nil
	Endif

	Impr('','C')
	cDet := STR0017
	Impr(cDet,'C')

//(1) Descricao                  Horas     %  (2) Descricao                  Horas      %  (3) Descricao                  Horas     % '
//    XXXXXXXXXXXXXXXXXXXXXXXXXX 999.99                 
	//-- Imprime totalizador dos itens
	For nX := 1 To nElementos
		cColuna01 := If(nX<=Len(aAdicE),aAdicE[nX,1]+Space(02)+Left(aAdicE[nX,2],20)+Space(01)+Transf(aAdicE[nX,3],"@E 999.99")+Space(01)+Transf(aAdicE[nX,4],"@E 999.99"),Space(39))
		cColuna02 := If(nX<=Len(aNTraE),aNTraE[nX,1]+Space(02)+Left(aNTraE[nX,2],20)+Space(01)+Transf(aNTraE[nX,3],"@E 999.99")+Space(01)+Transf(aNTraE[nX,4],"@E 999.99"),Space(39))
		cColuna03 := If(nX<=Len(aAbonE),aAbonE[nX,1]+Space(02)+Left(aAbonE[nX,2],20)+Space(01)+Transf(aAbonE[nX,3],"@E 999.99")+Space(01)+Transf(aAbonE[nX,4],"@E 999.99"),Space(39))
		cDet := Space(04)+cColuna01+Space(05)+cColuna02+Space(06)+cColuna03
		Impr(cDet,'C')
	Next nX
	Impr(Replic('*',132),'C')

	//-- Zera totalizadores

	aTotalE   := {}
	aAdicE    := {}
	aNTraE    := {}
	aAbonE    := {}
Endif
Return Nil