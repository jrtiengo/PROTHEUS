#include 'totvs.ch'
#include 'tlpp-core.th'

/*/{Protheus.doc} U_GET
@see https://tdn.totvs.com/display/public/framework/09.+FWAdapterBaseV2
@see https://tdn.totvs.com/pages/releaseview.action?pageId=6814927
/*/

namespace curso.api.projeto

@get('/clientes')
Function u_lista_clientes as logical

    Local cQuery     as character
    Local cWhere     as character
    Local cResult    as character
    Local cCodigo    as character
    Local cLoja      as character
    Local nPage      as numeric
    Local nPageSize  as numeric
    Local jResult    as json  
    Local jQueryPar  as json  
    Local jHeaderReq as json
    Local jHeaderRes as json
    Local oQuery     as object

    jHeaderReq       := oRest:getHeaderRequest()
    jQueryPar        := oRest:getQueryRequest()

    cCodigo          := jQueryPar['codigo'  ]
    cLoja            := jQueryPar['loja'    ]
    cSearch          := jQueryPar['search'  ]
    cOrder           := jQueryPar['order'   ]
    nPage            := jQueryPar['page'    ]; nPage     := val(nPage     )
    nPageSize        := jQueryPar['pageSize']; nPageSize := val(nPageSize )     

    IF .not. valtype(cOrder) == 'C'
        cOrder := 'A1_COD, A1_LOJA'
    Else
        DO CASE 
            CASE cOrder == 'codigo' .or. cOrder == 'loja'
                cOrder := 'A1_COD,A1_LOJA'
            CASE cOrder == 'nome'
                cOrder := 'A1_NOME'
            CASE cOrder == 'endereco'
                cOrder := 'A1_END'    
            OTHERWISE
                cOrder := 'A1_COD,A1_LOJA'
        END CASE
    EndIF

    jHeaderRes       := jsonObject():new()
    jHeaderRes['Content-Type'] := 'application/json' 

    cQuery := "SELECT #QueryFields# FROM ("
    cQuery += CRLF + "SELECT * FROM " + RETSQLNAME("SA1") + " SA1 ) SA1"
    cQuery += CRLF + "WHERE #QueryWhere#"  

    cWhere := "D_E_L_E_T_ = ' ' " 

    IF .not. empty(cSearch)

        IF empty(jQueryPar['order']) .or. jQueryPar['order'] == 'nome'
            cWhere += CRLF + "AND A1_NOME LIKE '%" + alltrim(cSearch) + "%' "
        ElseIF jQueryPar['order'] == 'endereco' 
            cWhere += CRLF + "AND A1_END LIKE '%" + alltrim(cSearch) + "%' "   
        ElseIF jQueryPar['order'] == 'codigo'
            cWhere += CRLF + "AND A1_COD LIKE '%" + alltrim(cSearch) + "%' "
        ElseIF jQueryPar['order'] == 'cidade'
            cWhere += CRLF + "AND A1_MUN LIKE '%" + alltrim(cSearch) + "%' "
        ElseIF jQueryPar['order'] == 'estado'
            cWhere += CRLF + "AND A1_EST LIKE '%" + alltrim(cSearch) + "%' "
        Else
            cWhere += CRLF + "AND A1_NOME LIKE '%" + alltrim(cSearch) + "%' "                 
        EndIF   

    EndIF       

    oQuery := fwAdapterBaseV2():new('GET',.T.)
    oQuery:addMapFields('codigo'    ,'A1_COD'   ,.T.,.T.)
    oQuery:addMapFields('loja'      ,'A1_LOJA'  ,.T.,.T.)
    oQuery:addMapFields('nome'      ,'A1_NOME'  ,.T.,.T.)
    oQuery:addMapFields('tipo'      ,'A1_PESSOA',.T.,.T.)   
    oQuery:addMapFields('endereco'  ,'A1_END'   ,.T.,.T.) 
    oQuery:addMapFields('bairro'    ,'A1_BAIRRO',.T.,.T.) 
    oQuery:addMapFields('cidade'    ,'A1_MUN'   ,.T.,.T.) 
    oQuery:addMapFields('estado'    ,'A1_EST'   ,.T.,.T.)
    oQuery:addMapFields('cep'       ,'A1_CEP'   ,.T.,.T.) 

    oQuery:setQuery(cQuery)
    oQuery:setWhere(cWhere)
    oQuery:setOrder(cOrder)
    oQuery:setPageSize(nPageSize)
    oQuery:setPage(nPage)     

    IF oQuery:execute()
        oQuery:fillGetResponse()
        cResult := oQuery:getJsonResponse()
    EndIF 

    jResult := jsonObject():new()
    jResult:fromJson(cResult)

    oRest:setResponse(cResult)                         

return .T.

@get('/estados')
Function u_lista_estados

    Local cQuery     as character
    Local cWhere     as character
    Local cResult    as character
    Local cOrder     as character
    Local nPage      as numeric
    Local nPageSize  as numeric
    Local jResult    as json  
    Local jHeaderRes as json
    Local oQuery     as object

    jHeaderRes       := jsonObject():new()
    jHeaderRes['Content-Type'] := 'application/json'    

    cQuery      := "SELECT #QueryFields# FROM ("
    cQuery      += CRLF + "SELECT * FROM " + RETSQLNAME("SX5") + " SX5 ) SX5"
    cQuery      += CRLF + "WHERE #QueryWhere#"

    cWhere      := "D_E_L_E_T_ = ' '
    cWhere      += CRLF + " AND X5_TABELA = '12'"

    IF .not. empty(oRest:getQueryRequest()['filter'])
        cWhere  += CRLF + "AND X5_DESCRI LIKE '%" + oRest:getQueryRequest()['filter'] + "%'"
    EndIF   

    cOrder      := 'X5_DESCRI'
    nPageSize   := 30
    nPage       := 1       

    oQuery      := fwAdapterBaseV2():new('GET',.T.)
    oQuery:addMapFields('value' ,'X5_CHAVE'   ,.T.,.T.,)  
    oQuery:addMapFields('label' ,'X5_DESCRI'  ,.T.,.T.,) 

    oQuery:setQuery(cQuery)
    oQuery:setWhere(cWhere)
    oQuery:setOrder(cOrder)
    oQuery:setPageSize(nPageSize)
    oQuery:setPage(nPage)  

    IF oQuery:execute()
        oQuery:fillGetResponse()
        cResult := oQuery:getJsonResponse()
    EndIF 

    jResult := jsonObject():new()
    jResult:fromJson(cResult)

    oRest:setResponse(cResult)              

return .T.

@get('/estados/:estado')
Function u_detalhes_estado as logical

    Local jResponse     as json
    Local jPathPar      as json
    Local cEstado       as character

    jPathPar            := oRest:getPathParamsRequest()
    cEstado             := jPathPar['estado']

    dbSelectArea('SX5')
    dbSetOrder(1)
    dbSeek(xFilial(alias())+'12'+cEstado)

    jResponse           := jsonObject():new()
    jResponse['value']  := alltrim(SX5->X5_CHAVE)
    jResponse['value']  := alltrim(SX5->X5_DESCRI)

    oRest:setResponse(jResponse:toJson())
 
return .T.

@get('/cidades/:estado')
Function u_lista_cidades as logical

    Local cQuery     as character
    Local cWhere     as character
    Local cResult    as character
    Local cOrder     as character
    Local nPage      as numeric
    Local nPageSize  as numeric
    Local jResult    as json  
    Local jHeaderReq as json
    Local jHeaderRes as json
    Local jPathPar   as json
    Local oQuery     as object

    jHeaderReq       := oRest:getHeaderRequest()
    jPathPar         := oRest:getPathParamsRequest()

    jHeaderRes       := jsonObject():new()
    jHeaderRes['Content-Type'] := 'application/json'

    cQuery      := "SELECT #QueryFields# FROM ("
    cQuery      += CRLF + "SELECT * FROM " + RETSQLNAME("CC2") + " CC2 ) CC2"
    cQuery      += CRLF + "WHERE #QueryWhere#"  

    cWhere      := "D_E_L_E_T_ = ' ' "
    cWhere      += CRLF + "AND CC2_EST = '" + jPathPar['estado'] + "' "    

    IF .not. empty(oRest:getQueryRequest()['filter'])
        cWhere  += CRLF + "AND CC2_MUN LIKE '%" + oRest:getQueryRequest()['filter'] + "%'"
    EndIF

    cOrder      := 'CC2_EST,CC2_MUN'
    nPageSize   := 200
    nPage       := 1       

    oQuery      := fwAdapterBaseV2():new('GET',.T.)
    
    oQuery:addMapFields('estado'    ,'CC2_EST'   ,.T.,.T.,)
    oQuery:addMapFields('cidade'    ,'CC2_MUN'   ,.T.,.T.,)
    oQuery:addMapFields('codibge'   ,'CC2_CODMUN',.T.,.T.,)
    oQuery:addMapFields('value'     ,'CC2_MUN'   ,.T.,.T.,{'CC2_MUN'  ,'C',30,0},'CC2.VALUE')
    oQuery:addMapFields('label'     ,'CC2_MUN'   ,.T.,.T.,{'CC2_MUN'  ,'C',30,0},'CC2.LABEL') 

    oQuery:setQuery(cQuery)
    oQuery:setWhere(cWhere)
    oQuery:setOrder(cOrder)
    oQuery:setPageSize(nPageSize)
    oQuery:setPage(nPage)     

    IF oQuery:execute()
        oQuery:fillGetResponse()
        cResult := oQuery:getJsonResponse()
    EndIF

    jResult := jsonObject():new()
    jResult:fromJson(cResult)

    oRest:setResponse(cResult)       

return .T.

@get('/cidades/:estado/:cidade')
Function u_detalhes_cidade as logical

    Local jPathPar      as json
    Local jHeaderReq    as json
    Local jResponse     as json
    Local cEstado       as character    
    Local cCidade       as character
    Local cCodigo       as character
    Local cLoja         as character

    jPathPar            := oRest:getPathParamsRequest()
    jHeaderReq          := oRest:getHeaderRequest()

    cCodigo             := jHeaderReq['codcliente']
    cLoja               := jHeaderReq['lojcliente']

    jResponse           := jsonObject():new()   

    cEstado             := jPathPar['estado']
    cCidade             := jPathPar['cidade']

    dbSelectArea("CC2")
    dbSetOrder(4)
    dbSeek(xFilial(alias())+cEstado+cCidade)

    IF .not. empty(cCodigo)
        SA1->(dbSetOrder(1),dbSeek(xFilial(alias())+cCodigo+cLoja))
        CC2->(dbSetOrder(4),dbSeek(xFilial(alias())+SA1->(A1_EST+A1_MUN)))
    EndIF

    jResponse['value']  := alltrim(CC2->CC2_MUN)
    jResponse['label']  := alltrim(CC2->CC2_MUN)

    oRest:setResponse(jResponse:toJson())     

return .T.

@post('/cliente')
Function u_novo_cliente as logical

    Local jQueryParams  as json
    Local jHeaderReq    as json
    Local jHeaderRes    as json
    Local jBodyReq      as json    
    Local cMsgLog       as character

    jHeaderRes                  := jsonObject():new()
    jHeaderRes['Content-Type']  := 'application/json'  

    jQueryParams                := oRest:getQueryRequest()
    jHeaderReq                  := oRest:getHeaderRequest()

    jBodyReq                    := jsonObject():new()
    jBodyReq:fromJson(oRest:getBodyRequest())      

    lret                        := grava_cliente(@jBodyReq,@cMsgLog)  

    IF lret
        oRest:setResponse(jBodyReq:toJson())
    Else
        oRest:setStatusCode(500)
        oRest:setFault(cMsgLog)
    EndIF             

return .T.

@put('/cliente')
Function u_atualiza_cliente as logical
    
    Local jQueryParams  as json
    Local jHeaderReq    as json
    Local jHeaderRes    as json
    Local jBodyReq      as json    
    Local cMsgLog       as character

    jHeaderRes                  := jsonObject():new()
    jHeaderRes['Content-Type']  := 'application/json'  

    jQueryParams                := oRest:getQueryRequest()
    jHeaderReq                  := oRest:getHeaderRequest()

    jBodyReq                    := jsonObject():new()
    jBodyReq:fromJson(oRest:getBodyRequest())      

    lret                        := grava_cliente(@jBodyReq,@cMsgLog)  

    IF lret
        oRest:setResponse(jBodyReq:toJson())
    Else
        oRest:setStatusCode(500)
        oRest:setFault(cMsgLog)
    EndIF  

return .T.

Static Function grava_cliente(jCliente as json,cMsgLog as character) as logical

    Local cCodigo as character
    Local cLoja as character
    Local cNome as character
    Local cNReduz as character
    Local cPessoa as character
    Local cTipo as character
    Local cEnd as character
    Local cCep as character
    Local cBairro as character
    Local cCidade as character
    Local cCodMun as character
    Local cEstado as character
    Local cCampo as character
    Local lStatus as logical
    Local nOpc as numeric
    Local nPos as numeric
    Local aDados as array
    Local aCampos as array

    Local x as variant
    Local xValue as variant

    Private lMsErroAuto as logical 

    cCodigo := jCliente['codigo']
    cLoja   := jCliente['loja']
    cNome   := jCliente['nome']
    cPessoa := jCliente['pessoa']
    cEnd    := jCliente['endereco']
    cCep    := jCliente['cep']
    cCep    := if(valtype(cCep) <> 'C','',cCep)
    cBairro := fwNoAccent(decodeUTF8(jCliente['bairro'],'cp1252'))
    cCidade := jCliente['cidade']
    cEstado := jCliente['estado']
    lStatus := jCliente['status']
    cNReduz := LEFT(cNome,tamSX3('A1_NREDUZ')[1])
    cTipo   := 'F'

    cBloquei:= if(lStatus,'1','2')

    aDados  := array(0)

    IF isInCallStack('curso.api.projeto.u_novo_cliente')
        nOpc := 3
    ElseIF isInCallStack('curso.api.projeto.u_atualiza_cliente')
        nOpc := 4
    EndIF 

    IF cEstado == 'EX'

        cTipo := 'X'
        cCep  := ''

    Else    
        
        CC2->(dbSetOrder(4),dbSeek(xFilial(alias())+cEstado+cCidade))    
        cCodMun := CC2->CC2_CODMUN
        cCidade := CC2->CC2_MUN

    EndIF                

    IF nOpc == 3

        aadd(aDados,{'A1_LOJA'  ,'01'           ,})

    Else

        SA1->(dbSetOrder(1),dbSeek(xFilial(alias())+cCodigo+cLoja))    
        
        aadd(aDados,{'A1_COD'   ,SA1->A1_COD    ,})
        aadd(aDados,{'A1_LOJA'  ,SA1->A1_LOJA   ,})
        
        cNReduz := SA1->A1_NREDUZ

    EndIF

    aadd(aDados,{'A1_NOME'      ,cNome          ,})
    aadd(aDados,{'A1_NREDUZ'    ,cNReduz        ,})
    aadd(aDados,{'A1_PESSOA'    ,cPessoa        ,})
    aadd(aDados,{'A1_TIPO'      ,cTipo          ,})    
    aadd(aDados,{'A1_END'       ,cEnd           ,})
    aadd(aDados,{'A1_CEP'       ,cCep           ,})    
    aadd(aDados,{'A1_BAIRRO'    ,cBairro        ,})
    aadd(aDados,{'A1_EST'       ,cEstado        ,}) 
    IF cEstado <> 'EX'   
    aadd(aDados,{'A1_COD_MUN'   ,cCodMun        ,})
    EndIF
    aadd(aDados,{'A1_MUN'       ,cCidade        ,})
    aadd(aDados,{'A1_MSBLQL'    ,cBloquei       ,})

    IF nOpc == 4
        
        aCampos := fwSx3Util():getAllFields('SA1',.F.)

        For x := 1 To Len(aCampos)

            IF alltrim(aCampos[x]) == 'A1_COD_MUN'
                Loop
            EndIF 

            cCampo     := alltrim(aCampos[x])
            xValue     := &('SA1->' + cCampo)
            nPos       := ascan(aDados,{|xCampo| alltrim(xCampo[1]) == cCampo})

            IF nPos == 0
                aadd(aDados,{cCampo,xValue,})
            EndIF 

        Next

    EndIF

    lMsErroAuto := .F. 

    msExecAuto({|x,y| mata030(x,y)},aDados,nOpc)

    IF lMsErroAuto
        mostraerro('\data\','curso.api.cliente.execauto.erro.txt')
        cMsgLog := memoread('\data\curso.api.cliente.execauto.erro.txt')
        return .F.
    EndIF  

    jCliente['codigo'] := SA1->A1_COD
    jCliente['loja'  ] := SA1->A1_LOJA         

return .T.    

@get('/cliente')
Function u_detalhe_cliente as logical
    
    Local jQueryParams  as json
    Local jHeaderReq    as json
    Local jHeaderRes    as json    
    Local jResponse     as json
    Local cCodigo       as character
    Local cLoja         as character
   
    jQueryParams        := oRest:getQueryRequest()
    jHeaderReq          := oRest:getHeaderRequest()

    jHeaderRes          := jsonObject():new()
    jResponse           := jsonObject():new()

    cCodigo             := jQueryParams['codigo']
    cLoja               := jQueryParams['loja']; cLoja := LEFT(cLoja,2)

    dbSelectArea('SA1')
    dbSetOrder(1)
    dbSeek(xFilial(alias())+cCodigo+cLoja)

    jResponse['codigo'  ] := SA1->A1_COD
    jResponse['loja'    ] := SA1->A1_LOJA
    jResponse['nome'    ] := alltrim(SA1->A1_NOME)
    jResponse['pessoa'  ] := SA1->A1_PESSOA
    jResponse['endereco'] := alltrim(SA1->A1_END )
    jResponse['cep'     ] := SA1->A1_CEP
    jResponse['bairro'  ] := SA1->A1_BAIRRO
    jResponse['cidade'  ] := SA1->A1_MUN
    jResponse['estado'  ] := SA1->A1_EST   

    oRest:setResponse(jResponse:toJson())

return .T.

@delete('/cliente')
Function u_del_cliente as logical

    Local jQueryParams  as json
    Local jHeaderReq    as json
    Local jHeaderRes    as json
    Local jResp         as json    
    Local cMsgLog       as character
    Local aDados        as array
    Local cCodigo       as character
    Local cLoja         as character

    jHeaderRes                  := jsonObject():new()
    jHeaderRes['Content-Type']  := 'application/json'

    jQueryParams                := oRest:getQueryRequest()
    jHeaderReq                  := oRest:getHeaderRequest()  

    cCodigo                     := jQueryParams['codigo']
    cLoja                       := jQueryParams['loja'  ]   

    SA1->(dbSetOrder(1),dbSeek(xFilial(alias())+cCodigo+cLoja))

    aDados := array(0) 
    
    aadd(aDados,{'A1_COD'       ,SA1->A1_COD          ,})
    aadd(aDados,{'A1_LOJA  '    ,SA1->A1_LOJA         ,})

    lMsErroAuto := .F. 
    lret        := .T. 

    msExecAuto({|x,y| mata030(x,y)},aDados,5)       

    IF lMsErroAuto
        mostraerro('\data\','curso.api.cliente.execauto.erro.txt')
        cMsgLog := memoread('\data\curso.api.cliente.execauto.erro.txt')
        lret    := .F.
    EndIF 

    jResp := jsonObject():new()

    IF lret
        jResp['retorno']        := 'Cliente deletado'
        oRest:setResponse(jResp:toJson())
    Else
        oRest:setStatusCode(500)
        oRest:setFault(cMsgLog)
    EndIF         

return .T.
